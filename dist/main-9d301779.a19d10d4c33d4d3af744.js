"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[5069],{6782:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.chunkData={},this.disableCleanup=!1}watchChunk(e,t,s,i){let a=this.getChunk(t,s,i);if(!a.watchers[e.id]){a.watchers[e.id]=e;for(let t in a.references)e.loadObject(a.references[t])}}unwatchChunk(e,t,s,i){let a=this.getChunk(t,s,i);if(a.watchers[e.id]){delete a.watchers[e.id];for(let t in a.references)e.unloadObject(a.references[t]);this.cleanup||this.cleanup(t,s,i)}}addToChunk(e,t,s,i){let a=this.getChunk(t,s,i);if(!a.references[e.id]){a.references[e.id]=e;for(let t in a.watchers)a.watchers[t].loadObject(e)}}removeFromChunk(e,t,s,i){let a=this.getChunk(t,s,i);if(a.references[e.id]){delete a.references[e.id];for(let t in a.watchers)a.watchers[t].unloadObject(e);this.cleanup||this.cleanup(t,s,i)}}getChunk(e,t,s){let i=this.chunkData[e];i||(i=this.chunkData[e]={});let a=i[t];a||(a=i[t]={});let r=a[s??0];return r||(r=a[s??0]={references:{},watchers:{}}),r}cleanup(e,t,s){0==Object.keys(this.chunkData[e][t][s]).length&&(delete this.chunkData[e][t][s],0==Object.keys(this.chunkData[e][t]).length&&(delete this.chunkData[e][t],0==Object.keys(this.chunkData[e]).length&&delete this.chunkData[e]))}}},7302:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.extension=void 0,t.extension=function(e,t){return function(s){let i=1;const a=class extends s{constructor(...e){super(...e),this.addDiscriminator("extension"),console.log("CONSTRUCTOR CALLED!")}};if(t||(t=`${s.name}${i++}`),e.g3eExtensions||(e.g3eExtensions={}),e.g3eExtensions[t])throw new Error(`The game object was already extended with an extension with the given name '${t}'.`);return e.g3eExtensions[t]=a,a}}},943:function(e,t,s){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=i(s(2136));class r extends a.default{constructor(){super(),this.lastUpdate=.001*(performance.now()-16.7),this.frameTicker=0,this.updatePhysics=!0,this.aveAbsFpsDiff=0,this.allSamples=[],this.allDiffSamples=[],this.rollingAverageDt=.01666,this.lastTimeout=-1,this.targetFramePeriod=1/60,this.triggerGameInstanceEvents=this.triggerGameInstanceEvents||!1;for(let e=0;e<60;e++)this.rollingAverageDt=this.targetFramePeriod,this.allSamples.push(this.rollingAverageDt),this.allDiffSamples.push(0)}start(){this.lastTimeout=setTimeout((()=>this.update()),0)}pause(){this.lastTimeout>-1&&clearTimeout(this.lastTimeout),this.lastTimeout=-1}update(){this.frameTicker=(this.frameTicker+1)%60;let e=.001*performance.now(),t=e-this.lastUpdate||.0166;this.lastUpdate=e,this.aveAbsFpsDiff+=.01*(Math.abs(t-this.targetFramePeriod)-this.aveAbsFpsDiff);let s=t-this.targetFramePeriod;if(this.updatePhysics&&(this.lastTimeout=setTimeout((()=>this.update()),1e3*(this.targetFramePeriod-s))),this.triggerGameInstanceEvents&&!this.callback)this.gi.trigger("beforeFixedUpdate",t,e),this.gi.trigger("fixedUpdate",t,e),this.gi.trigger("physicsUpdate",t,e),this.gi.trigger("afterFixedUpdate",t,e),this.gi.trigger("transmitUpdates");else{if(!this.callback||this.triggerGameInstanceEvents)throw new Error("Fixed timers must be configured to either trigger game instance events, or have a callback. Neither or both are invalid.");this.callback(t,e)}}destroy(e){this.pause()}}t.default=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,