"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[4955],{7062:function(t,e,s){var n=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.DecodedMessageInstruction=e.INSTRUCTION_TYPE=void 0;const i=n(s(4051)),a=s(1621),r=n(s(2453)),h=n(s(8862));let u=1;const I={INSTRUCTION_TYPE_HEADER:u++,RESOURCE_ID_MSB:u++,RESOURCE_ID_LSB:u++,CREATE_OBJ_TYPE_MSB:u++,CREATE_OBJ_TYPE_LSB:u++,ACTION_HEADER:u++,FIELD_ID:u++,DATA:u++};e.INSTRUCTION_TYPE={NOOP:0,CREATE:1,UPDATE:2,DELETE:3,ACTION:4};const T=new TextDecoder;class c{constructor(){this.updateType=-1,this.typeId=-1,this.resourceId=-1,this.actionId=-1,this.data=[]}}e.DecodedMessageInstruction=c,e.default=class{constructor(t){this.entityTypeMap={},this.state=I.INSTRUCTION_TYPE_HEADER,this.nextInstruction=null,this.buffer=[],this.nextFieldId=-1,this.nextDataType=-1,this.nextString=null,this.nextActionParamIndex=0,this.isMasterPeer=t}decodeNextSegment(t){var s=[];let n=!1;for(let i of t){switch(null==this.nextInstruction&&(this.nextInstruction=new c),this.state){case I.INSTRUCTION_TYPE_HEADER:if(!i){n=!0;break}if(!this.isMasterPeer&&i!=e.INSTRUCTION_TYPE.ACTION)throw new Error("Slave client attempted a forbidden instruction type.");this.nextInstruction.updateType=i,this.state=I.RESOURCE_ID_MSB;break;case I.RESOURCE_ID_MSB:this.buffer.push(i),this.state=I.RESOURCE_ID_LSB;break;case I.RESOURCE_ID_LSB:{let t=this.buffer[0],s=i;switch(this.buffer.length=0,this.nextInstruction.resourceId=t<<8|s,this.nextInstruction.updateType){case e.INSTRUCTION_TYPE.CREATE:this.state=I.CREATE_OBJ_TYPE_MSB;break;case e.INSTRUCTION_TYPE.UPDATE:case e.INSTRUCTION_TYPE.DELETE:this.state=I.FIELD_ID;break;case e.INSTRUCTION_TYPE.ACTION:this.state=I.ACTION_HEADER;break;default:throw`Invalid instruction type: ${this.nextInstruction.updateType}`}break}case I.CREATE_OBJ_TYPE_MSB:this.buffer.push(i),this.state=I.CREATE_OBJ_TYPE_LSB;break;case I.CREATE_OBJ_TYPE_LSB:{let t=this.buffer[0],e=i;this.buffer.length=0;let s=t<<8|e;this.nextInstruction.typeId=s;let n=h.default[s];if(!n)throw new Error(`Couldn't resolve constructor for type ID ${s}.`);this.entityTypeMap[this.nextInstruction.resourceId]=n,this.state=I.FIELD_ID;break}case I.ACTION_HEADER:this.nextInstruction.actionId=i,this.state=I.FIELD_ID;break;case I.FIELD_ID:i?(this.nextInstruction.updateType==e.INSTRUCTION_TYPE.ACTION?this.nextDataType=this.getActionDataType(i-1):(this.nextFieldId=i,this.nextDataType=this.getCrudDataType()),this.state=I.DATA):this.pushInstruction(s);break;case I.DATA:switch(this.nextDataType){case a.SyncDataTypeEnum.Bool:this.nextInstruction.data.push({type:Boolean,fieldId:this.nextFieldId,value:!!i,syncDataType:"bool"}),this.state=I.FIELD_ID;break;case a.SyncDataTypeEnum.Int:case a.SyncDataTypeEnum.DeciInt:case a.SyncDataTypeEnum.CentiInt:case a.SyncDataTypeEnum.MiliInt:case a.SyncDataTypeEnum.Deg:{this.buffer.push(i);let t=this.buffer[0],e=(48&t)>>4,s=1;if(1==e&&(s=2),2==e&&(s=4),3==e&&(s=8),this.buffer.length>=s){let s=0;128&t?s=1/0:0==e?s=15&i:1==e?(s=(15&this.buffer[0])<<8,s|=i):2==e?(s=(15&this.buffer[0])<<24,s|=(255&this.buffer[1])<<16,s|=(255&this.buffer[2])<<8,s|=i):3==e&&(s=(15&this.buffer[0])<<56,s|=(255&this.buffer[1])<<48,s|=(255&this.buffer[2])<<40,s|=(255&this.buffer[3])<<32,s|=(255&this.buffer[4])<<24,s|=(255&this.buffer[5])<<16,s|=(255&this.buffer[6])<<8,s|=i),64&t&&(s=-s),this.nextInstruction.data.push({type:Number,fieldId:this.nextFieldId,value:s,syncDataType:this.nextDataType==a.SyncDataTypeEnum.Int?"int":this.nextDataType==a.SyncDataTypeEnum.DeciInt?"deciInt":this.nextDataType==a.SyncDataTypeEnum.CentiInt?"centiInt":this.nextDataType==a.SyncDataTypeEnum.MiliInt?"miliInt":this.nextDataType==a.SyncDataTypeEnum.Deg?"deg":null}),this.buffer.length=0,this.state=I.FIELD_ID}break}case a.SyncDataTypeEnum.String:if(this.buffer.length<2&&this.buffer.push(i),2==this.buffer.length&&(this.nextString?this.nextString[this.stringCursor++]=i:(this.nextString=new Uint8Array(this.buffer[0]<<8|i),this.stringCursor=0,this.buffer.length=0)),this.stringCursor==this.nextString.length){let t=T.decode(this.nextString);this.nextInstruction.data.push({type:String,fieldId:this.nextFieldId,value:t,syncDataType:"string"}),this.nextString=null,this.state=I.FIELD_ID}break;default:throw"Unsupported data type."}}if(n)break}return s}pushInstruction(t){t.push(this.nextInstruction),this.nextInstruction.updateType==e.INSTRUCTION_TYPE.DELETE&&delete this.entityTypeMap[this.nextInstruction.resourceId],this.nextInstruction=null,this.state=I.INSTRUCTION_TYPE_HEADER}getCrudDataType(){let t=this.entityTypeMap[this.nextInstruction.resourceId];if(!t||!t._syncedFields)throw new Error("Update an object that wasn't found in the entityTypeMap.");return t._syncedFields[this.nextFieldId].type}getActionDataType(t){return i.default.getEnumTypeFromNamed(r.default.syncedMethods[this.nextInstruction.actionId].syncParamTypes[t])}reset(){this.state=I.INSTRUCTION_TYPE_HEADER,this.nextInstruction=null,this.buffer.length=0}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBQ3ZCLENBQ0EsTUFFSixRQUFTLEtBQU0sMEJBSzNCLEdBQUkwQixFQUNBLEtBQ1IsQ0FHQSxPQUFPRCxDQUNYLENBQ0FXLGdCQUFnQlgsR0FDWkEsRUFBUUksS0FBS2xELEtBQUt1QyxpQkFDZHZDLEtBQUt1QyxnQkFBZ0JSLFlBQWMxQixFQUFRRyxpQkFBaUJrQixlQUNyRDFCLEtBQUtxQyxjQUFjckMsS0FBS3VDLGdCQUFnQk4sWUFFbkRqQyxLQUFLdUMsZ0JBQWtCLEtBQ3ZCdkMsS0FBS3NDLE1BQVF4QixFQUFNQyx1QkFDdkIsQ0FDQXlDLGtCQUNJLElBQUlJLEVBQU81RCxLQUFLcUMsY0FBY3JDLEtBQUt1QyxnQkFBZ0JOLFlBQ25ELElBQUsyQixJQUFTQSxFQUFvQixjQUM5QixNQUFNLElBQUlYLE1BQU0sNERBRXBCLE9BRGFXLEVBQW9CLGNBQUU1RCxLQUFLeUMsYUFBYW1CLElBRXpELENBQ0FMLGtCQUFrQnlCLEdBQ2QsT0FBT3ZFLEVBQVE2QyxRQUFRMkIscUJBQXFCdEUsRUFBZ0IyQyxRQUFRNEIsY0FBY2xGLEtBQUt1QyxnQkFBZ0JMLFVBQVVpRCxlQUFlSCxHQUNwSSxDQUNBSSxRQUNJcEYsS0FBS3NDLE1BQVF4QixFQUFNQyx3QkFDbkJmLEtBQUt1QyxnQkFBa0IsS0FDdkJ2QyxLQUFLd0MsT0FBT2EsT0FBUyxDQUN6QixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2VhcjNlbmdpbmUtd2Vic2l0ZS8uLi8uLi9HQU1FUy1TSU1VTEFUT1JTLUZVTi9nZWFyM2VuZ2luZS9wbHVnaW5zL2dlYXIzZW5naW5lL2J1aWxkL2NvbS9tZXNzYWdlLWRlY29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5EZWNvZGVkTWVzc2FnZUluc3RydWN0aW9uID0gZXhwb3J0cy5JTlNUUlVDVElPTl9UWVBFID0gdm9pZCAwO1xyXG5jb25zdCBjb2RlY18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvZGVjXCIpKTtcclxuY29uc3QgZmllbGRfZGVzY3JpcHRvcl8xID0gcmVxdWlyZShcIi4vc3luYy1kZWNvcmF0b3JzL2ZpZWxkLWRlc2NyaXB0b3JcIik7XHJcbmNvbnN0IHN5bmNlZF9tZXRob2RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zeW5jLWRlY29yYXRvcnMvc3luY2VkLW1ldGhvZFwiKSk7XHJcbmNvbnN0IHR5cGVfcmVnaXN0cnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90eXBlLXJlZ2lzdHJ5XCIpKTtcclxuY29uc3QgREVCVUcgPSAwO1xyXG5sZXQgX3MgPSAxO1xyXG5jb25zdCBTVEFURSA9IHtcclxuICAgIElOU1RSVUNUSU9OX1RZUEVfSEVBREVSOiBfcysrLFxyXG4gICAgUkVTT1VSQ0VfSURfTVNCOiBfcysrLFxyXG4gICAgUkVTT1VSQ0VfSURfTFNCOiBfcysrLFxyXG4gICAgQ1JFQVRFX09CSl9UWVBFX01TQjogX3MrKyxcclxuICAgIENSRUFURV9PQkpfVFlQRV9MU0I6IF9zKyssXHJcbiAgICBBQ1RJT05fSEVBREVSOiBfcysrLFxyXG4gICAgRklFTERfSUQ6IF9zKyssXHJcbiAgICBEQVRBOiBfcysrLFxyXG59O1xyXG5jb25zdCBTVEFURV9OQU1FU19ERUJVRyA9IFtcclxuICAgIFwiSU5TVFJVQ1RJT05fVFlQRV9IRUFERVJcIixcclxuICAgIFwiUkVTT1VSQ0VfSURfTVNCXCIsXHJcbiAgICBcIlJFU09VUkNFX0lEX0xTQlwiLFxyXG4gICAgXCJDUkVBVEVfT0JKX1RZUEVfTVNCXCIsXHJcbiAgICBcIkNSRUFURV9PQkpfVFlQRV9MU0JcIixcclxuICAgIFwiQUNUSU9OX0hFQURFUlwiLFxyXG4gICAgXCJGSUVMRF9JRFwiLFxyXG4gICAgXCJEQVRBXCJcclxuXTtcclxuY29uc3QgSU5TVFJVQ1RJT05fTkFNRVNfREVCVUcgPSBbXCJOTy1PUFwiLCBcIkNSRUFURVwiLCBcIlVQREFURVwiLCBcIkRFTEVURVwiLCBcIkFDVElPTlwiXTtcclxuZXhwb3J0cy5JTlNUUlVDVElPTl9UWVBFID0ge1xyXG4gICAgTk9PUDogMGIwMDAwLFxyXG4gICAgQ1JFQVRFOiAwYjAwMDEsXHJcbiAgICBVUERBVEU6IDBiMDAxMCxcclxuICAgIERFTEVURTogMGIwMDExLFxyXG4gICAgQUNUSU9OOiAwYjAxMDAsXHJcbn07XHJcbmNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcclxuY2xhc3MgRGVjb2RlZE1lc3NhZ2VJbnN0cnVjdGlvbiB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVR5cGUgPSAtMTtcclxuICAgICAgICB0aGlzLnR5cGVJZCA9IC0xO1xyXG4gICAgICAgIHRoaXMucmVzb3VyY2VJZCA9IC0xO1xyXG4gICAgICAgIHRoaXMuYWN0aW9uSWQgPSAtMTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkRlY29kZWRNZXNzYWdlSW5zdHJ1Y3Rpb24gPSBEZWNvZGVkTWVzc2FnZUluc3RydWN0aW9uO1xyXG5jbGFzcyBSZWdpc3RlcmVkRmllbGQge1xyXG4gICAgY29uc3RydWN0b3IoaWQsIHR5cGUpIHtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBSZWdpc3RlcmVkQWN0aW9uIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkKSB7XHJcbiAgICAgICAgdGhpcy5wYXJhbXMgPSB7fTtcclxuICAgICAgICB0aGlzLmlkID0gaWQ7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTWVzc2FnZURlY29kZXIge1xyXG4gICAgY29uc3RydWN0b3IoaXNNYXN0ZXJQZWVyKSB7XHJcbiAgICAgICAgdGhpcy5lbnRpdHlUeXBlTWFwID0ge307XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLklOU1RSVUNUSU9OX1RZUEVfSEVBREVSO1xyXG4gICAgICAgIHRoaXMubmV4dEluc3RydWN0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xyXG4gICAgICAgIHRoaXMubmV4dEZpZWxkSWQgPSAtMTtcclxuICAgICAgICB0aGlzLm5leHREYXRhVHlwZSA9IC0xO1xyXG4gICAgICAgIHRoaXMubmV4dFN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5uZXh0QWN0aW9uUGFyYW1JbmRleCA9IDA7XHJcbiAgICAgICAgdGhpcy5pc01hc3RlclBlZXIgPSBpc01hc3RlclBlZXI7XHJcbiAgICB9XHJcbiAgICBkZWNvZGVOZXh0U2VnbWVudChkYXRhKSB7XHJcbiAgICAgICAgdmFyIGRlY29kZXMgPSBbXTtcclxuICAgICAgICBpZiAoREVCVUcpXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJEZWNvZGluZ1wiLCBkYXRhKTtcclxuICAgICAgICBsZXQgZXhpdExvb3AgPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGxldCBiIG9mIGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubmV4dEluc3RydWN0aW9uID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dEluc3RydWN0aW9uID0gbmV3IERlY29kZWRNZXNzYWdlSW5zdHJ1Y3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoREVCVUcpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiTmV4dCBieXRlOlwiLCBTVEFURV9OQU1FU19ERUJVR1t0aGlzLnN0YXRlIC0gMV0sIGIpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgU1RBVEUuSU5TVFJVQ1RJT05fVFlQRV9IRUFERVI6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoREVCVUcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJcXHRJbnN0cnVjdGlvbiB0eXBlOiBcIiwgSU5TVFJVQ1RJT05fTkFNRVNfREVCVUdbYl0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBleGl0TG9vcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNNYXN0ZXJQZWVyICYmIGIgIT0gZXhwb3J0cy5JTlNUUlVDVElPTl9UWVBFLkFDVElPTikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNsYXZlIGNsaWVudCBhdHRlbXB0ZWQgYSBmb3JiaWRkZW4gaW5zdHJ1Y3Rpb24gdHlwZS5gKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0SW5zdHJ1Y3Rpb24udXBkYXRlVHlwZSA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLlJFU09VUkNFX0lEX01TQjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgU1RBVEUuUkVTT1VSQ0VfSURfTVNCOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaChiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLlJFU09VUkNFX0lEX0xTQjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBTVEFURS5SRVNPVVJDRV9JRF9MU0I6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYjEgPSB0aGlzLmJ1ZmZlclswXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYjIgPSBiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0SW5zdHJ1Y3Rpb24ucmVzb3VyY2VJZCA9IChiMSA8PCA4KSB8IChiMik7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLm5leHRJbnN0cnVjdGlvbi51cGRhdGVUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5JTlNUUlVDVElPTl9UWVBFLkNSRUFURToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLkNSRUFURV9PQkpfVFlQRV9NU0I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGV4cG9ydHMuSU5TVFJVQ1RJT05fVFlQRS5VUERBVEU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURS5GSUVMRF9JRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZXhwb3J0cy5JTlNUUlVDVElPTl9UWVBFLkRFTEVURToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLkZJRUxEX0lEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBleHBvcnRzLklOU1RSVUNUSU9OX1RZUEUuQUNUSU9OOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEUuQUNUSU9OX0hFQURFUjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRocm93IGBJbnZhbGlkIGluc3RydWN0aW9uIHR5cGU6ICR7dGhpcy5uZXh0SW5zdHJ1Y3Rpb24udXBkYXRlVHlwZX1gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgU1RBVEUuQ1JFQVRFX09CSl9UWVBFX01TQjpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2goYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURS5DUkVBVEVfT0JKX1RZUEVfTFNCO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFNUQVRFLkNSRUFURV9PQkpfVFlQRV9MU0I6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYjEgPSB0aGlzLmJ1ZmZlclswXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYjIgPSBiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGVJZCA9IChiMSA8PCA4KSB8IChiMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0SW5zdHJ1Y3Rpb24udHlwZUlkID0gdHlwZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb25zdHJ1Y3RvciA9IHR5cGVfcmVnaXN0cnlfMS5kZWZhdWx0W3R5cGVJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb25zdHJ1Y3RvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCByZXNvbHZlIGNvbnN0cnVjdG9yIGZvciB0eXBlIElEICR7dHlwZUlkfS5gKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0eVR5cGVNYXBbdGhpcy5uZXh0SW5zdHJ1Y3Rpb24ucmVzb3VyY2VJZF0gPSBjb25zdHJ1Y3RvcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEUuRklFTERfSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFNUQVRFLkFDVElPTl9IRUFERVI6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRJbnN0cnVjdGlvbi5hY3Rpb25JZCA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLkZJRUxEX0lEO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBTVEFURS5GSUVMRF9JRDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm5leHRJbnN0cnVjdGlvbi51cGRhdGVUeXBlID09IGV4cG9ydHMuSU5TVFJVQ1RJT05fVFlQRS5BQ1RJT04pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dERhdGFUeXBlID0gdGhpcy5nZXRBY3Rpb25EYXRhVHlwZShiIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRGaWVsZElkID0gYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dERhdGFUeXBlID0gdGhpcy5nZXRDcnVkRGF0YVR5cGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEUuREFUQTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHVzaEluc3RydWN0aW9uKGRlY29kZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgU1RBVEUuREFUQToge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5uZXh0RGF0YVR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBmaWVsZF9kZXNjcmlwdG9yXzEuU3luY0RhdGFUeXBlRW51bS5Cb29sOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRJbnN0cnVjdGlvbi5kYXRhLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJZDogdGhpcy5uZXh0RmllbGRJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogISFiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNEYXRhVHlwZTogXCJib29sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLkZJRUxEX0lEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBmaWVsZF9kZXNjcmlwdG9yXzEuU3luY0RhdGFUeXBlRW51bS5JbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZmllbGRfZGVzY3JpcHRvcl8xLlN5bmNEYXRhVHlwZUVudW0uRGVjaUludDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBmaWVsZF9kZXNjcmlwdG9yXzEuU3luY0RhdGFUeXBlRW51bS5DZW50aUludDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBmaWVsZF9kZXNjcmlwdG9yXzEuU3luY0RhdGFUeXBlRW51bS5NaWxpSW50OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGZpZWxkX2Rlc2NyaXB0b3JfMS5TeW5jRGF0YVR5cGVFbnVtLkRlZzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIucHVzaChiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmaXJzdEJ5dGUgPSB0aGlzLmJ1ZmZlclswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzaXplQ29kZSA9IChmaXJzdEJ5dGUgJiAwYjAwMTEwMDAwKSA+PiA0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGV4cGVjdGVkTGVuZ3RoID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXplQ29kZSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkTGVuZ3RoID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXplQ29kZSA9PSAyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkTGVuZ3RoID0gNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXplQ29kZSA9PSAzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkTGVuZ3RoID0gODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPj0gZXhwZWN0ZWRMZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RCeXRlICYgMGIxMDAwMDAwMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gSW5maW5pdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2l6ZUNvZGUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBiICYgMHgwRjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2l6ZUNvZGUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSAodGhpcy5idWZmZXJbMF0gJiAweDBGKSA8PCA4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgfD0gYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2l6ZUNvZGUgPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSAodGhpcy5idWZmZXJbMF0gJiAweDBGKSA8PCAyNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsIHw9ICh0aGlzLmJ1ZmZlclsxXSAmIDB4RkYpIDw8IDE2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgfD0gKHRoaXMuYnVmZmVyWzJdICYgMHhGRikgPDwgODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsIHw9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNpemVDb2RlID09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gKHRoaXMuYnVmZmVyWzBdICYgMHgwRikgPDwgNTY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCB8PSAodGhpcy5idWZmZXJbMV0gJiAweEZGKSA8PCA0ODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsIHw9ICh0aGlzLmJ1ZmZlclsyXSAmIDB4RkYpIDw8IDQwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgfD0gKHRoaXMuYnVmZmVyWzNdICYgMHhGRikgPDwgMzI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCB8PSAodGhpcy5idWZmZXJbNF0gJiAweEZGKSA8PCAyNDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsIHw9ICh0aGlzLmJ1ZmZlcls1XSAmIDB4RkYpIDw8IDE2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgfD0gKHRoaXMuYnVmZmVyWzZdICYgMHhGRikgPDwgODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsIHw9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdEJ5dGUgJiAwYjAxMDAwMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSAtdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChERUJVRylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCIgICAgSW50ZXJwcmV0ZWQgaW50OlwiLCB2YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dEluc3RydWN0aW9uLmRhdGEucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJZDogdGhpcy5uZXh0RmllbGRJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luY0RhdGFUeXBlOiB0aGlzLm5leHREYXRhVHlwZSA9PSBmaWVsZF9kZXNjcmlwdG9yXzEuU3luY0RhdGFUeXBlRW51bS5JbnQgPyBcImludFwiIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dERhdGFUeXBlID09IGZpZWxkX2Rlc2NyaXB0b3JfMS5TeW5jRGF0YVR5cGVFbnVtLkRlY2lJbnQgPyBcImRlY2lJbnRcIiA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0RGF0YVR5cGUgPT0gZmllbGRfZGVzY3JpcHRvcl8xLlN5bmNEYXRhVHlwZUVudW0uQ2VudGlJbnQgPyBcImNlbnRpSW50XCIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHREYXRhVHlwZSA9PSBmaWVsZF9kZXNjcmlwdG9yXzEuU3luY0RhdGFUeXBlRW51bS5NaWxpSW50ID8gXCJtaWxpSW50XCIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0RGF0YVR5cGUgPT0gZmllbGRfZGVzY3JpcHRvcl8xLlN5bmNEYXRhVHlwZUVudW0uRGVnID8gXCJkZWdcIiA6IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5sZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURS5GSUVMRF9JRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZmllbGRfZGVzY3JpcHRvcl8xLlN5bmNEYXRhVHlwZUVudW0uU3RyaW5nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDwgMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlci5wdXNoKGIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm5leHRTdHJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0U3RyaW5nID0gbmV3IFVpbnQ4QXJyYXkoKHRoaXMuYnVmZmVyWzBdIDw8IDgpIHwgYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyaW5nQ3Vyc29yID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWZmZXIubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFN0cmluZ1t0aGlzLnN0cmluZ0N1cnNvcisrXSA9IGI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RyaW5nQ3Vyc29yID09IHRoaXMubmV4dFN0cmluZy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3RyID0gZGVjb2Rlci5kZWNvZGUodGhpcy5uZXh0U3RyaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRJbnN0cnVjdGlvbi5kYXRhLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkSWQ6IHRoaXMubmV4dEZpZWxkSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzdHIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNEYXRhVHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFN0cmluZyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFLkZJRUxEX0lEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdGhyb3cgXCJVbnN1cHBvcnRlZCBkYXRhIHR5cGUuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChleGl0TG9vcClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoREVCVUcpXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJEb25lIGRlY29kaW5nLlwiKTtcclxuICAgICAgICByZXR1cm4gZGVjb2RlcztcclxuICAgIH1cclxuICAgIHB1c2hJbnN0cnVjdGlvbihkZWNvZGVzKSB7XHJcbiAgICAgICAgZGVjb2Rlcy5wdXNoKHRoaXMubmV4dEluc3RydWN0aW9uKTtcclxuICAgICAgICBpZiAodGhpcy5uZXh0SW5zdHJ1Y3Rpb24udXBkYXRlVHlwZSA9PSBleHBvcnRzLklOU1RSVUNUSU9OX1RZUEUuREVMRVRFKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmVudGl0eVR5cGVNYXBbdGhpcy5uZXh0SW5zdHJ1Y3Rpb24ucmVzb3VyY2VJZF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubmV4dEluc3RydWN0aW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEUuSU5TVFJVQ1RJT05fVFlQRV9IRUFERVI7XHJcbiAgICB9XHJcbiAgICBnZXRDcnVkRGF0YVR5cGUoKSB7XHJcbiAgICAgICAgbGV0IHR5cGUgPSB0aGlzLmVudGl0eVR5cGVNYXBbdGhpcy5uZXh0SW5zdHJ1Y3Rpb24ucmVzb3VyY2VJZF07XHJcbiAgICAgICAgaWYgKCF0eXBlIHx8ICF0eXBlW1wiX3N5bmNlZEZpZWxkc1wiXSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXBkYXRlIGFuIG9iamVjdCB0aGF0IHdhc24ndCBmb3VuZCBpbiB0aGUgZW50aXR5VHlwZU1hcC5cIik7XHJcbiAgICAgICAgbGV0IHR5cGVJZCA9IHR5cGVbXCJfc3luY2VkRmllbGRzXCJdW3RoaXMubmV4dEZpZWxkSWRdLnR5cGU7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVJZDtcclxuICAgIH1cclxuICAgIGdldEFjdGlvbkRhdGFUeXBlKHBJbmRleCkge1xyXG4gICAgICAgIHJldHVybiBjb2RlY18xLmRlZmF1bHQuZ2V0RW51bVR5cGVGcm9tTmFtZWQoc3luY2VkX21ldGhvZF8xLmRlZmF1bHQuc3luY2VkTWV0aG9kc1t0aGlzLm5leHRJbnN0cnVjdGlvbi5hY3Rpb25JZF0uc3luY1BhcmFtVHlwZXNbcEluZGV4XSk7XHJcbiAgICB9XHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEUuSU5TVFJVQ1RJT05fVFlQRV9IRUFERVI7XHJcbiAgICAgICAgdGhpcy5uZXh0SW5zdHJ1Y3Rpb24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gTWVzc2FnZURlY29kZXI7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2UtZGVjb2Rlci5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwidGhpcyIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRlY29kZWRNZXNzYWdlSW5zdHJ1Y3Rpb24iLCJJTlNUUlVDVElPTl9UWVBFIiwiY29kZWNfMSIsImZpZWxkX2Rlc2NyaXB0b3JfMSIsInN5bmNlZF9tZXRob2RfMSIsInR5cGVfcmVnaXN0cnlfMSIsIl9zIiwiU1RBVEUiLCJJTlNUUlVDVElPTl9UWVBFX0hFQURFUiIsIlJFU09VUkNFX0lEX01TQiIsIlJFU09VUkNFX0lEX0xTQiIsIkNSRUFURV9PQkpfVFlQRV9NU0IiLCJDUkVBVEVfT0JKX1RZUEVfTFNCIiwiQUNUSU9OX0hFQURFUiIsIkZJRUxEX0lEIiwiREFUQSIsIk5PT1AiLCJDUkVBVEUiLCJVUERBVEUiLCJERUxFVEUiLCJBQ1RJT04iLCJkZWNvZGVyIiwiVGV4dERlY29kZXIiLCJjb25zdHJ1Y3RvciIsInVwZGF0ZVR5cGUiLCJ0eXBlSWQiLCJyZXNvdXJjZUlkIiwiYWN0aW9uSWQiLCJkYXRhIiwiaXNNYXN0ZXJQZWVyIiwiZW50aXR5VHlwZU1hcCIsInN0YXRlIiwibmV4dEluc3RydWN0aW9uIiwiYnVmZmVyIiwibmV4dEZpZWxkSWQiLCJuZXh0RGF0YVR5cGUiLCJuZXh0U3RyaW5nIiwibmV4dEFjdGlvblBhcmFtSW5kZXgiLCJkZWNvZGVOZXh0U2VnbWVudCIsImRlY29kZXMiLCJleGl0TG9vcCIsImIiLCJFcnJvciIsInB1c2giLCJiMSIsImIyIiwibGVuZ3RoIiwiZGVmYXVsdCIsImdldEFjdGlvbkRhdGFUeXBlIiwiZ2V0Q3J1ZERhdGFUeXBlIiwicHVzaEluc3RydWN0aW9uIiwiU3luY0RhdGFUeXBlRW51bSIsIkJvb2wiLCJ0eXBlIiwiQm9vbGVhbiIsImZpZWxkSWQiLCJzeW5jRGF0YVR5cGUiLCJJbnQiLCJEZWNpSW50IiwiQ2VudGlJbnQiLCJNaWxpSW50IiwiRGVnIiwiZmlyc3RCeXRlIiwic2l6ZUNvZGUiLCJleHBlY3RlZExlbmd0aCIsInZhbCIsIkluZmluaXR5IiwiTnVtYmVyIiwiU3RyaW5nIiwic3RyaW5nQ3Vyc29yIiwiVWludDhBcnJheSIsInN0ciIsImRlY29kZSIsInBJbmRleCIsImdldEVudW1UeXBlRnJvbU5hbWVkIiwic3luY2VkTWV0aG9kcyIsInN5bmNQYXJhbVR5cGVzIiwicmVzZXQiXSwic291cmNlUm9vdCI6IiJ9