"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[9187],{9187:e=>{function n(e,n,r){r=r||2;var i,u,v,f,p,y,l,s=n&&n.length,c=s?n[0]*r:e.length,Z=t(e,0,c,r,!0),g=[];if(!Z||Z.next===Z.prev)return g;if(s&&(Z=function(e,n,r,x){var i,u,v,f=[];for(i=0,u=n.length;i<u;i++)(v=t(e,n[i]*x,i<u-1?n[i+1]*x:e.length,x,!1))===v.next&&(v.steiner=!0),f.push(h(v));for(f.sort(o),i=0;i<f.length;i++)r=a(f[i],r);return r}(e,n,Z,r)),e.length>80*r){i=v=e[0],u=f=e[1];for(var w=r;w<c;w+=r)(p=e[w])<i&&(i=p),(y=e[w+1])<u&&(u=y),p>v&&(v=p),y>f&&(f=y);l=0!==(l=Math.max(v-i,f-u))?32767/l:0}return x(Z,g,r,i,u,l,0),g}function t(e,n,t,r,x){var i,u;if(x===C(e,n,t,r)>0)for(i=n;i<t;i+=r)u=z(i,e[i],e[i+1],u);else for(i=t-r;i>=n;i-=r)u=z(i,e[i],e[i+1],u);return u&&Z(u,u.next)&&(k(u),u=u.next),u}function r(e,n){if(!e)return e;n||(n=e);var t,r=e;do{if(t=!1,r.steiner||!Z(r,r.next)&&0!==c(r.prev,r,r.next))r=r.next;else{if(k(r),(r=n=r.prev)===r.next)break;t=!0}}while(t||r!==n);return n}function x(e,n,t,o,a,p,h){if(e){!h&&p&&function(e,n,t,r){var x=e;do{0===x.z&&(x.z=y(x.x,x.y,n,t,r)),x.prevZ=x.prev,x.nextZ=x.next,x=x.next}while(x!==e);x.prevZ.nextZ=null,x.prevZ=null,function(e){var n,t,r,x,i,u,v,f,o=1;do{for(t=e,e=null,i=null,u=0;t;){for(u++,r=t,v=0,n=0;n<o&&(v++,r=r.nextZ);n++);for(f=o;v>0||f>0&&r;)0!==v&&(0===f||!r||t.z<=r.z)?(x=t,t=t.nextZ,v--):(x=r,r=r.nextZ,f--),i?i.nextZ=x:e=x,x.prevZ=i,i=x;t=r}i.nextZ=null,o*=2}while(u>1)}(x)}(e,o,a,p);for(var l,s,c=e;e.prev!==e.next;)if(l=e.prev,s=e.next,p?u(e,o,a,p):i(e))n.push(l.i/t|0),n.push(e.i/t|0),n.push(s.i/t|0),k(e),e=s.next,c=s.next;else if((e=s)===c){h?1===h?x(e=v(r(e),n,t),n,t,o,a,p,2):2===h&&f(e,n,t,o,a,p):x(r(e),n,t,o,a,p,1);break}}}function i(e){var n=e.prev,t=e,r=e.next;if(c(n,t,r)>=0)return!1;for(var x=n.x,i=t.x,u=r.x,v=n.y,f=t.y,o=r.y,a=x<i?x<u?x:u:i<u?i:u,p=v<f?v<o?v:o:f<o?f:o,y=x>i?x>u?x:u:i>u?i:u,h=v>f?v>o?v:o:f>o?f:o,s=r.next;s!==n;){if(s.x>=a&&s.x<=y&&s.y>=p&&s.y<=h&&l(x,v,i,f,u,o,s.x,s.y)&&c(s.prev,s,s.next)>=0)return!1;s=s.next}return!0}function u(e,n,t,r){var x=e.prev,i=e,u=e.next;if(c(x,i,u)>=0)return!1;for(var v=x.x,f=i.x,o=u.x,a=x.y,p=i.y,h=u.y,s=v<f?v<o?v:o:f<o?f:o,Z=a<p?a<h?a:h:p<h?p:h,g=v>f?v>o?v:o:f>o?f:o,w=a>p?a>h?a:h:p>h?p:h,d=y(s,Z,n,t,r),b=y(g,w,n,t,r),M=e.prevZ,z=e.nextZ;M&&M.z>=d&&z&&z.z<=b;){if(M.x>=s&&M.x<=g&&M.y>=Z&&M.y<=w&&M!==x&&M!==u&&l(v,a,f,p,o,h,M.x,M.y)&&c(M.prev,M,M.next)>=0)return!1;if(M=M.prevZ,z.x>=s&&z.x<=g&&z.y>=Z&&z.y<=w&&z!==x&&z!==u&&l(v,a,f,p,o,h,z.x,z.y)&&c(z.prev,z,z.next)>=0)return!1;z=z.nextZ}for(;M&&M.z>=d;){if(M.x>=s&&M.x<=g&&M.y>=Z&&M.y<=w&&M!==x&&M!==u&&l(v,a,f,p,o,h,M.x,M.y)&&c(M.prev,M,M.next)>=0)return!1;M=M.prevZ}for(;z&&z.z<=b;){if(z.x>=s&&z.x<=g&&z.y>=Z&&z.y<=w&&z!==x&&z!==u&&l(v,a,f,p,o,h,z.x,z.y)&&c(z.prev,z,z.next)>=0)return!1;z=z.nextZ}return!0}function v(e,n,t){var x=e;do{var i=x.prev,u=x.next.next;!Z(i,u)&&g(i,x,x.next,u)&&b(i,u)&&b(u,i)&&(n.push(i.i/t|0),n.push(x.i/t|0),n.push(u.i/t|0),k(x),k(x.next),x=e=u),x=x.next}while(x!==e);return r(x)}function f(e,n,t,i,u,v){var f=e;do{for(var o=f.next.next;o!==f.prev;){if(f.i!==o.i&&s(f,o)){var a=M(f,o);return f=r(f,f.next),a=r(a,a.next),x(f,n,t,i,u,v,0),void x(a,n,t,i,u,v,0)}o=o.next}f=f.next}while(f!==e)}function o(e,n){return e.x-n.x}function a(e,n){var t=function(e,n){var t,r=n,x=e.x,i=e.y,u=-1/0;do{if(i<=r.y&&i>=r.next.y&&r.next.y!==r.y){var v=r.x+(i-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(v<=x&&v>u&&(u=v,t=r.x<r.next.x?r:r.next,v===x))return t}r=r.next}while(r!==n);if(!t)return null;var f,o=t,a=t.x,y=t.y,h=1/0;r=t;do{x>=r.x&&r.x>=a&&x!==r.x&&l(i<y?x:u,i,a,y,i<y?u:x,i,r.x,r.y)&&(f=Math.abs(i-r.y)/(x-r.x),b(r,e)&&(f<h||f===h&&(r.x>t.x||r.x===t.x&&p(t,r)))&&(t=r,h=f)),r=r.next}while(r!==o);return t}(e,n);if(!t)return n;var x=M(t,e);return r(x,x.next),r(t,t.next)}function p(e,n){return c(e.prev,e,n.prev)<0&&c(n.next,e,e.next)<0}function y(e,n,t,r,x){return(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-t)*x|0)|e<<8))|e<<4))|e<<2))|e<<1))|(n=1431655765&((n=858993459&((n=252645135&((n=16711935&((n=(n-r)*x|0)|n<<8))|n<<4))|n<<2))|n<<1))<<1}function h(e){var n=e,t=e;do{(n.x<t.x||n.x===t.x&&n.y<t.y)&&(t=n),n=n.next}while(n!==e);return t}function l(e,n,t,r,x,i,u,v){return(x-u)*(n-v)>=(e-u)*(i-v)&&(e-u)*(r-v)>=(t-u)*(n-v)&&(t-u)*(i-v)>=(x-u)*(r-v)}function s(e,n){return e.next.i!==n.i&&e.prev.i!==n.i&&!function(e,n){var t=e;do{if(t.i!==e.i&&t.next.i!==e.i&&t.i!==n.i&&t.next.i!==n.i&&g(t,t.next,e,n))return!0;t=t.next}while(t!==e);return!1}(e,n)&&(b(e,n)&&b(n,e)&&function(e,n){var t=e,r=!1,x=(e.x+n.x)/2,i=(e.y+n.y)/2;do{t.y>i!=t.next.y>i&&t.next.y!==t.y&&x<(t.next.x-t.x)*(i-t.y)/(t.next.y-t.y)+t.x&&(r=!r),t=t.next}while(t!==e);return r}(e,n)&&(c(e.prev,e,n.prev)||c(e,n.prev,n))||Z(e,n)&&c(e.prev,e,e.next)>0&&c(n.prev,n,n.next)>0)}function c(e,n,t){return(n.y-e.y)*(t.x-n.x)-(n.x-e.x)*(t.y-n.y)}function Z(e,n){return e.x===n.x&&e.y===n.y}function g(e,n,t,r){var x=d(c(e,n,t)),i=d(c(e,n,r)),u=d(c(t,r,e)),v=d(c(t,r,n));return x!==i&&u!==v||!(0!==x||!w(e,t,n))||!(0!==i||!w(e,r,n))||!(0!==u||!w(t,e,r))||!(0!==v||!w(t,n,r))}function w(e,n,t){return n.x<=Math.max(e.x,t.x)&&n.x>=Math.min(e.x,t.x)&&n.y<=Math.max(e.y,t.y)&&n.y>=Math.min(e.y,t.y)}function d(e){return e>0?1:e<0?-1:0}function b(e,n){return c(e.prev,e,e.next)<0?c(e,n,e.next)>=0&&c(e,e.prev,n)>=0:c(e,n,e.prev)<0||c(e,e.next,n)<0}function M(e,n){var t=new m(e.i,e.x,e.y),r=new m(n.i,n.x,n.y),x=e.next,i=n.prev;return e.next=n,n.prev=e,t.next=x,x.prev=t,r.next=t,t.prev=r,i.next=r,r.prev=i,r}function z(e,n,t,r){var x=new m(e,n,t);return r?(x.next=r.next,x.prev=r,r.next.prev=x,r.next=x):(x.prev=x,x.next=x),x}function k(e){e.next.prev=e.prev,e.prev.next=e.next,e.prevZ&&(e.prevZ.nextZ=e.nextZ),e.nextZ&&(e.nextZ.prevZ=e.prevZ)}function m(e,n,t){this.i=e,this.x=n,this.y=t,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function C(e,n,t,r){for(var x=0,i=n,u=t-r;i<t;i+=r)x+=(e[u]-e[i])*(e[i+1]+e[u+1]),u=i;return x}e.exports=n,e.exports.default=n,n.deviation=function(e,n,t,r){var x=n&&n.length,i=x?n[0]*t:e.length,u=Math.abs(C(e,0,i,t));if(x)for(var v=0,f=n.length;v<f;v++){var o=n[v]*t,a=v<f-1?n[v+1]*t:e.length;u-=Math.abs(C(e,o,a,t))}var p=0;for(v=0;v<r.length;v+=3){var y=r[v]*t,h=r[v+1]*t,l=r[v+2]*t;p+=Math.abs((e[y]-e[l])*(e[h+1]-e[y+1])-(e[y]-e[h])*(e[l+1]-e[y+1]))}return 0===u&&0===p?0:Math.abs((p-u)/u)},n.flatten=function(e){for(var n=e[0][0].length,t={vertices:[],holes:[],dimensions:n},r=0,x=0;x<e.length;x++){for(var i=0;i<e[x].length;i++)for(var u=0;u<n;u++)t.vertices.push(e[x][i][u]);x>0&&(r+=e[x-1].length,t.holes.push(r))}return t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,