/*! For license information please see 520.0ce469075cbd427697b4.js.LICENSE.txt */
"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[520],{520:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r,n,s=i(2514),h=i(932),a=i(8950),o=i(5868),l=i(3663);e.LINE_JOIN=void 0,(r=e.LINE_JOIN||(e.LINE_JOIN={})).MITER="miter",r.BEVEL="bevel",r.ROUND="round",e.LINE_CAP=void 0,(n=e.LINE_CAP||(e.LINE_CAP={})).BUTT="butt",n.ROUND="round",n.SQUARE="square";var u={adaptive:!0,maxLength:10,minSegments:8,maxSegments:2048,epsilon:1e-4,_segmentsCount:function(t,e){if(void 0===e&&(e=20),!this.adaptive||!t||isNaN(t))return e;var i=Math.ceil(t/this.maxLength);return i<this.minSegments?i=this.minSegments:i>this.maxSegments&&(i=this.maxSegments),i}},p=function(){function t(){this.color=16777215,this.alpha=1,this.texture=s.Texture.WHITE,this.matrix=null,this.visible=!1,this.reset()}return t.prototype.clone=function(){var e=new t;return e.color=this.color,e.alpha=this.alpha,e.texture=this.texture,e.matrix=this.matrix,e.visible=this.visible,e},t.prototype.reset=function(){this.color=16777215,this.alpha=1,this.texture=s.Texture.WHITE,this.matrix=null,this.visible=!1},t.prototype.destroy=function(){this.texture=null,this.matrix=null},t}(),c=function(t,e){return c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},c(t,e)};function d(t,e){function i(){this.constructor=t}c(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}function f(t,e){var i,r;void 0===e&&(e=!1);var n=t.length;if(!(n<6)){for(var s=0,h=0,a=t[n-2],o=t[n-1];h<n;h+=2){var l=t[h],u=t[h+1];s+=(l-a)*(u+o),a=l,o=u}if(!e&&s>0||e&&s<=0){var p=n/2;for(h=p+p%2;h<n;h+=2){var c=n-h-2,d=n-h-1,f=h,y=h+1;i=[t[f],t[c]],t[c]=i[0],t[f]=i[1],r=[t[y],t[d]],t[d]=r[0],t[y]=r[1]}}}}var y={build:function(t){t.points=t.shape.points.slice()},triangulate:function(t,e){var i=t.points,r=t.holes,n=e.points,s=e.indices;if(i.length>=6){f(i,!1);for(var h=[],o=0;o<r.length;o++){var l=r[o];f(l.points,!0),h.push(i.length/2),i=i.concat(l.points)}var u=a.earcut(i,h,2);if(!u)return;var p=n.length/2;for(o=0;o<u.length;o+=3)s.push(u[o]+p),s.push(u[o+1]+p),s.push(u[o+2]+p);for(o=0;o<i.length;o++)n.push(i[o])}}},g={build:function(t){var e,i,r,n,s,a,o=t.points;if(t.type===h.SHAPES.CIRC){var l=t.shape;e=l.x,i=l.y,s=a=l.radius,r=n=0}else if(t.type===h.SHAPES.ELIP){var u=t.shape;e=u.x,i=u.y,s=u.width,a=u.height,r=n=0}else{var p=t.shape,c=p.width/2,d=p.height/2;e=p.x+c,i=p.y+d,r=c-(s=a=Math.max(0,Math.min(p.radius,Math.min(c,d)))),n=d-a}if(s>=0&&a>=0&&r>=0&&n>=0){var f=Math.ceil(2.3*Math.sqrt(s+a)),y=8*f+(r?4:0)+(n?4:0);if(o.length=y,0!==y){if(0===f)return o.length=8,o[0]=o[6]=e+r,o[1]=o[3]=i+n,o[2]=o[4]=e-r,void(o[5]=o[7]=i-n);var g,v,b=0,m=4*f+(r?2:0)+2,x=m,_=y,S=e+(g=r+s),P=e-g,w=i+(v=n);if(o[b++]=S,o[b++]=w,o[--m]=w,o[--m]=P,n){var M=i-v;o[x++]=P,o[x++]=M,o[--_]=M,o[--_]=S}for(var E=1;E<f;E++){var A=Math.PI/2*(E/f);S=e+(g=r+Math.cos(A)*s),P=e-g,w=i+(v=n+Math.sin(A)*a),M=i-v,o[b++]=S,o[b++]=w,o[--m]=w,o[--m]=P,o[x++]=P,o[x++]=M,o[--_]=M,o[--_]=S}S=e+(g=r),P=e-g,w=i+(v=n+a),M=i-v,o[b++]=S,o[b++]=w,o[--_]=M,o[--_]=S,r&&(o[b++]=P,o[b++]=w,o[--_]=M,o[--_]=P)}}else o.length=0},triangulate:function(t,e){var i,r,n=t.points,s=e.points,a=e.indices,o=s.length/2,l=o;if(t.type!==h.SHAPES.RREC){var u=t.shape;i=u.x,r=u.y}else{var p=t.shape;i=p.x+p.width/2,r=p.y+p.height/2}var c=t.matrix;s.push(t.matrix?c.a*i+c.c*r+c.tx:i,t.matrix?c.b*i+c.d*r+c.ty:r),o++,s.push(n[0],n[1]);for(var d=2;d<n.length;d+=2)s.push(n[d],n[d+1]),a.push(o++,l,o);a.push(l+1,l,o)}},v={build:function(t){var e=t.shape,i=e.x,r=e.y,n=e.width,s=e.height,h=t.points;h.length=0,h.push(i,r,i+n,r,i+n,r+s,i,r+s)},triangulate:function(t,e){var i=t.points,r=e.points,n=r.length/2;r.push(i[0],i[1],i[2],i[3],i[6],i[7],i[4],i[5]),e.indices.push(n,n+1,n+2,n+1,n+2,n+3)}};function b(t,e,i){return t+(e-t)*i}function m(t,e,i,r,n,s,h){void 0===h&&(h=[]);for(var a=h,o=0,l=0,u=0,p=0,c=0,d=0,f=0,y=0;f<=20;++f)o=b(t,i,y=f/20),l=b(e,r,y),u=b(i,n,y),p=b(r,s,y),c=b(o,u,y),d=b(l,p,y),0===f&&a[a.length-2]===c&&a[a.length-1]===d||a.push(c,d);return a}var x={build:function(t){if(j.nextRoundedRectBehavior)g.build(t);else{var e=t.shape,i=t.points,r=e.x,n=e.y,s=e.width,h=e.height,a=Math.max(0,Math.min(e.radius,Math.min(s,h)/2));i.length=0,a?(m(r,n+a,r,n,r+a,n,i),m(r+s-a,n,r+s,n,r+s,n+a,i),m(r+s,n+h-a,r+s,n+h,r+s-a,n+h,i),m(r+a,n+h,r,n+h,r,n+h-a,i)):i.push(r,n,r+s,n,r+s,n+h,r,n+h)}},triangulate:function(t,e){if(j.nextRoundedRectBehavior)g.triangulate(t,e);else{for(var i=t.points,r=e.points,n=e.indices,s=r.length/2,h=a.earcut(i,null,2),o=0,l=h.length;o<l;o+=3)n.push(h[o]+s),n.push(h[o+1]+s),n.push(h[o+2]+s);for(o=0,l=i.length;o<l;o++)r.push(i[o],i[++o])}}};function _(t,e,i,r,n,s,h,a){var o,l;h?(o=r,l=-i):(o=-r,l=i);var u=t-i*n+o,p=e-r*n+l,c=t+i*s+o,d=e+r*s+l;return a.push(u,p),a.push(c,d),2}function S(t,e,i,r,n,s,h,a){var o=i-t,l=r-e,u=Math.atan2(o,l),p=Math.atan2(n-t,s-e);a&&u<p?u+=2*Math.PI:!a&&u>p&&(p+=2*Math.PI);var c=u,d=p-u,f=Math.abs(d),y=Math.sqrt(o*o+l*l),g=1+(15*f*Math.sqrt(y)/Math.PI>>0),v=d/g;if(c+=v,a){h.push(t,e),h.push(i,r);for(var b=1,m=c;b<g;b++,m+=v)h.push(t,e),h.push(t+Math.sin(m)*y,e+Math.cos(m)*y);h.push(t,e),h.push(n,s)}else{for(h.push(i,r),h.push(t,e),b=1,m=c;b<g;b++,m+=v)h.push(t+Math.sin(m)*y,e+Math.cos(m)*y),h.push(t,e);h.push(n,s),h.push(t,e)}return 2*g}function P(t,i){t.lineStyle.native?function(t,e){var i=0,r=t.shape,n=t.points||r.points,s=r.type!==h.SHAPES.POLY||r.closeStroke;if(0!==n.length){var a=e.points,o=e.indices,l=n.length/2,u=a.length/2,p=u;for(a.push(n[0],n[1]),i=1;i<l;i++)a.push(n[2*i],n[2*i+1]),o.push(p,p+1),p++;s&&o.push(p,u)}}(t,i):function(t,i){var r=t.shape,n=t.points||r.points.slice(),s=i.closePointEps;if(0!==n.length){var a=t.lineStyle,o=new h.Point(n[0],n[1]),l=new h.Point(n[n.length-2],n[n.length-1]),p=r.type!==h.SHAPES.POLY||r.closeStroke,c=Math.abs(o.x-l.x)<s&&Math.abs(o.y-l.y)<s;if(p){n=n.slice(),c&&(n.pop(),n.pop(),l.set(n[n.length-2],n[n.length-1]));var d=.5*(o.x+l.x),f=.5*(l.y+o.y);n.unshift(d,f),n.push(d,f)}var y=i.points,g=n.length/2,v=n.length,b=y.length/2,m=a.width/2,x=m*m,P=a.miterLimit*a.miterLimit,w=n[0],M=n[1],E=n[2],A=n[3],T=0,D=0,I=-(M-A),C=w-E,R=0,L=0,B=Math.sqrt(I*I+C*C);I/=B,C/=B,I*=m,C*=m;var N=a.alignment,O=2*(1-N),U=2*N;p||(a.cap===e.LINE_CAP.ROUND?v+=S(w-I*(O-U)*.5,M-C*(O-U)*.5,w-I*O,M-C*O,w+I*U,M+C*U,y,!0)+2:a.cap===e.LINE_CAP.SQUARE&&(v+=_(w,M,I,C,O,U,!0,y))),y.push(w-I*O,M-C*O),y.push(w+I*U,M+C*U);for(var H=1;H<g-1;++H){w=n[2*(H-1)],M=n[2*(H-1)+1],E=n[2*H],A=n[2*H+1],T=n[2*(H+1)],D=n[2*(H+1)+1],I=-(M-A),C=w-E,I/=B=Math.sqrt(I*I+C*C),C/=B,I*=m,C*=m,R=-(A-D),L=E-T,R/=B=Math.sqrt(R*R+L*L),L/=B,R*=m,L*=m;var j=E-w,F=M-A,z=E-T,k=D-A,q=F*z-k*j,G=q<0;if(Math.abs(q)<.1)y.push(E-I*O,A-C*O),y.push(E+I*U,A+C*U);else{var W=(-I+w)*(-C+A)-(-I+E)*(-C+M),J=(-R+T)*(-L+A)-(-R+E)*(-L+D),Y=(j*J-z*W)/q,V=(k*W-F*J)/q,Q=(Y-E)*(Y-E)+(V-A)*(V-A),X=E+(Y-E)*O,Z=A+(V-A)*O,K=E-(Y-E)*U,$=A-(V-A)*U,tt=G?O:U;Q<=Math.min(j*j+F*F,z*z+k*k)+tt*tt*x?a.join===e.LINE_JOIN.BEVEL||Q/x>P?(G?(y.push(X,Z),y.push(E+I*U,A+C*U),y.push(X,Z),y.push(E+R*U,A+L*U)):(y.push(E-I*O,A-C*O),y.push(K,$),y.push(E-R*O,A-L*O),y.push(K,$)),v+=2):a.join===e.LINE_JOIN.ROUND?G?(y.push(X,Z),y.push(E+I*U,A+C*U),v+=S(E,A,E+I*U,A+C*U,E+R*U,A+L*U,y,!0)+4,y.push(X,Z),y.push(E+R*U,A+L*U)):(y.push(E-I*O,A-C*O),y.push(K,$),v+=S(E,A,E-I*O,A-C*O,E-R*O,A-L*O,y,!1)+4,y.push(E-R*O,A-L*O),y.push(K,$)):(y.push(X,Z),y.push(K,$)):(y.push(E-I*O,A-C*O),y.push(E+I*U,A+C*U),a.join===e.LINE_JOIN.ROUND?v+=G?S(E,A,E+I*U,A+C*U,E+R*U,A+L*U,y,!0)+2:S(E,A,E-I*O,A-C*O,E-R*O,A-L*O,y,!1)+2:a.join===e.LINE_JOIN.MITER&&Q/x<=P&&(G?(y.push(K,$),y.push(K,$)):(y.push(X,Z),y.push(X,Z)),v+=2),y.push(E-R*O,A-L*O),y.push(E+R*U,A+L*U),v+=2)}}w=n[2*(g-2)],M=n[2*(g-2)+1],E=n[2*(g-1)],I=-(M-(A=n[2*(g-1)+1])),C=w-E,I/=B=Math.sqrt(I*I+C*C),C/=B,I*=m,C*=m,y.push(E-I*O,A-C*O),y.push(E+I*U,A+C*U),p||(a.cap===e.LINE_CAP.ROUND?v+=S(E-I*(O-U)*.5,A-C*(O-U)*.5,E-I*O,A-C*O,E+I*U,A+C*U,y,!1)+2:a.cap===e.LINE_CAP.SQUARE&&(v+=_(E,A,I,C,O,U,!1,y)));var et=i.indices,it=u.epsilon*u.epsilon;for(H=b;H<v+b-2;++H)w=y[2*H],M=y[2*H+1],E=y[2*(H+1)],A=y[2*(H+1)+1],T=y[2*(H+2)],D=y[2*(H+2)+1],Math.abs(w*(A-D)+E*(D-M)+T*(M-A))<it||et.push(H,H+1,H+2)}}(t,i)}var w,M=function(){function t(){}return t.curveTo=function(t,e,i,r,n,s){var h=s[s.length-2],a=s[s.length-1]-e,o=h-t,l=r-e,u=i-t,p=Math.abs(a*u-o*l);if(p<1e-8||0===n)return s[s.length-2]===t&&s[s.length-1]===e||s.push(t,e),null;var c=a*a+o*o,d=l*l+u*u,f=a*l+o*u,y=n*Math.sqrt(c)/p,g=n*Math.sqrt(d)/p,v=y*f/c,b=g*f/d,m=y*u+g*o,x=y*l+g*a,_=o*(g+v),S=a*(g+v),P=u*(y+b),w=l*(y+b);return{cx:m+t,cy:x+e,radius:n,startAngle:Math.atan2(S-x,_-m),endAngle:Math.atan2(w-x,P-m),anticlockwise:o*l>u*a}},t.arc=function(t,e,i,r,n,s,a,o,l){for(var p=a-s,c=u._segmentsCount(Math.abs(p)*n,40*Math.ceil(Math.abs(p)/h.PI_2)),d=p/(2*c),f=2*d,y=Math.cos(d),g=Math.sin(d),v=c-1,b=v%1/v,m=0;m<=v;++m){var x=d+s+f*(m+b*m),_=Math.cos(x),S=-Math.sin(x);l.push((y*_+g*S)*n+i,(y*-S+g*_)*n+r)}},t}(),E=function(){function t(){}return t.curveLength=function(t,e,i,r,n,s,h,a){for(var o=0,l=0,u=0,p=0,c=0,d=0,f=0,y=0,g=0,v=0,b=0,m=t,x=e,_=1;_<=10;++_)v=m-(y=(f=(d=(c=1-(l=_/10))*c)*c)*t+3*d*l*i+3*c*(u=l*l)*n+(p=u*l)*h),b=x-(g=f*e+3*d*l*r+3*c*u*s+p*a),m=y,x=g,o+=Math.sqrt(v*v+b*b);return o},t.curveTo=function(e,i,r,n,s,h,a){var o=a[a.length-2],l=a[a.length-1];a.length-=2;var p=u._segmentsCount(t.curveLength(o,l,e,i,r,n,s,h)),c=0,d=0,f=0,y=0,g=0;a.push(o,l);for(var v=1,b=0;v<=p;++v)f=(d=(c=1-(b=v/p))*c)*c,g=(y=b*b)*b,a.push(f*o+3*d*b*e+3*c*y*r+g*s,f*l+3*d*b*i+3*c*y*n+g*h)},t}(),A=function(){function t(){}return t.curveLength=function(t,e,i,r,n,s){var h=t-2*i+n,a=e-2*r+s,o=2*i-2*t,l=2*r-2*e,u=4*(h*h+a*a),p=4*(h*o+a*l),c=o*o+l*l,d=2*Math.sqrt(u+p+c),f=Math.sqrt(u),y=2*u*f,g=2*Math.sqrt(c),v=p/f;return(y*d+f*p*(d-g)+(4*c*u-p*p)*Math.log((2*f+v+d)/(v+g)))/(4*y)},t.curveTo=function(e,i,r,n,s){for(var h=s[s.length-2],a=s[s.length-1],o=u._segmentsCount(t.curveLength(h,a,e,i,r,n)),l=0,p=0,c=1;c<=o;++c){var d=c/o;l=h+(e-h)*d,p=a+(i-a)*d,s.push(l+(e+(r-e)*d-l)*d,p+(i+(n-i)*d-p)*d)}},t}(),T=function(){function t(){this.reset()}return t.prototype.begin=function(t,e,i){this.reset(),this.style=t,this.start=e,this.attribStart=i},t.prototype.end=function(t,e){this.attribSize=e-this.attribStart,this.size=t-this.start},t.prototype.reset=function(){this.style=null,this.size=0,this.start=0,this.attribStart=0,this.attribSize=0},t}(),D=((w={})[h.SHAPES.POLY]=y,w[h.SHAPES.CIRC]=g,w[h.SHAPES.ELIP]=g,w[h.SHAPES.RECT]=v,w[h.SHAPES.RREC]=x,w),I=[],C=[],R=function(){function t(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=null),void 0===r&&(r=null),this.points=[],this.holes=[],this.shape=t,this.lineStyle=i,this.fillStyle=e,this.matrix=r,this.type=t.type}return t.prototype.clone=function(){return new t(this.shape,this.fillStyle,this.lineStyle,this.matrix)},t.prototype.destroy=function(){this.shape=null,this.holes.length=0,this.holes=null,this.points.length=0,this.points=null,this.lineStyle=null,this.fillStyle=null},t}(),L=new h.Point,B=new l.Bounds,N=function(t){function e(){var e=t.call(this)||this;return e.closePointEps=1e-4,e.boundsPadding=0,e.uvsFloat32=null,e.indicesUint16=null,e.batchable=!1,e.points=[],e.colors=[],e.uvs=[],e.indices=[],e.textureIds=[],e.graphicsData=[],e.drawCalls=[],e.batchDirty=-1,e.batches=[],e.dirty=0,e.cacheDirty=-1,e.clearDirty=0,e.shapeIndex=0,e._bounds=new l.Bounds,e.boundsDirty=-1,e}return d(e,t),Object.defineProperty(e.prototype,"bounds",{get:function(){return this.boundsDirty!==this.dirty&&(this.boundsDirty=this.dirty,this.calculateBounds()),this._bounds},enumerable:!1,configurable:!0}),e.prototype.invalidate=function(){this.boundsDirty=-1,this.dirty++,this.batchDirty++,this.shapeIndex=0,this.points.length=0,this.colors.length=0,this.uvs.length=0,this.indices.length=0,this.textureIds.length=0;for(var t=0;t<this.drawCalls.length;t++)this.drawCalls[t].texArray.clear(),C.push(this.drawCalls[t]);for(this.drawCalls.length=0,t=0;t<this.batches.length;t++){var e=this.batches[t];e.reset(),I.push(e)}this.batches.length=0},e.prototype.clear=function(){return this.graphicsData.length>0&&(this.invalidate(),this.clearDirty++,this.graphicsData.length=0),this},e.prototype.drawShape=function(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=null),void 0===r&&(r=null);var n=new R(t,e,i,r);return this.graphicsData.push(n),this.dirty++,this},e.prototype.drawHole=function(t,e){if(void 0===e&&(e=null),!this.graphicsData.length)return null;var i=new R(t,null,null,e),r=this.graphicsData[this.graphicsData.length-1];return i.lineStyle=r.lineStyle,r.holes.push(i),this.dirty++,this},e.prototype.destroy=function(){t.prototype.destroy.call(this);for(var e=0;e<this.graphicsData.length;++e)this.graphicsData[e].destroy();this.points.length=0,this.points=null,this.colors.length=0,this.colors=null,this.uvs.length=0,this.uvs=null,this.indices.length=0,this.indices=null,this.indexBuffer.destroy(),this.indexBuffer=null,this.graphicsData.length=0,this.graphicsData=null,this.drawCalls.length=0,this.drawCalls=null,this.batches.length=0,this.batches=null,this._bounds=null},e.prototype.containsPoint=function(t){for(var e=this.graphicsData,i=0;i<e.length;++i){var r=e[i];if(r.fillStyle.visible&&r.shape&&(r.matrix?r.matrix.applyInverse(t,L):L.copyFrom(t),r.shape.contains(L.x,L.y))){var n=!1;if(r.holes)for(var s=0;s<r.holes.length;s++)if(r.holes[s].shape.contains(L.x,L.y)){n=!0;break}if(!n)return!0}}return!1},e.prototype.updateBatches=function(t){if(this.graphicsData.length){if(this.validateBatching()){this.cacheDirty=this.dirty;var e=this.uvs,i=this.graphicsData,r=null,n=null;this.batches.length>0&&(n=(r=this.batches[this.batches.length-1]).style);for(var s=this.shapeIndex;s<i.length;s++){this.shapeIndex++;var h=i[s],a=h.fillStyle,l=h.lineStyle;D[h.type].build(h),h.matrix&&this.transformPoints(h.points,h.matrix),(a.visible||l.visible)&&this.processHoles(h.holes);for(var u=0;u<2;u++){var p=0===u?a:l;if(p.visible){var c=p.texture.baseTexture,d=this.indices.length,f=this.points.length/2;c.wrapMode=o.WRAP_MODES.REPEAT,0===u?this.processFill(h):this.processLine(h);var y=this.points.length/2-f;0!==y&&(r&&!this._compareStyles(n,p)&&(r.end(d,f),r=null),r||((r=I.pop()||new T).begin(p,d,f),this.batches.push(r),n=p),this.addUvs(this.points,e,p.texture,f,y,p.matrix))}}}var g=this.indices.length,v=this.points.length/2;if(r&&r.end(g,v),0!==this.batches.length){if(this.indicesUint16&&this.indices.length===this.indicesUint16.length)this.indicesUint16.set(this.indices);else{var b=v>65535&&t;this.indicesUint16=b?new Uint32Array(this.indices):new Uint16Array(this.indices)}this.batchable=this.isBatchable(),this.batchable?this.packBatches():this.buildDrawCalls()}else this.batchable=!0}}else this.batchable=!0},e.prototype._compareStyles=function(t,e){return!(!t||!e)&&t.texture.baseTexture===e.texture.baseTexture&&t.color+t.alpha===e.color+e.alpha&&!!t.native==!!e.native},e.prototype.validateBatching=function(){if(this.dirty===this.cacheDirty||!this.graphicsData.length)return!1;for(var t=0,e=this.graphicsData.length;t<e;t++){var i=this.graphicsData[t],r=i.fillStyle,n=i.lineStyle;if(r&&!r.texture.baseTexture.valid)return!1;if(n&&!n.texture.baseTexture.valid)return!1}return!0},e.prototype.packBatches=function(){this.batchDirty++,this.uvsFloat32=new Float32Array(this.uvs);for(var t=this.batches,e=0,i=t.length;e<i;e++)for(var r=t[e],n=0;n<r.size;n++){var s=r.start+n;this.indicesUint16[s]=this.indicesUint16[s]-r.attribStart}},e.prototype.isBatchable=function(){if(this.points.length>131070)return!1;for(var t=this.batches,i=0;i<t.length;i++)if(t[i].style.native)return!1;return this.points.length<2*e.BATCHABLE_SIZE},e.prototype.buildDrawCalls=function(){for(var t=++s.BaseTexture._globalBatch,e=0;e<this.drawCalls.length;e++)this.drawCalls[e].texArray.clear(),C.push(this.drawCalls[e]);this.drawCalls.length=0;var i=this.colors,r=this.textureIds,n=C.pop();n||((n=new s.BatchDrawCall).texArray=new s.BatchTextureArray),n.texArray.count=0,n.start=0,n.size=0,n.type=o.DRAW_MODES.TRIANGLES;var h=0,a=null,l=0,u=!1,p=o.DRAW_MODES.TRIANGLES,c=0;for(this.drawCalls.push(n),e=0;e<this.batches.length;e++){var d=this.batches[e],f=d.style,y=f.texture.baseTexture;u!==!!f.native&&(p=(u=!!f.native)?o.DRAW_MODES.LINES:o.DRAW_MODES.TRIANGLES,a=null,h=8,t++),a!==y&&(a=y,y._batchEnabled!==t&&(8===h&&(t++,h=0,n.size>0&&((n=C.pop())||((n=new s.BatchDrawCall).texArray=new s.BatchTextureArray),this.drawCalls.push(n)),n.start=c,n.size=0,n.texArray.count=0,n.type=p),y.touched=1,y._batchEnabled=t,y._batchLocation=h,y.wrapMode=o.WRAP_MODES.REPEAT,n.texArray.elements[n.texArray.count++]=y,h++)),n.size+=d.size,c+=d.size,l=y._batchLocation,this.addColors(i,f.color,f.alpha,d.attribSize,d.attribStart),this.addTextureIds(r,l,d.attribSize,d.attribStart)}s.BaseTexture._globalBatch=t,this.packAttributes()},e.prototype.packAttributes=function(){for(var t=this.points,e=this.uvs,i=this.colors,r=this.textureIds,n=new ArrayBuffer(3*t.length*4),s=new Float32Array(n),h=new Uint32Array(n),a=0,o=0;o<t.length/2;o++)s[a++]=t[2*o],s[a++]=t[2*o+1],s[a++]=e[2*o],s[a++]=e[2*o+1],h[a++]=i[o],s[a++]=r[o];this._buffer.update(n),this._indexBuffer.update(this.indicesUint16)},e.prototype.processFill=function(t){t.holes.length?y.triangulate(t,this):D[t.type].triangulate(t,this)},e.prototype.processLine=function(t){P(t,this);for(var e=0;e<t.holes.length;e++)P(t.holes[e],this)},e.prototype.processHoles=function(t){for(var e=0;e<t.length;e++){var i=t[e];D[i.type].build(i),i.matrix&&this.transformPoints(i.points,i.matrix)}},e.prototype.calculateBounds=function(){var t=this._bounds,e=B,i=h.Matrix.IDENTITY;this._bounds.clear(),e.clear();for(var r=0;r<this.graphicsData.length;r++){var n=this.graphicsData[r],s=n.shape,a=n.type,o=n.lineStyle,l=n.matrix||h.Matrix.IDENTITY,u=0;if(o&&o.visible&&(u=o.width,a!==h.SHAPES.POLY||n.fillStyle.visible?u*=Math.max(0,o.alignment):u*=Math.max(o.alignment,1-o.alignment)),i!==l&&(e.isEmpty()||(t.addBoundsMatrix(e,i),e.clear()),i=l),a===h.SHAPES.RECT||a===h.SHAPES.RREC){var p=s;e.addFramePad(p.x,p.y,p.x+p.width,p.y+p.height,u,u)}else if(a===h.SHAPES.CIRC){var c=s;e.addFramePad(c.x,c.y,c.x,c.y,c.radius+u,c.radius+u)}else if(a===h.SHAPES.ELIP){var d=s;e.addFramePad(d.x,d.y,d.x,d.y,d.width+u,d.height+u)}else{var f=s;t.addVerticesMatrix(i,f.points,0,f.points.length,u,u)}}e.isEmpty()||t.addBoundsMatrix(e,i),t.pad(this.boundsPadding,this.boundsPadding)},e.prototype.transformPoints=function(t,e){for(var i=0;i<t.length/2;i++){var r=t[2*i],n=t[2*i+1];t[2*i]=e.a*r+e.c*n+e.tx,t[2*i+1]=e.b*r+e.d*n+e.ty}},e.prototype.addColors=function(t,e,i,r,n){void 0===n&&(n=0);var s=(e>>16)+(65280&e)+((255&e)<<16),h=a.premultiplyTint(s,i);t.length=Math.max(t.length,n+r);for(var o=0;o<r;o++)t[n+o]=h},e.prototype.addTextureIds=function(t,e,i,r){void 0===r&&(r=0),t.length=Math.max(t.length,r+i);for(var n=0;n<i;n++)t[r+n]=e},e.prototype.addUvs=function(t,e,i,r,n,s){void 0===s&&(s=null);for(var h=0,a=e.length,o=i.frame;h<n;){var l=t[2*(r+h)],u=t[2*(r+h)+1];if(s){var p=s.a*l+s.c*u+s.tx;u=s.b*l+s.d*u+s.ty,l=p}h++,e.push(l/o.width,u/o.height)}var c=i.baseTexture;(o.width<c.width||o.height<c.height)&&this.adjustUvs(e,i,a,n)},e.prototype.adjustUvs=function(t,e,i,r){for(var n=e.baseTexture,s=1e-6,h=i+2*r,a=e.frame,o=a.width/n.width,l=a.height/n.height,u=a.x/a.width,p=a.y/a.height,c=Math.floor(t[i]+s),d=Math.floor(t[i+1]+s),f=i+2;f<h;f+=2)c=Math.min(c,Math.floor(t[f]+s)),d=Math.min(d,Math.floor(t[f+1]+s));for(u-=c,p-=d,f=i;f<h;f+=2)t[f]=(t[f]+u)*o,t[f+1]=(t[f+1]+p)*l},e.BATCHABLE_SIZE=100,e}(s.BatchGeometry),O=function(t){function i(){var i=null!==t&&t.apply(this,arguments)||this;return i.width=0,i.alignment=.5,i.native=!1,i.cap=e.LINE_CAP.BUTT,i.join=e.LINE_JOIN.MITER,i.miterLimit=10,i}return d(i,t),i.prototype.clone=function(){var t=new i;return t.color=this.color,t.alpha=this.alpha,t.texture=this.texture,t.matrix=this.matrix,t.visible=this.visible,t.width=this.width,t.alignment=this.alignment,t.native=this.native,t.cap=this.cap,t.join=this.join,t.miterLimit=this.miterLimit,t},i.prototype.reset=function(){t.prototype.reset.call(this),this.color=0,this.alignment=.5,this.width=0,this.native=!1},i}(p),U=new Float32Array(3),H={},j=function(t){function i(e){void 0===e&&(e=null);var i=t.call(this)||this;return i.shader=null,i.pluginName="batch",i.currentPath=null,i.batches=[],i.batchTint=-1,i.batchDirty=-1,i.vertexData=null,i._fillStyle=new p,i._lineStyle=new O,i._matrix=null,i._holeMode=!1,i.state=s.State.for2d(),i._geometry=e||new N,i._geometry.refCount++,i._transformID=-1,i.tint=16777215,i.blendMode=o.BLEND_MODES.NORMAL,i}return d(i,t),Object.defineProperty(i.prototype,"geometry",{get:function(){return this._geometry},enumerable:!1,configurable:!0}),i.prototype.clone=function(){return this.finishPoly(),new i(this._geometry)},Object.defineProperty(i.prototype,"blendMode",{get:function(){return this.state.blendMode},set:function(t){this.state.blendMode=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"tint",{get:function(){return this._tint},set:function(t){this._tint=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"fill",{get:function(){return this._fillStyle},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"line",{get:function(){return this._lineStyle},enumerable:!1,configurable:!0}),i.prototype.lineStyle=function(t,e,i,r,n){return void 0===t&&(t=null),void 0===e&&(e=0),void 0===i&&(i=1),void 0===r&&(r=.5),void 0===n&&(n=!1),"number"==typeof t&&(t={width:t,color:e,alpha:i,alignment:r,native:n}),this.lineTextureStyle(t)},i.prototype.lineTextureStyle=function(t){t=Object.assign({width:0,texture:s.Texture.WHITE,color:t&&t.texture?16777215:0,alpha:1,matrix:null,alignment:.5,native:!1,cap:e.LINE_CAP.BUTT,join:e.LINE_JOIN.MITER,miterLimit:10},t),this.currentPath&&this.startPoly();var i=t.width>0&&t.alpha>0;return i?(t.matrix&&(t.matrix=t.matrix.clone(),t.matrix.invert()),Object.assign(this._lineStyle,{visible:i},t)):this._lineStyle.reset(),this},i.prototype.startPoly=function(){if(this.currentPath){var t=this.currentPath.points,e=this.currentPath.points.length;e>2&&(this.drawShape(this.currentPath),this.currentPath=new h.Polygon,this.currentPath.closeStroke=!1,this.currentPath.points.push(t[e-2],t[e-1]))}else this.currentPath=new h.Polygon,this.currentPath.closeStroke=!1},i.prototype.finishPoly=function(){this.currentPath&&(this.currentPath.points.length>2?(this.drawShape(this.currentPath),this.currentPath=null):this.currentPath.points.length=0)},i.prototype.moveTo=function(t,e){return this.startPoly(),this.currentPath.points[0]=t,this.currentPath.points[1]=e,this},i.prototype.lineTo=function(t,e){this.currentPath||this.moveTo(0,0);var i=this.currentPath.points,r=i[i.length-2],n=i[i.length-1];return r===t&&n===e||i.push(t,e),this},i.prototype._initCurve=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.currentPath?0===this.currentPath.points.length&&(this.currentPath.points=[t,e]):this.moveTo(t,e)},i.prototype.quadraticCurveTo=function(t,e,i,r){this._initCurve();var n=this.currentPath.points;return 0===n.length&&this.moveTo(0,0),A.curveTo(t,e,i,r,n),this},i.prototype.bezierCurveTo=function(t,e,i,r,n,s){return this._initCurve(),E.curveTo(t,e,i,r,n,s,this.currentPath.points),this},i.prototype.arcTo=function(t,e,i,r,n){this._initCurve(t,e);var s=this.currentPath.points,h=M.curveTo(t,e,i,r,n,s);if(h){var a=h.cx,o=h.cy,l=h.radius,u=h.startAngle,p=h.endAngle,c=h.anticlockwise;this.arc(a,o,l,u,p,c)}return this},i.prototype.arc=function(t,e,i,r,n,s){if(void 0===s&&(s=!1),r===n)return this;if(!s&&n<=r?n+=h.PI_2:s&&r<=n&&(r+=h.PI_2),0==n-r)return this;var a=t+Math.cos(r)*i,o=e+Math.sin(r)*i,l=this._geometry.closePointEps,u=this.currentPath?this.currentPath.points:null;if(u){var p=Math.abs(u[u.length-2]-a),c=Math.abs(u[u.length-1]-o);p<l&&c<l||u.push(a,o)}else this.moveTo(a,o),u=this.currentPath.points;return M.arc(a,o,t,e,i,r,n,s,u),this},i.prototype.beginFill=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=1),this.beginTextureFill({texture:s.Texture.WHITE,color:t,alpha:e})},i.prototype.beginTextureFill=function(t){t=Object.assign({texture:s.Texture.WHITE,color:16777215,alpha:1,matrix:null},t),this.currentPath&&this.startPoly();var e=t.alpha>0;return e?(t.matrix&&(t.matrix=t.matrix.clone(),t.matrix.invert()),Object.assign(this._fillStyle,{visible:e},t)):this._fillStyle.reset(),this},i.prototype.endFill=function(){return this.finishPoly(),this._fillStyle.reset(),this},i.prototype.drawRect=function(t,e,i,r){return this.drawShape(new h.Rectangle(t,e,i,r))},i.prototype.drawRoundedRect=function(t,e,i,r,n){return this.drawShape(new h.RoundedRectangle(t,e,i,r,n))},i.prototype.drawCircle=function(t,e,i){return this.drawShape(new h.Circle(t,e,i))},i.prototype.drawEllipse=function(t,e,i,r){return this.drawShape(new h.Ellipse(t,e,i,r))},i.prototype.drawPolygon=function(){for(var t,e=arguments,i=[],r=0;r<arguments.length;r++)i[r]=e[r];var n=!0,s=i[0];s.points?(n=s.closeStroke,t=s.points):t=Array.isArray(i[0])?i[0]:i;var a=new h.Polygon(t);return a.closeStroke=n,this.drawShape(a),this},i.prototype.drawShape=function(t){return this._holeMode?this._geometry.drawHole(t,this._matrix):this._geometry.drawShape(t,this._fillStyle.clone(),this._lineStyle.clone(),this._matrix),this},i.prototype.clear=function(){return this._geometry.clear(),this._lineStyle.reset(),this._fillStyle.reset(),this._boundsID++,this._matrix=null,this._holeMode=!1,this.currentPath=null,this},i.prototype.isFastRect=function(){var t=this._geometry.graphicsData;return!(1!==t.length||t[0].shape.type!==h.SHAPES.RECT||t[0].matrix||t[0].holes.length||t[0].lineStyle.visible&&t[0].lineStyle.width)},i.prototype._render=function(t){this.finishPoly();var e=this._geometry,i=t.context.supports.uint32Indices;e.updateBatches(i),e.batchable?(this.batchDirty!==e.batchDirty&&this._populateBatches(),this._renderBatched(t)):(t.batch.flush(),this._renderDirect(t))},i.prototype._populateBatches=function(){var t=this._geometry,e=this.blendMode,i=t.batches.length;this.batchTint=-1,this._transformID=-1,this.batchDirty=t.batchDirty,this.batches.length=i,this.vertexData=new Float32Array(t.points);for(var r=0;r<i;r++){var n=t.batches[r],s=n.style.color,h=new Float32Array(this.vertexData.buffer,4*n.attribStart*2,2*n.attribSize),o=new Float32Array(t.uvsFloat32.buffer,4*n.attribStart*2,2*n.attribSize),l={vertexData:h,blendMode:e,indices:new Uint16Array(t.indicesUint16.buffer,2*n.start,n.size),uvs:o,_batchRGB:a.hex2rgb(s),_tintRGB:s,_texture:n.style.texture,alpha:n.style.alpha,worldAlpha:1};this.batches[r]=l}},i.prototype._renderBatched=function(t){if(this.batches.length){t.batch.setObjectRenderer(t.plugins[this.pluginName]),this.calculateVertices(),this.calculateTints();for(var e=0,i=this.batches.length;e<i;e++){var r=this.batches[e];r.worldAlpha=this.worldAlpha*r.alpha,t.plugins[this.pluginName].render(r)}}},i.prototype._renderDirect=function(t){var e=this._resolveDirectShader(t),i=this._geometry,r=this.tint,n=this.worldAlpha,s=e.uniforms,h=i.drawCalls;s.translationMatrix=this.transform.worldTransform,s.tint[0]=(r>>16&255)/255*n,s.tint[1]=(r>>8&255)/255*n,s.tint[2]=(255&r)/255*n,s.tint[3]=n,t.shader.bind(e),t.geometry.bind(i,e),t.state.set(this.state);for(var a=0,o=h.length;a<o;a++)this._renderDrawCallDirect(t,i.drawCalls[a])},i.prototype._renderDrawCallDirect=function(t,e){for(var i=e.texArray,r=e.type,n=e.size,s=e.start,h=i.count,a=0;a<h;a++)t.texture.bind(i.elements[a],a);t.geometry.draw(r,n,s)},i.prototype._resolveDirectShader=function(t){var e=this.shader,i=this.pluginName;if(!e){if(!H[i]){for(var r=t.plugins[i].MAX_TEXTURES,n=new Int32Array(r),a=0;a<r;a++)n[a]=a;var o={tint:new Float32Array([1,1,1,1]),translationMatrix:new h.Matrix,default:s.UniformGroup.from({uSamplers:n},!0)},l=t.plugins[i]._shader.program;H[i]=new s.Shader(l,o)}e=H[i]}return e},i.prototype._calculateBounds=function(){this.finishPoly();var t=this._geometry;if(t.graphicsData.length){var e=t.bounds,i=e.minX,r=e.minY,n=e.maxX,s=e.maxY;this._bounds.addFrame(this.transform,i,r,n,s)}},i.prototype.containsPoint=function(t){return this.worldTransform.applyInverse(t,i._TEMP_POINT),this._geometry.containsPoint(i._TEMP_POINT)},i.prototype.calculateTints=function(){if(this.batchTint!==this.tint){this.batchTint=this.tint;for(var t=a.hex2rgb(this.tint,U),e=0;e<this.batches.length;e++){var i=this.batches[e],r=i._batchRGB,n=(t[0]*r[0]*255<<16)+(t[1]*r[1]*255<<8)+(0|t[2]*r[2]*255);i._tintRGB=(n>>16)+(65280&n)+((255&n)<<16)}}},i.prototype.calculateVertices=function(){var t=this.transform._worldID;if(this._transformID!==t){this._transformID=t;for(var e=this.transform.worldTransform,i=e.a,r=e.b,n=e.c,s=e.d,h=e.tx,a=e.ty,o=this._geometry.points,l=this.vertexData,u=0,p=0;p<o.length;p+=2){var c=o[p],d=o[p+1];l[u++]=i*c+n*d+h,l[u++]=s*d+r*c+a}}},i.prototype.closePath=function(){var t=this.currentPath;return t&&(t.closeStroke=!0,this.finishPoly()),this},i.prototype.setMatrix=function(t){return this._matrix=t,this},i.prototype.beginHole=function(){return this.finishPoly(),this._holeMode=!0,this},i.prototype.endHole=function(){return this.finishPoly(),this._holeMode=!1,this},i.prototype.destroy=function(e){this._geometry.refCount--,0===this._geometry.refCount&&this._geometry.dispose(),this._matrix=null,this.currentPath=null,this._lineStyle.destroy(),this._lineStyle=null,this._fillStyle.destroy(),this._fillStyle=null,this._geometry=null,this.shader=null,this.vertexData=null,this.batches.length=0,this.batches=null,t.prototype.destroy.call(this,e)},i.nextRoundedRectBehavior=!1,i._TEMP_POINT=new h.Point,i}(l.Container),F={buildPoly:y,buildCircle:g,buildRectangle:v,buildRoundedRectangle:x,buildLine:P,ArcUtils:M,BezierUtils:E,QuadraticUtils:A,BatchPart:T,FILL_COMMANDS:D,BATCH_POOL:I,DRAW_CALL_POOL:C};e.FillStyle=p,e.GRAPHICS_CURVES=u,e.Graphics=j,e.GraphicsData=R,e.GraphicsGeometry=N,e.LineStyle=O,e.graphicsUtils=F}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,