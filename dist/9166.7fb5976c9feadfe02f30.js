/*! For license information please see 9166.7fb5976c9feadfe02f30.js.LICENSE.txt */
"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[9166],{9166:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n,r=i(1234),o=i(2514),s=i(19),a=i(932),h=i(8950),l=function(t,e){return l=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},l(t,e)};e.TEXT_GRADIENT=void 0,(n=e.TEXT_GRADIENT||(e.TEXT_GRADIENT={}))[n.LINEAR_VERTICAL=0]="LINEAR_VERTICAL",n[n.LINEAR_HORIZONTAL=1]="LINEAR_HORIZONTAL";var c={align:"left",breakWords:!1,dropShadow:!1,dropShadowAlpha:1,dropShadowAngle:Math.PI/6,dropShadowBlur:0,dropShadowColor:"black",dropShadowDistance:5,fill:"black",fillGradientType:e.TEXT_GRADIENT.LINEAR_VERTICAL,fillGradientStops:[],fontFamily:"Arial",fontSize:26,fontStyle:"normal",fontVariant:"normal",fontWeight:"normal",letterSpacing:0,lineHeight:0,lineJoin:"miter",miterLimit:10,padding:0,stroke:"black",strokeThickness:0,textBaseline:"alphabetic",trim:!1,whiteSpace:"pre",wordWrap:!1,wordWrapWidth:100,leading:0},u=["serif","sans-serif","monospace","cursive","fantasy","system-ui"],f=function(){function t(t){this.styleID=0,this.reset(),g(this,t,t)}return t.prototype.clone=function(){var e={};return g(e,this,c),new t(e)},t.prototype.reset=function(){g(this,c,c)},Object.defineProperty(t.prototype,"align",{get:function(){return this._align},set:function(t){this._align!==t&&(this._align=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"breakWords",{get:function(){return this._breakWords},set:function(t){this._breakWords!==t&&(this._breakWords=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dropShadow",{get:function(){return this._dropShadow},set:function(t){this._dropShadow!==t&&(this._dropShadow=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dropShadowAlpha",{get:function(){return this._dropShadowAlpha},set:function(t){this._dropShadowAlpha!==t&&(this._dropShadowAlpha=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dropShadowAngle",{get:function(){return this._dropShadowAngle},set:function(t){this._dropShadowAngle!==t&&(this._dropShadowAngle=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dropShadowBlur",{get:function(){return this._dropShadowBlur},set:function(t){this._dropShadowBlur!==t&&(this._dropShadowBlur=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dropShadowColor",{get:function(){return this._dropShadowColor},set:function(t){var e=d(t);this._dropShadowColor!==e&&(this._dropShadowColor=e,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"dropShadowDistance",{get:function(){return this._dropShadowDistance},set:function(t){this._dropShadowDistance!==t&&(this._dropShadowDistance=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fill",{get:function(){return this._fill},set:function(t){var e=d(t);this._fill!==e&&(this._fill=e,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fillGradientType",{get:function(){return this._fillGradientType},set:function(t){this._fillGradientType!==t&&(this._fillGradientType=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fillGradientStops",{get:function(){return this._fillGradientStops},set:function(t){(function(t,e){if(!Array.isArray(t)||!Array.isArray(e))return!1;if(t.length!==e.length)return!1;for(var i=0;i<t.length;++i)if(t[i]!==e[i])return!1;return!0})(this._fillGradientStops,t)||(this._fillGradientStops=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontFamily",{get:function(){return this._fontFamily},set:function(t){this.fontFamily!==t&&(this._fontFamily=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontSize",{get:function(){return this._fontSize},set:function(t){this._fontSize!==t&&(this._fontSize=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontStyle",{get:function(){return this._fontStyle},set:function(t){this._fontStyle!==t&&(this._fontStyle=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontVariant",{get:function(){return this._fontVariant},set:function(t){this._fontVariant!==t&&(this._fontVariant=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontWeight",{get:function(){return this._fontWeight},set:function(t){this._fontWeight!==t&&(this._fontWeight=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"letterSpacing",{get:function(){return this._letterSpacing},set:function(t){this._letterSpacing!==t&&(this._letterSpacing=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lineHeight",{get:function(){return this._lineHeight},set:function(t){this._lineHeight!==t&&(this._lineHeight=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"leading",{get:function(){return this._leading},set:function(t){this._leading!==t&&(this._leading=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"lineJoin",{get:function(){return this._lineJoin},set:function(t){this._lineJoin!==t&&(this._lineJoin=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"miterLimit",{get:function(){return this._miterLimit},set:function(t){this._miterLimit!==t&&(this._miterLimit=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"padding",{get:function(){return this._padding},set:function(t){this._padding!==t&&(this._padding=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stroke",{get:function(){return this._stroke},set:function(t){var e=d(t);this._stroke!==e&&(this._stroke=e,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeThickness",{get:function(){return this._strokeThickness},set:function(t){this._strokeThickness!==t&&(this._strokeThickness=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textBaseline",{get:function(){return this._textBaseline},set:function(t){this._textBaseline!==t&&(this._textBaseline=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"trim",{get:function(){return this._trim},set:function(t){this._trim!==t&&(this._trim=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"whiteSpace",{get:function(){return this._whiteSpace},set:function(t){this._whiteSpace!==t&&(this._whiteSpace=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"wordWrap",{get:function(){return this._wordWrap},set:function(t){this._wordWrap!==t&&(this._wordWrap=t,this.styleID++)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"wordWrapWidth",{get:function(){return this._wordWrapWidth},set:function(t){this._wordWrapWidth!==t&&(this._wordWrapWidth=t,this.styleID++)},enumerable:!1,configurable:!0}),t.prototype.toFontString=function(){var t="number"==typeof this.fontSize?this.fontSize+"px":this.fontSize,e=this.fontFamily;Array.isArray(this.fontFamily)||(e=this.fontFamily.split(","));for(var i=e.length-1;i>=0;i--){var n=e[i].trim();!/([\"\'])[^\'\"]+\1/.test(n)&&u.indexOf(n)<0&&(n='"'+n+'"'),e[i]=n}return this.fontStyle+" "+this.fontVariant+" "+this.fontWeight+" "+t+" "+e.join(",")},t}();function p(t){return"number"==typeof t?h.hex2string(t):("string"==typeof t&&0===t.indexOf("0x")&&(t=t.replace("0x","#")),t)}function d(t){if(Array.isArray(t)){for(var e=0;e<t.length;++e)t[e]=p(t[e]);return t}return p(t)}function g(t,e,i){for(var n in i)Array.isArray(e[n])?t[n]=e[n].slice():t[n]=e[n]}var y=function(){function t(t,e,i,n,r,o,s,a,h){this.text=t,this.style=e,this.width=i,this.height=n,this.lines=r,this.lineWidths=o,this.lineHeight=s,this.maxLineWidth=a,this.fontProperties=h}return t.measureText=function(e,i,n,r){void 0===r&&(r=t._canvas),n=null==n?i.wordWrap:n;var o=i.toFontString(),s=t.measureFont(o);0===s.fontSize&&(s.fontSize=i.fontSize,s.ascent=i.fontSize);var a=r.getContext("2d");a.font=o;for(var h=(n?t.wordWrap(e,i,r):e).split(/(?:\r\n|\r|\n)/),l=new Array(h.length),c=0,u=0;u<h.length;u++){var f=a.measureText(h[u]).width+(h[u].length-1)*i.letterSpacing;l[u]=f,c=Math.max(c,f)}var p=c+i.strokeThickness;i.dropShadow&&(p+=i.dropShadowDistance);var d=i.lineHeight||s.fontSize+i.strokeThickness,g=Math.max(d,s.fontSize+i.strokeThickness)+(h.length-1)*(d+i.leading);return i.dropShadow&&(g+=i.dropShadowDistance),new t(e,i,p,g,h,l,d+i.leading,c,s)},t.wordWrap=function(e,i,n){void 0===n&&(n=t._canvas);for(var r=n.getContext("2d"),o=0,s="",a="",h=Object.create(null),l=i.letterSpacing,c=i.whiteSpace,u=t.collapseSpaces(c),f=t.collapseNewlines(c),p=!u,d=i.wordWrapWidth+l,g=t.tokenize(e),y=0;y<g.length;y++){var _=g[y];if(t.isNewline(_)){if(!f){a+=t.addLine(s),p=!u,s="",o=0;continue}_=" "}if(u){var b=t.isBreakingSpace(_),S=t.isBreakingSpace(s[s.length-1]);if(b&&S)continue}var m=t.getFromCache(_,l,h,r);if(m>d)if(""!==s&&(a+=t.addLine(s),s="",o=0),t.canBreakWords(_,i.breakWords))for(var w=t.wordWrapSplit(_),v=0;v<w.length;v++){for(var x=w[v],T=1;w[v+T];){var I=w[v+T],k=x[x.length-1];if(t.canBreakChars(k,I,_,v,i.breakWords))break;x+=I,T++}v+=x.length-1;var O=t.getFromCache(x,l,h,r);O+o>d&&(a+=t.addLine(s),p=!1,s="",o=0),s+=x,o+=O}else{s.length>0&&(a+=t.addLine(s),s="",o=0);var L=y===g.length-1;a+=t.addLine(_,!L),p=!1,s="",o=0}else m+o>d&&(p=!1,a+=t.addLine(s),s="",o=0),(s.length>0||!t.isBreakingSpace(_)||p)&&(s+=_,o+=m)}return a+t.addLine(s,!1)},t.addLine=function(e,i){return void 0===i&&(i=!0),e=t.trimRight(e),i?e+"\n":e},t.getFromCache=function(t,e,i,n){var r=i[t];if("number"!=typeof r){var o=t.length*e;r=n.measureText(t).width+o,i[t]=r}return r},t.collapseSpaces=function(t){return"normal"===t||"pre-line"===t},t.collapseNewlines=function(t){return"normal"===t},t.trimRight=function(e){if("string"!=typeof e)return"";for(var i=e.length-1;i>=0;i--){var n=e[i];if(!t.isBreakingSpace(n))break;e=e.slice(0,-1)}return e},t.isNewline=function(e){return"string"==typeof e&&t._newlines.indexOf(e.charCodeAt(0))>=0},t.isBreakingSpace=function(e,i){return"string"==typeof e&&t._breakingSpaces.indexOf(e.charCodeAt(0))>=0},t.tokenize=function(e){var i=[],n="";if("string"!=typeof e)return i;for(var r=0;r<e.length;r++){var o=e[r],s=e[r+1];t.isBreakingSpace(o,s)||t.isNewline(o)?(""!==n&&(i.push(n),n=""),i.push(o)):n+=o}return""!==n&&i.push(n),i},t.canBreakWords=function(t,e){return e},t.canBreakChars=function(t,e,i,n,r){return!0},t.wordWrapSplit=function(t){return t.split("")},t.measureFont=function(e){if(t._fonts[e])return t._fonts[e];var i={ascent:0,descent:0,fontSize:0},n=t._canvas,r=t._context;r.font=e;var o=t.METRICS_STRING+t.BASELINE_SYMBOL,s=Math.ceil(r.measureText(o).width),a=Math.ceil(r.measureText(t.BASELINE_SYMBOL).width),h=Math.ceil(t.HEIGHT_MULTIPLIER*a);a=a*t.BASELINE_MULTIPLIER|0,n.width=s,n.height=h,r.fillStyle="#f00",r.fillRect(0,0,s,h),r.font=e,r.textBaseline="alphabetic",r.fillStyle="#000",r.fillText(o,0,a);var l=r.getImageData(0,0,s,h).data,c=l.length,u=4*s,f=0,p=0,d=!1;for(f=0;f<a;++f){for(var g=0;g<u;g+=4)if(255!==l[p+g]){d=!0;break}if(d)break;p+=u}for(i.ascent=a-f,p=c-u,d=!1,f=h;f>a;--f){for(g=0;g<u;g+=4)if(255!==l[p+g]){d=!0;break}if(d)break;p-=u}return i.descent=f-a,i.fontSize=i.ascent+i.descent,t._fonts[e]=i,i},t.clearMetrics=function(e){void 0===e&&(e=""),e?delete t._fonts[e]:t._fonts={}},Object.defineProperty(t,"_canvas",{get:function(){if(!t.__canvas){var e=void 0;try{var i=new OffscreenCanvas(0,0),n=i.getContext("2d");if(n&&n.measureText)return t.__canvas=i,i;e=document.createElement("canvas")}catch(t){e=document.createElement("canvas")}e.width=e.height=10,t.__canvas=e}return t.__canvas},enumerable:!1,configurable:!0}),Object.defineProperty(t,"_context",{get:function(){return t.__context||(t.__context=t._canvas.getContext("2d")),t.__context},enumerable:!1,configurable:!0}),t}();y._fonts={},y.METRICS_STRING="|ÉqÅ",y.BASELINE_SYMBOL="M",y.BASELINE_MULTIPLIER=1.4,y.HEIGHT_MULTIPLIER=2,y._newlines=[10,13],y._breakingSpaces=[9,32,8192,8193,8194,8195,8196,8197,8198,8200,8201,8202,8287,12288];var _={texture:!0,children:!1,baseTexture:!0},b=function(t){function i(e,i,n){var r=this,h=!1;n||(n=document.createElement("canvas"),h=!0),n.width=3,n.height=3;var l=o.Texture.from(n);return l.orig=new a.Rectangle,l.trim=new a.Rectangle,(r=t.call(this,l)||this)._ownCanvas=h,r.canvas=n,r.context=r.canvas.getContext("2d"),r._resolution=s.settings.RESOLUTION,r._autoResolution=!0,r._text=null,r._style=null,r._styleListener=null,r._font="",r.text=e,r.style=i,r.localStyleID=-1,r}return function(t,e){function i(){this.constructor=t}l(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}(i,t),i.prototype.updateText=function(t){var e=this._style;if(this.localStyleID!==e.styleID&&(this.dirty=!0,this.localStyleID=e.styleID),this.dirty||!t){this._font=this._style.toFontString();var n,r,o=this.context,s=y.measureText(this._text||" ",this._style,this._style.wordWrap,this.canvas),a=s.width,l=s.height,c=s.lines,u=s.lineHeight,f=s.lineWidths,p=s.maxLineWidth,d=s.fontProperties;this.canvas.width=Math.ceil(Math.ceil(Math.max(1,a)+2*e.padding)*this._resolution),this.canvas.height=Math.ceil(Math.ceil(Math.max(1,l)+2*e.padding)*this._resolution),o.scale(this._resolution,this._resolution),o.clearRect(0,0,this.canvas.width,this.canvas.height),o.font=this._font,o.lineWidth=e.strokeThickness,o.textBaseline=e.textBaseline,o.lineJoin=e.lineJoin,o.miterLimit=e.miterLimit;for(var g=e.dropShadow?2:1,_=0;_<g;++_){var b=e.dropShadow&&0===_,S=b?Math.ceil(Math.max(1,l)+2*e.padding):0,m=S*this._resolution;if(b){o.fillStyle="black",o.strokeStyle="black";var w=e.dropShadowColor,v=h.hex2rgb("number"==typeof w?w:h.string2hex(w)),x=e.dropShadowBlur*this._resolution,T=e.dropShadowDistance*this._resolution;o.shadowColor="rgba("+255*v[0]+","+255*v[1]+","+255*v[2]+","+e.dropShadowAlpha+")",o.shadowBlur=x,o.shadowOffsetX=Math.cos(e.dropShadowAngle)*T,o.shadowOffsetY=Math.sin(e.dropShadowAngle)*T+m}else o.fillStyle=this._generateFillStyle(e,c,s),o.strokeStyle=e.stroke,o.shadowColor="black",o.shadowBlur=0,o.shadowOffsetX=0,o.shadowOffsetY=0;var I=(u-d.fontSize)/2;(!i.nextLineHeightBehavior||u-d.fontSize<0)&&(I=0);for(var k=0;k<c.length;k++)n=e.strokeThickness/2,r=e.strokeThickness/2+k*u+d.ascent+I,"right"===e.align?n+=p-f[k]:"center"===e.align&&(n+=(p-f[k])/2),e.stroke&&e.strokeThickness&&this.drawLetterSpacing(c[k],n+e.padding,r+e.padding-S,!0),e.fill&&this.drawLetterSpacing(c[k],n+e.padding,r+e.padding-S)}this.updateTexture()}},i.prototype.drawLetterSpacing=function(t,e,n,r){void 0===r&&(r=!1);var o=this._style.letterSpacing,s=i.experimentalLetterSpacing&&("letterSpacing"in CanvasRenderingContext2D.prototype||"textLetterSpacing"in CanvasRenderingContext2D.prototype);if(0===o||s)return s&&(this.context.letterSpacing=o,this.context.textLetterSpacing=o),void(r?this.context.strokeText(t,e,n):this.context.fillText(t,e,n));for(var a=e,h=Array.from?Array.from(t):t.split(""),l=this.context.measureText(t).width,c=0,u=0;u<h.length;++u){var f=h[u];r?this.context.strokeText(f,a,n):this.context.fillText(f,a,n);for(var p="",d=u+1;d<h.length;++d)p+=h[d];a+=l-(c=this.context.measureText(p).width)+o,l=c}},i.prototype.updateTexture=function(){var t=this.canvas;if(this._style.trim){var e=h.trimCanvas(t);e.data&&(t.width=e.width,t.height=e.height,this.context.putImageData(e.data,0,0))}var i=this._texture,n=this._style,r=n.trim?0:n.padding,o=i.baseTexture;i.trim.width=i._frame.width=t.width/this._resolution,i.trim.height=i._frame.height=t.height/this._resolution,i.trim.x=-r,i.trim.y=-r,i.orig.width=i._frame.width-2*r,i.orig.height=i._frame.height-2*r,this._onTextureUpdate(),o.setRealSize(t.width,t.height,this._resolution),i.updateUvs(),this.dirty=!1},i.prototype._render=function(e){this._autoResolution&&this._resolution!==e.resolution&&(this._resolution=e.resolution,this.dirty=!0),this.updateText(!0),t.prototype._render.call(this,e)},i.prototype.updateTransform=function(){this.updateText(!0),t.prototype.updateTransform.call(this)},i.prototype.getBounds=function(e,i){return this.updateText(!0),-1===this._textureID&&(e=!1),t.prototype.getBounds.call(this,e,i)},i.prototype.getLocalBounds=function(e){return this.updateText(!0),t.prototype.getLocalBounds.call(this,e)},i.prototype._calculateBounds=function(){this.calculateVertices(),this._bounds.addQuad(this.vertexData)},i.prototype._generateFillStyle=function(t,i,n){var r,o=t.fill;if(!Array.isArray(o))return o;if(1===o.length)return o[0];var s=t.dropShadow?t.dropShadowDistance:0,a=t.padding||0,h=this.canvas.width/this._resolution-s-2*a,l=this.canvas.height/this._resolution-s-2*a,c=o.slice(),u=t.fillGradientStops.slice();if(!u.length)for(var f=c.length+1,p=1;p<f;++p)u.push(p/f);if(c.unshift(o[0]),u.unshift(0),c.push(o[o.length-1]),u.push(1),t.fillGradientType===e.TEXT_GRADIENT.LINEAR_VERTICAL){r=this.context.createLinearGradient(h/2,a,h/2,l+a);var d=n.fontProperties.fontSize+t.strokeThickness;for(p=0;p<i.length;p++){var g=n.lineHeight*(p-1)+d,y=n.lineHeight*p,_=y;p>0&&g>y&&(_=(y+g)/2);var b=y+d,S=n.lineHeight*(p+1),m=b;p+1<i.length&&S<b&&(m=(b+S)/2);for(var w=(m-_)/l,v=0;v<c.length;v++){var x;x="number"==typeof u[v]?u[v]:v/c.length;var T=Math.min(1,Math.max(0,_/l+x*w));T=Number(T.toFixed(5)),r.addColorStop(T,c[v])}}}else{r=this.context.createLinearGradient(a,l/2,h+a,l/2);var I=c.length+1,k=1;for(p=0;p<c.length;p++){var O;O="number"==typeof u[p]?u[p]:k/I,r.addColorStop(O,c[p]),k++}}return r},i.prototype.destroy=function(e){"boolean"==typeof e&&(e={children:e}),e=Object.assign({},_,e),t.prototype.destroy.call(this,e),this._ownCanvas&&(this.canvas.height=this.canvas.width=0),this.context=null,this.canvas=null,this._style=null},Object.defineProperty(i.prototype,"width",{get:function(){return this.updateText(!0),Math.abs(this.scale.x)*this._texture.orig.width},set:function(t){this.updateText(!0);var e=h.sign(this.scale.x)||1;this.scale.x=e*t/this._texture.orig.width,this._width=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"height",{get:function(){return this.updateText(!0),Math.abs(this.scale.y)*this._texture.orig.height},set:function(t){this.updateText(!0);var e=h.sign(this.scale.y)||1;this.scale.y=e*t/this._texture.orig.height,this._height=t},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"style",{get:function(){return this._style},set:function(t){t=t||{},this._style=t instanceof f?t:new f(t),this.localStyleID=-1,this.dirty=!0},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"text",{get:function(){return this._text},set:function(t){t=String(null==t?"":t),this._text!==t&&(this._text=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(i.prototype,"resolution",{get:function(){return this._resolution},set:function(t){this._autoResolution=!1,this._resolution!==t&&(this._resolution=t,this.dirty=!0)},enumerable:!1,configurable:!0}),i.nextLineHeightBehavior=!1,i.experimentalLetterSpacing=!1,i}(r.Sprite);e.Text=b,e.TextMetrics=y,e.TextStyle=f}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,