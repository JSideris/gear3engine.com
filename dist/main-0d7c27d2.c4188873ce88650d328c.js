"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[6290],{7566:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(){this.dependencies=[]}setup(e){if(this.gameInstance)throw new Error("The setup function was already called for this plugin.");this.gameInstance=e;for(let e in this.dependencies){let t=this.dependencies[e];if(!this.gameInstance.getPlugin(t))throw new Error(`A plugin was initialized without the required dependencies. '${t.name}' is marked as a dependency that has not be fulfilled. Ensure that plugins are registered in the correct order.`)}this.initialize()}}},1985:function(e,t,i){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(i(6782)),a=r(i(7187)),n=r(i(943)),d=r(i(6690)),h=r(i(8989));t.default=class{get fixedUpdateInProgress(){return this._fixedUpdateInProgress}get isMaster(){return this.instanceParameters?.isMaster??!0}constructor(e){this.enableEventTracing=!1,this._fixedUpdateInProgress=!1,this.gameMode=null,this.gameEnded=!1,this._gameObjectFactory=new d.default(this),this.allGameObjectsById={},this.remoteGameObjectsById={},this.beforeFixedUpdateGameObjects={},this.fixedUpdateGameObjects={},this.afterFixedUpdateGameObjects={},this.teams={},this.controllers={},this.totalAiPlayers=0,this.totalAiEntities=0,this.totalUsers=0,this.lastUpdateTime=performance.now()/1e3,this.chunkManager=new s.default,this._events={},this.plugins=[],this.nextRemoteTriggerId=1,this._remoteTriggersById={},this._remoteTriggersByName={},this.instanceParameters=e||{},this.on("registerObject",(e=>{this._gameObjectFactory.register(e)})),this.on("addObject",(e=>{e.beforeFixedUpdate&&(this.beforeFixedUpdateGameObjects[e.id]=e),e.fixedUpdate&&(this.fixedUpdateGameObjects[e.id]=e),e.afterFixedUpdate&&(this.afterFixedUpdateGameObjects[e.id]=e),e instanceof a.default&&(this.controllers[e.id]=e)})),this.on("removeObject",(e=>{e.beforeFixedUpdate&&delete this.beforeFixedUpdateGameObjects[e.id],e.fixedUpdate&&delete this.fixedUpdateGameObjects[e.id],e.afterFixedUpdate&&delete this.afterFixedUpdateGameObjects[e.id],e instanceof a.default&&delete this.controllers[e.id]})),this.on("beforeFixedUpdate",((e,t)=>{this._fixedUpdateInProgress=!0,this.lastUpdateTime=performance.now()/1e3;for(let i in this.beforeFixedUpdateGameObjects){let r=this.beforeFixedUpdateGameObjects[i];try{r.beforeFixedUpdate(e,t)}catch(e){console.error(e,r)}}})),this.on("fixedUpdate",((e,t)=>{for(let i in this.fixedUpdateGameObjects){let r=this.fixedUpdateGameObjects[i];try{r.fixedUpdate(e,t)}catch(e){console.error(e,r)}}})),this.on("afterFixedUpdate",((e,t)=>{for(let i in this.afterFixedUpdateGameObjects){let r=this.afterFixedUpdateGameObjects[i];try{r.afterFixedUpdate(e,t)}catch(e){console.error(e,r)}}this._fixedUpdateInProgress=!1,this._gameObjectFactory.flushDestructionQueue()})),this.on("remoteTrigger",(e=>{e.comProfile.addAction(null,e.trigger.id,e.args)})),this.registerRemoteTrigger("setRobot"),this.registerRemoteTrigger("trackObject"),this._fixedTimer=this.make(n.default,(t=>{t.triggerGameInstanceEvents=!0,t.targetFramePeriod=1/(e?.targetFps||60)}))}on(e,t){this._events[e]||(this._events[e]=[]),this._events[e].push(t)}off(e,t){this._events[e]=this._events[e].filter((e=>e!=t)),this.trigger("renderUpdate",2,2,2)}trigger(e,...t){if(this.enableEventTracing&&console.log(`ðŸ”ƒ ${e}(${t}) => ${this._events[e]?.length??0}`),this._events[e])for(let i of this._events[e])i.call(this,...t)}play(){this._gameObjectFactory._playing=!0,this.gameMode?.initialize(),this._fixedTimer.start(),this.trigger("gameStart")}gameOver(e){this.trigger("gameOver");for(let e in this.allGameObjectsById)this._gameObjectFactory.destroy(this.allGameObjectsById[e],h.default.GameOver);this.gameEnded=!0,this._fixedTimer.pause(),this._fixedTimer=null,this._gameObjectFactory._playing=!1}idIsTaken(e){return!!this.allGameObjectsById[e]}make(e,t){return this._gameObjectFactory.make(e,t)}makeOnMaster(e,t){return this.isMaster?this._gameObjectFactory.make(e,t):null}destroyObjectOnMaster(e,t){this.isMaster&&this._gameObjectFactory.destroy(e,t)}destroyObject(e,t){this._gameObjectFactory.destroy(e,t)}usePlugin(e){return this.plugins.push(e),e.setup(this),e}getPlugin(e){for(let t in this.plugins){let i=this.plugins[t];if(i instanceof e)return i}throw new Error(`Attempted to read from the '${e.name}' plugin, which hasn't been setup. You may have forgot to install a dependency.`)}registerRemoteTrigger(e,...t){if(this._remoteTriggersByName[e])throw new Error(`A remote trigger with the name ${e} has already been defined.`);this._remoteTriggersById[this.nextRemoteTriggerId]=this._remoteTriggersByName[e]={handlers:null,argTypes:t,id:this.nextRemoteTriggerId++}}registerRemoteTriggerHandler(e,t){if(!this._remoteTriggersByName[e])throw new Error(`A remote trigger with the name ${e} has not been defined.`);this._remoteTriggersByName[e].handlers||(this._remoteTriggersByName[e].handlers=[]),this._remoteTriggersByName[e].handlers.push(t)}_invokeRemoteTrigger(e,t,...i){if(!this._remoteTriggersByName[e])throw new Error(`A remote trigger with the name ${e} has not been defined.`);let r={trigger:this._remoteTriggersByName[e],args:i,comProfile:t};this.trigger("remoteTrigger",r)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,