"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[1912],{7010:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=new TextEncoder;e.default=class{constructor(t=64){this.segments=[],this.payloadLengthSegments=0,this.cursor=0,this.lastInstructionLength=0,this.instructionInProgress=!1,this.currentInstructionCode=0,this.bufferSize=t,this.appendByteArray()}appendByteArray(){this.segments.push(new Uint8Array(this.bufferSize))}startCreate(t,e){this.startInstruction(1,t);let s=(65280&e)>>8,i=255&e;return this.writeByte(s),this.writeByte(i),this}startUpdate(t){return this.startInstruction(2,t),this}startDelete(t){return this.startInstruction(3,t),this}startAction(t,e){this.startInstruction(4,t??0),this.writeByte(255&e)}startInstruction(t,e){if(this.instructionInProgress)throw"Instruction in progress.";this.lastInstructionLength=0;let s=255&t;this.currentInstructionCode=s;let i=(65280&e)>>8,r=255&e;this.writeByte(s),this.writeByte(i),this.writeByte(r),this.instructionInProgress=!0}completeInstruction(){if(!this.instructionInProgress)throw"Instruction not in progress (completing instruction).";this.writeByte(0),this.instructionInProgress=!1}writeValue(t,e,s=!1){if(!this.instructionInProgress)throw"Instruction not in progress (writing value).";if(this.lastInstructionLength++,this.lastInstructionLength>=4096)throw"Update is too long.";switch(this.writeByte(e),typeof t){case"number":this.writeInt(t,s);break;case"boolean":this.writeBoolean(t);break;case"string":this.writeString(t);break;default:throw new Error(`${t} does not have a supported data type.`)}}writeArray(t,e){if(!this.instructionInProgress)throw"Instruction not in progress (writting array).";if(this.lastInstructionLength++,this.lastInstructionLength>=4096)throw"Update is too long.";if(this.writeByte(t),this.writeByte(e.length>>8),this.writeByte(255&e.length),e.length>0)switch(typeof e[0]){case"number":for(let t of e)this.writeInt(t,!1);break;case"string":for(let t of e)this.writeString(t);break;case"boolean":for(let t of e)this.writeBoolean(t)}}writeInt(t,e){let s=0;if(isNaN(t)&&(t=0),t<0&&(s|=64),t==1/0||t==-1/0)return s|=143,void this.writeByte(s);e&&(s|=128),(t=Math.abs(t))<16?(s|=t,this.writeByte(s)):t<4096?(s|=16|t>>8&15,this.writeByte(s),this.writeByte(255&t)):t<268435456?(s|=32|t>>24&15,this.writeByte(s),this.writeByte(t>>16&255),this.writeByte(t>>8&255),this.writeByte(255&t)):(s|=48|t>>56&15,this.writeByte(s),this.writeByte(t>>48&255),this.writeByte(t>>40&255),this.writeByte(t>>32&255),this.writeByte(t>>24&255),this.writeByte(t>>16&255),this.writeByte(t>>8&255),this.writeByte(255&t))}writeString(t){let e=s.encode(t);this.writeByte(e.length>>8&&255),this.writeByte(e.length>>0&&255);for(let t=0;t<e.length;t++)this.writeByte(e[t])}writeBoolean(t){this.writeInt(t?1:0,!1)}writeByte(t,e){if(e)return e.s[e.c]=t,e.v=t,e;{(this.cursor>=this.bufferSize||0==this.payloadLengthSegments)&&(this.payloadLengthSegments++,this.cursor=0),this.payloadLengthSegments>this.segments.length&&this.segments.push(new Uint8Array(this.bufferSize));let e=this.segments[this.payloadLengthSegments-1];return e[this.cursor]=t,this.cursor++,{c:this.cursor-1,s:e,v:t}}}prepare(){if(this.sending)throw"Can't send a message that's already being sent.";if(this.instructionInProgress)throw"Instruction in progress.";this.sending=!0;let t=[];if(this.payloadLengthSegments){this.writeByte(0),t=this.segments.slice(0,this.payloadLengthSegments);let e=this.segments.slice(this.payloadLengthSegments,this.segments.length);this.segments=[...e,...t]}return this.reset(),t}reset(){this.sending=!1,this.payloadLengthSegments=0,this.cursor=0,this.lastInstructionLength=0,this.currentInstructionCode=0}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,