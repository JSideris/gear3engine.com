"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[9115],{3208:function(t,e,i){var s=this&&this.__decorate||function(t,e,i,s){var r,a=arguments.length,o=a<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var h=t.length-1;h>=0;h--)(r=t[h])&&(o=(a<3?r(o):a>3?r(e,i,o):r(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const o=i(5412),h=i(7203),n=i(8521),l=a(i(9493));let d=class extends o.GameObject{constructor(){super(),this.chunks={},this.canvasPlugin=this.gi.getPlugin(h.Canvas2dPlugin),this.isInitialized=!1,this.leftSoftCursor=0,this.rightSoftCursor=0,this.topSoftCursor=0,this.bottomSoftCursor=0,this.farLeftCursor=0,this.farRightCursor=0,this.farTopCursor=0,this.farBottomCursor=0,this.optimization=this.optimization??"culling",this.chunkSize=this.chunkSize??1024,this.parallaxScale=this.parallaxScale??1,this.canvasPlugin.backdrops[this.id]=this,this.hybridRange=this.hybridRange||8,this.displayObject=new l.default.Container}loadChunk(t,e){if(this.chunks[t]||(this.chunks[t]={}),this.chunks[t][e])this.chunks[t][e].displayObject.visible=!0;else{this.chunks[t][e]={displayObject:null,props:[]};let i=this.renderChunk(t,e);i?(this.chunks[t][e].displayObject=i,i.position.set(t*this.chunkSize,e*this.chunkSize),this.displayObject.addChild(i)):delete this.chunks[t][e]}}hideChunk(t,e){let i=this.chunks[t];if(!i)return;let s=i[e];if(s)if(s.displayObject){s.displayObject.visible=!1;for(let t of s.props);}else console.log("Loaded chunk with no DP?",s)}deleteChunk(t,e){let i=this.chunks[t];if(!i)return;let s=i[e];if(s){this.displayObject.removeChild(s.displayObject);for(let t of s.props)this.gi.destroyObject(t,o.DeathType.Unloaded);delete this.chunks[t][e]}}destroy(t){super.destroy(t),delete this.canvasPlugin.backdrops[this.id]}updateCursors(t,e,i,s){if(this.isInitialized||(this.leftSoftCursor=i,this.rightSoftCursor=s,this.topSoftCursor=t,this.bottomSoftCursor=t-1,this.isInitialized=!0),"none"!=this.optimization){for(let t=this.leftSoftCursor;t<i;t++)for(let e=this.topSoftCursor;e<=this.bottomSoftCursor;e++)this.onOutOfRange(t,e);for(let t=this.rightSoftCursor;t>s;t--)for(let e=this.topSoftCursor;e<=this.bottomSoftCursor;e++)this.onOutOfRange(t,e);for(let e=this.topSoftCursor;e<t;e++)for(let t=this.leftSoftCursor;t<=this.rightSoftCursor;t++)this.onOutOfRange(t,e);for(let t=this.bottomSoftCursor;t>e;t--)for(let e=this.leftSoftCursor;e<=this.rightSoftCursor;e++)this.onOutOfRange(e,t)}if("hybrid"==this.optimization){for(let t=this.farLeftCursor;t<i-this.hybridRange;t++)for(let e=this.farTopCursor;e<=this.farBottomCursor;e++)this.deleteChunk(t,e);for(let t=this.farRightCursor;t>s+this.hybridRange;t--)for(let e=this.farTopCursor;e<=this.farBottomCursor;e++)this.deleteChunk(t,e);for(let e=this.farTopCursor;e<t-this.hybridRange;e++)for(let t=this.farLeftCursor;t<=this.farRightCursor;t++)this.deleteChunk(t,e);for(let t=this.farBottomCursor;t>e+this.hybridRange;t--)for(let e=this.farLeftCursor;e<=this.farRightCursor;e++)this.deleteChunk(e,t)}for(let s=this.leftSoftCursor;s>i;s--)for(let i=t;i<=e;i++)this.loadChunk(s-1,i);for(let i=this.rightSoftCursor;i<s;i++)for(let s=t;s<=e;s++)this.loadChunk(i+1,s);for(let e=this.topSoftCursor;e>t;e--)for(let t=i;t<=s;t++)this.loadChunk(t,e-1);for(let t=this.bottomSoftCursor;t<e;t++)for(let e=i;e<=s;e++)this.loadChunk(e,t+1);this.topSoftCursor=t,this.bottomSoftCursor=e,this.leftSoftCursor=i,this.rightSoftCursor=s,this.farLeftCursor=i-this.hybridRange,this.farRightCursor=s+this.hybridRange,this.farTopCursor=t-this.hybridRange,this.farBottomCursor=e+this.hybridRange}hideAll(){if(this.isInitialized){this.isInitialized=!1;for(let t=this.leftSoftCursor;t<=this.rightSoftCursor;t++)for(let e=this.topSoftCursor;e<=this.bottomSoftCursor;e++)this.onOutOfRange(t,e)}}onOutOfRange(t,e){switch(this.optimization){case"culling":case"hybrid":this.hideChunk(t,e);break;case"unloading":this.deleteChunk(t,e)}}addProp(t,e,i){this.chunks[t][e].props.push(i)}};d=s([n.drawable2d,r("design:paramtypes",[])],d),e.default=d},8616:function(t,e,i){var s=this&&this.__decorate||function(t,e,i,s){var r,a=arguments.length,o=a<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var h=t.length-1;h>=0;h--)(r=t[h])&&(o=(a<3?r(o):a>3?r(e,i,o):r(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});const a=i(5412),o=i(8521);let h=class extends a.GameObject{constructor(){super(),this.#t=0,this.#e=0,this.shakeVectorM=new a.Vector3,this.debugScale=1,this.lastScale=1,this.lastPointerScreenPosition=new a.Vector3,this.viewWidthM=this.viewWidthM??80,this.viewHeightM=this.viewHeightM??45,this.disableDrawUpdate=!0,this.resize()}#t;#e;shake(t){this.#e+=t}resize(){this.widthPx=window.innerWidth,this.heightPx=window.innerHeight}drawUpdate(t,e,i){(this.#e>0||this.#t>0||this.shakeVectorM.x||this.shakeVectorM.y)&&(this.#t+=.2*(this.#e-this.#t),this.#e*=.9,this.#t<.1&&(this.#t=0),this.#e<.1&&(this.#e=0),this.shakeVectorM.x+=(Math.random()-.5)*this.#t,this.shakeVectorM.y+=(Math.random()-.5)*this.#t,this.shakeVectorM.x*=.9,this.shakeVectorM.y*=.9,this.#t||this.#e||(Math.abs(this.shakeVectorM.x)<.1&&(this.shakeVectorM.x=0),Math.abs(this.shakeVectorM.y)<.1&&(this.shakeVectorM.y=0))),this.targetObject?(this.targetObject.drawPosition.subtract(this.drawPosition),this.drawPosition.setToVector(this.targetObject.drawPosition.add(this.shakeVectorM)),this.drawVelocity.setToVector(this.targetObject.drawVelocity)):this.drawPosition.setToVector(this.drawPosition.add(this.shakeVectorM));let s=a.Util.mToP(this.viewHeightM),r=a.Util.mToP(this.viewWidthM),o=1;o=this.viewHeightM/this.viewWidthM>this.heightPx/this.widthPx?this.heightPx/s:this.widthPx/r,this.lastScale=o*this.debugScale,this.pixiWorld.pixiView.scale.set(this.lastScale,this.lastScale),this.pixiWorld.pixiView.x=-this.drawPosition.x*this.lastScale+this.widthPx/2,this.pixiWorld.pixiView.y=-this.drawPosition.y*this.lastScale+this.heightPx/2;for(let t in this.canvas2dPlugin.backdrops){let e=this.canvas2dPlugin.backdrops[t],i=Math.floor((this.drawPosition.x*e.parallaxScale-r/2)/e.chunkSize)-1,o=Math.floor((this.drawPosition.x*e.parallaxScale+r/2)/e.chunkSize)+1,h=Math.floor((this.drawPosition.y*e.parallaxScale-s/2)/e.chunkSize)-1,n=Math.floor((this.drawPosition.y*e.parallaxScale+s/2)/e.chunkSize)+1;(i>e.rightSoftCursor||o<e.leftSoftCursor||h>e.bottomSoftCursor||n<e.topSoftCursor)&&e.hideAll(),e.updateCursors(h,n,i,o),e.setDrawPosition(new a.Vector3(this.drawPosition.x*(1-e.parallaxScale),this.drawPosition.y*(1-e.parallaxScale)))}}};h=s([o.drawable2d,r("design:paramtypes",[])],h),e.default=h},2716:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const r=i(565),a=i(5412),o=s(i(8616)),h=s(i(8334));class n extends a.GameInstancePlugin{constructor(t){super(),this.dependencies=[r.GameClientPlugin],this.lastKnownPhysicsUpdate=0,this.backdrops={},this.maxDt=.1,this.config=t}initialize(){this.gameClientPlugin=this.gameInstance.getPlugin(r.GameClientPlugin),this.gameInstance.on("gameStart",(()=>{this.pixiWorld=this.gameInstance.make(h.default,(t=>{t.target=this.config?.target,t.disableScroll=this.config?.disableScroll,t.backgroundColor=this.config?.backgroundColor??t.backgroundColor,t.useBlinders=this.config?.enableBlinders??!0})),this.camera=this.gameInstance.make(o.default),this.gameClientPlugin.params.useRealCursor,this.resize()})),this.gameInstance.on("gameOver",(()=>{this.gameInstance.destroyObject(this.camera,a.DeathType.GameOver),this.camera=null,this.gameInstance.destroyObject(this.pixiWorld,a.DeathType.GameOver),this.pixiWorld=null})),this.gameInstance.on("renderUpdate",((t,e,i)=>{t>this.maxDt&&(t=this.maxDt),this.pixiWorld.drawUpdate(t,e,i),this.camera&&this.camera.drawUpdate(t,e,i)})),this.gameInstance.on("resize",(()=>{this.resize()})),this.gameInstance.on("physicsUpdate",((t,e)=>{this.lastKnownPhysicsUpdate=performance.now()/1e3})),this.gameInstance.registerRemoteTriggerHandler("trackObject",(t=>{if(!this.camera)throw new Error("The server attempted to track an object, but the camera does not exist.");{let e=this.gameInstance.remoteGameObjectsById[t.data[0]?.value];if(!e)throw new Error(`The server attempted to track an object, but the objct could not be found client-side. Remote ID: ${t.data.id}.`);if(e.is("drawable-2d"))this.camera.targetObject=e;else{let t=a.GameObject.getExtensionByLabel(e,"drawable-2d");if(!t)throw new Error(`Unable to track object ${e.id} because it is not drawable and doesn't have a drawable extension.`);this.camera.targetObject=t}}}))}resize(){this.pixiWorld&&this.pixiWorld.resize(),this.camera&&this.camera.resize()}destroy(){}}e.default=n},6408:function(t,e,i){var s=this&&this.__decorate||function(t,e,i,s){var r,a=arguments.length,o=a<3?e:null===s?s=Object.getOwnPropertyDescriptor(e,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,s);else for(var h=t.length-1;h>=0;h--)(r=t[h])&&(o=(a<3?r(o):a>3?r(e,i,o):r(e,i))||o);return a>3&&o&&Object.defineProperty(e,i,o),o},r=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Cursor2dPainter=void 0;const o=i(5412),h=i(8521),n=a(i(9493));class l extends o.GameObject{}e.default=l;let d=class extends o.GameObject{constructor(){super(),this.target.painter=this}draw(){let t=new n.default.Graphics;t.beginFill(0),t.drawRect(-11,-2,22,4),t.drawRect(-2,-11,4,22),t.beginFill(16777215),t.drawRect(-10,-1,20,2),t.drawRect(-1,-10,2,20),this.displayObject=t}drawUpdate(t,e,i){}};d=s([h.drawable2d,(0,o.extension)(l),r("design:paramtypes",[])],d),e.Cursor2dPainter=d}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,