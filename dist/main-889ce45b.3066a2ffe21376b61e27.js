"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[1254],{2266:function(e,t,i){var a=this&&this.__decorate||function(e,t,i,a){var o,s=arguments.length,r=s<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,a);else for(var h=e.length-1;h>=0;h--)(o=e[h])&&(r=(s<3?o(r):s>3?o(t,i,r):o(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const s=i(9777),r=i(5412);let h=class extends r.GameObject{constructor(){super();let e=new s.Three.MeshToonMaterial({color:7829503});this.snowMaterial=new s.Three.MeshToonMaterial({color:14540287}),this.hex=new s.Three.CapsuleGeometry(1/12,.52,6,24);let t=new s.Three.SphereGeometry(.5,24,24);this.mainGroup=new s.Three.Group,this.mainGroup.scale.set(1e-4,1e-4,1e-4),this.mainGroup.rotation.z=.05,this.addDisplayObject(this.mainGroup);let i=new s.Three.Mesh(t,e);i.rotation.z=.05,this.mainGroup.add(i);let a=new s.Three.Mesh(this.hex,this.snowMaterial);a.position.y=.25,this.mainGroup.add(a);let o=new s.Three.Mesh(this.hex,this.snowMaterial);o.rotation.z=Math.PI,o.position.y=-.25,this.mainGroup.add(o);for(let e=0;e<25;e++)this.createLand(.5+5*Math.random(),12*Math.random())}createLand(e,t){let i=e<1.25||e>4.75?this.snowMaterial:Math.random()<.1?new s.Three.MeshToonMaterial({color:8947763}):new s.Three.MeshToonMaterial({color:5570560+256*Math.round(136+119*Math.random())+85}),a=new s.Three.Mesh(this.hex,i),o=1+.5*Math.random();a.scale.x=o,a.scale.z=o,a.position.y=.21+.15*Math.random();let r=new s.Three.Group,h=new s.Three.Group;r.add(h),h.add(a),a.rotation.y=2*Math.random()*Math.PI,h.rotation.x=e*Math.PI/6,r.rotation.y=t*Math.PI/6,this.mainGroup.add(r)}drawUpdate(e){this.mainGroup.rotation.y+=.7*e;let t=this.mainGroup.scale.x;this.hideMode?(t-=e,t<0&&(t=1e-4)):(t+=e,t>1&&(t=1)),this.mainGroup.scale.x=t,this.mainGroup.scale.y=t,this.mainGroup.scale.z=t}fixedUpdate(){this.hideMode&&1e-4==this.mainGroup.scale.x&&this.gi.destroyObject(this,r.DeathType.Expired)}show(){this.hideMode=!1}hide(){this.hideMode=!0}};h=a([s.drawable3d,o("design:paramtypes",[])],h),t.default=h},9949:function(e,t,i){var a=this&&this.__decorate||function(e,t,i,a){var o,s=arguments.length,r=s<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,a);else for(var h=e.length-1;h>=0;h--)(o=e[h])&&(r=(s<3?o(r):s>3?o(t,i,r):o(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const s=i(9777),r=i(5412);let h=class extends r.GameObject{constructor(){super();let e=new s.Three.MeshToonMaterial({color:5592405});this.hex=new s.Three.CapsuleGeometry(1/12,.52,6,24);let t=new s.Three.SphereGeometry(.2,24,24);this.mainGroup=new s.Three.Group,this.mainGroup.scale.set(1e-4,1e-4,1e-4),this.mainGroup.rotation.z=.5,this.addDisplayObject(this.mainGroup),this.revolutionGroup=new s.Three.Group,this.mainGroup.add(this.revolutionGroup),this.moonAxisGroup=new s.Three.Group,this.moonAxisGroup.position.x=1,this.revolutionGroup.add(this.moonAxisGroup);let i=new s.Three.Mesh(t,e);i.rotation.z=.05,this.moonAxisGroup.add(i);let a=new s.Three.MeshToonMaterial({color:14527061}),o=new s.Three.TorusGeometry(.3,.05,12,12),r=new s.Three.Mesh(o,a);r.rotation.x=Math.PI/2,r.rotation.y=Math.PI/8,r.scale.z=.1,this.moonAxisGroup.add(r);for(let e=0;e<25;e++);}createCraters(e,t){}drawUpdate(e){this.revolutionGroup.rotation.y+=.4*e,this.moonAxisGroup.rotation.y+=.7*e;let t=this.mainGroup.scale.x;this.hideMode?(t-=e,t<0&&(t=1e-4)):(t+=e,t>1&&(t=1)),this.mainGroup.scale.x=t,this.mainGroup.scale.y=t,this.mainGroup.scale.z=t}fixedUpdate(){this.hideMode&&1e-4==this.mainGroup.scale.x&&this.gi.destroyObject(this,r.DeathType.Expired)}show(){this.hideMode=!1}hide(){this.hideMode=!0}};h=a([s.drawable3d,o("design:paramtypes",[])],h),t.default=h},5299:function(e,t,i){var a=this&&this.__decorate||function(e,t,i,a){var o,s=arguments.length,r=s<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,a);else for(var h=e.length-1;h>=0;h--)(o=e[h])&&(r=(s<3?o(r):s>3?o(t,i,r):o(t,i))||r);return s>3&&r&&Object.defineProperty(t,i,r),r},o=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const s=i(7203),r=i(5412),h=20,n=700;let l=class extends r.GameObject{constructor(){super(),this.mode="play",this.targetX=0,this.targetY=0,this.xs=0,this.ys=0,this.r=0,this.opacity=0;let e=new s.Pixi.Graphics;this.displayObject=e;let t=1<<Math.floor(2*Math.random());2==t&&(t=1);let i=256*Math.round(.75*Math.max(Math.floor(256*Math.random()),255*(1&t)))*256+256*Math.round(.75*Math.max(Math.floor(256*Math.random()),255*((2&t)>>1)))+Math.round(.75*Math.max(Math.floor(256*Math.random()),255*((4&t)>>2)));switch(this.type||(this.type="plane"),this.type){case"sputnik":e.lineStyle(1,10066329),e.moveTo(0,0),e.lineTo(-1,28),e.lineStyle(0),e.beginFill(11184810),e.drawCircle(0,0,10),e.endFill(),e.lineStyle(1,12303291),e.moveTo(0,0),e.lineTo(1,32),e.moveTo(10,0),e.lineTo(14,26),e.moveTo(-10,0),e.lineTo(-14,26),e.lineStyle(0);break;case"ufo":e.beginFill(4474111),e.arc(0,0,15,Math.PI/2,3*Math.PI/2),e.endFill(),e.lineStyle(0),e.beginFill(i),e.drawEllipse(0,0,h/3,h);break;case"rocket":e.beginFill(i),e.moveTo(0,10),e.arc(0,10,h/3,0,Math.PI,!0),e.endFill(),e.beginFill(15658734),e.drawRect(-20/6,-10,h/3,h),e.endFill(),e.beginFill(i),e.moveTo(0,-10),e.lineTo(h/6,-10),e.lineTo(0,-10-h/3),e.lineTo(-20/6,-10),e.endFill();break;case"plane":e.beginFill(i),e.moveTo(0,-10),e.lineTo(8.66,5),e.lineTo(-8.66,5),e.endFill()}let a=Math.random()*Math.PI*2;this.drawPosition=new r.Vector3(n*Math.cos(a),n*Math.sin(a),0),this.setNewTarget()}setNewTarget(e=!1){if(e){const e=100;let t=Math.sqrt(this.targetX*this.targetX+this.targetY*this.targetY),i=Math.max(1,Math.round(t/e)),a=!!(1&i),o=Math.atan2(this.targetY,this.targetX)+(a?1:-1)*Math.PI/12;this.targetX=i*e*Math.cos(o),this.targetY=i*e*Math.sin(o)}else this.targetX=(2*Math.random()-1)*n,this.targetY=(2*Math.random()-1)*n}drawUpdate(e,t,i){if("play"==this.mode){let t=this.drawPosition.x-this.targetX,i=this.drawPosition.y-this.targetY;(t*t+i*i<1e3||Math.random()<r.Util.probPerDt(.3,e))&&this.setNewTarget(Math.random()<.99),this.opacity=Math.min(1,this.opacity+e),this.displayObject.alpha=this.opacity}let a=this.targetX-this.drawPosition.x,o=this.targetY-this.drawPosition.y,s=Math.sqrt(a*a+o*o);a/=s,o/=s,this.xs+=10*a*e,this.ys+=10*o*e;let h=r.Util.ratePerDt(.05,e);this.xs*=h,this.ys*=h,this.displayObject.rotation=Math.atan2(this.ys,this.xs)+Math.PI/2,this.drawPosition.addWithScalars(this.xs,this.ys,0)}fixedUpdate(e,t){this.drawPosition.mag2>196e4&&(this.gi.destroyObject(this,r.DeathType.Expired),delete this.sm.all2DPlanes[this.id])}};l=a([s.drawable2d,o("design:paramtypes",[])],l),t.default=l},7515:function(e,t,i){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=a(i(9427)),s=a(i(2266)),r=a(i(9949)),h=a(i(5299));class n extends o.default{constructor(){super(...arguments),this.all2DPlanes={},this.all3DPlanes={}}enter(){for(let e=Object.keys(this.all2DPlanes).length;e<12;e++){let t=this.gi.make(h.default,(t=>{t.sm=this,t.type=["sputnik","rocket","plane","ufo"][e%4]}));this.all2DPlanes[t.id]=t}this.globe&&this.globe.alive?(this.globe.show(),this.moon.show()):(this.globe=this.gi.make(s.default),this.moon=this.gi.make(r.default))}leave(){for(let e in this.all2DPlanes){let t=this.all2DPlanes[e];t.mode="flee";let i=t.drawPosition.mag;t.targetX=t.drawPosition.x/i*1e4,t.targetY=t.drawPosition.y/i*1e4}for(let e in this.all3DPlanes){let t=this.all3DPlanes[e];t.mode="flee";let i=t.mainGroup.position.lengthSq();t.targetX=t.mainGroup.position.x/i*1e4,t.targetY=t.mainGroup.position.y/i*1e4,t.targetZ=t.mainGroup.position.z/i*1e4}this.globe.hide(),this.moon.hide(),this.all2DPlanes={},this.all3DPlanes={}}}t.default=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,