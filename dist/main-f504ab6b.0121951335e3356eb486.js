"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[6260],{1569:function(e,t,s){var i=this&&this.__createBinding||(Object.create?function(e,t,s,i){void 0===i&&(i=s);var r=Object.getOwnPropertyDescriptor(t,s);r&&!("get"in r?!t.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,i,r)}:function(e,t,s,i){void 0===i&&(i=s),e[i]=t[s]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&i(t,e,s);return r(t,e),t},d=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=d(s(8989)),n=d(s(4051)),o=d(s(7010)),c=a(s(7062)),u=d(s(2453)),h=d(s(8862));t.default=class{constructor(e,t,s,i=64){this.isMasterPeer=!1,this.gi=e,this.profileId=t,this.isMasterPeer=s,this.messageBuilder=new o.default(i),this.messageDecoder=new c.default(this.isMasterPeer)}updateFields(e,t){for(let s of e.data){let e=t.constructor._syncedFields[s.fieldId],i=t,r=e.key.length-1,a=0;do{if(!(a<r)){i[e.key[a]]=n.default.decode(s.syncDataType,s.value);break}i=i[e.key[a]],a++}while(a<=r)}}interpret(e,t,s=null){let i=this.messageDecoder.decodeNextSegment(t);for(let t of i)switch(t.updateType){case c.INSTRUCTION_TYPE.CREATE:{if(!this.isMasterPeer)throw new Error("Slave clients cannot create things on the master.");let e=this.gi.remoteGameObjectsById[t.resourceId];e&&(console.warn(`Attempted to create an object #${t.resourceId} that already exists. Replacing object.`),this.gi.destroyObject(e,l.default.Overwritten));let s=h.default[t.typeId];this.gi.make(s,(e=>{e.masterId=t.resourceId,this.gi.remoteGameObjectsById[t.resourceId]=e,this.updateFields(t,e)}));break}case c.INSTRUCTION_TYPE.UPDATE:{if(!this.isMasterPeer)throw new Error("Slave clients cannot update fields on the master.");let e=this.gi.remoteGameObjectsById[t.resourceId];if(!e)throw new Error(`Attempted to update an object #${t.resourceId} that doesn't exist.`);this.updateFields(t,e);break}case c.INSTRUCTION_TYPE.DELETE:{if(!this.isMasterPeer)throw new Error("Slave clients cannot delete things on the master.");let e=this.gi.remoteGameObjectsById[t.resourceId];if(!e){console.error(`Attempted to delete an object #${t.resourceId} that doesn't exist.`);break}this.updateFields(t,e),this.gi.destroyObject(e,0);break}case c.INSTRUCTION_TYPE.ACTION:if(t.resourceId){let e;if(e=this.isMasterPeer?this.gi.remoteGameObjectsById[t.resourceId]:this.gi.allGameObjectsById[t.resourceId],!e)break;if(!this.isMasterPeer&&e._ownerWsId!=s)throw new Error(`Player with ws-ID ${s} does not have permission to manipulate #${e.id}.`);let i=u.default.syncedMethods[t.actionId],r=[];for(let e=0;e<t.data.length;e++){let s=t.data[e];r.push(n.default.decode(i.syncParamTypes[e],s.value))}i.original.call(e,...r)}else{let i=this.gi._remoteTriggersById[t.actionId].handlers;for(let r=0;r<i.length;r++)i[r]({data:t.data,controller:e,wsId:s})}}}addCreate(e){var t=e._typeId;this.messageBuilder.startCreate(e.id,t);let s=h.default[t];for(let t in s._syncedFields){let i=s._syncedFields[t];null!=e._snapshot[i.fieldId]&&this.messageBuilder.writeValue(e._snapshot[i.fieldId],i.fieldId)}this.messageBuilder.completeInstruction()}addUpdate(e){var t=e._typeId;let s=!0,i=h.default[t];for(let t in i._syncedFields){let r=i._syncedFields[t];null!=e._snapshot[r.fieldId]&&e._snapshot[r.fieldId]!=e._snapshotArchive[r.fieldId]&&(s&&(this.messageBuilder.startUpdate(e.id),s=!1),this.messageBuilder.writeValue(e._snapshot[r.fieldId],r.fieldId))}s||this.messageBuilder.completeInstruction()}addDelete(e){this.messageBuilder.startDelete(e.id),this.messageBuilder.completeInstruction()}addAction(e,t,s){this.messageBuilder.startAction(e?.masterId??0,t);for(let e=0;e<s.length;e++){let t=s[e];this.messageBuilder.writeValue(t,e+1,!1)}this.messageBuilder.completeInstruction()}prepare(){return this.messageBuilder.prepare()}}},1745:function(e,t,s){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(s(7187)),a=i(s(1481));class d extends a.default{constructor(e){super(),this.syncedObjects={},this.filter=e}initialize(){this.gameInstance.on("addObject",(e=>{if(e._typeId&&!e.is("no-autoload")&&(!this.filter||this.filter(e))){this.syncedObjects[e.id]=e;for(let t in this.gameInstance.controllers)this.gameInstance.controllers[t].loadObject(e)}if(e instanceof r.default)for(let t in this.syncedObjects){let s=this.syncedObjects[t];e.loadObject(s)}})),this.gameInstance.on("removeObject",(e=>{if(this.syncedObjects[e.id]){delete this.syncedObjects[e.id];for(let t in this.gameInstance.controllers)this.gameInstance.controllers[t].unloadObject(e)}if(e instanceof r.default)for(let t in this.syncedObjects){let s=this.syncedObjects[t];e.unloadObject(s)}}))}}t.default=d},1481:function(e,t,s){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=i(s(7566));class a extends r.default{}t.default=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1mNTA0YWI2Yi4xZDVjODBiNGY2OGE5ZDdhZjRiNi5qcyIsIm1hcHBpbmdzIjoiZ0lBQ0EsSUFBSUEsRUFBbUJDLE1BQVFBLEtBQUtELGtCQUFxQkUsT0FBT0MsT0FBUyxTQUFVQyxFQUFHQyxFQUFHQyxFQUFHQyxRQUM3RUMsSUFBUEQsSUFBa0JBLEVBQUtELEdBQzNCLElBQUlHLEVBQU9QLE9BQU9RLHlCQUF5QkwsRUFBR0MsR0FDekNHLEtBQVMsUUFBU0EsR0FBUUosRUFBRU0sV0FBYUYsRUFBS0csVUFBWUgsRUFBS0ksZ0JBQ2xFSixFQUFPLENBQUVLLFlBQVksRUFBTUMsSUFBSyxXQUFhLE9BQU9WLEVBQUVDLEVBQUksSUFFNURKLE9BQU9jLGVBQWVaLEVBQUdHLEVBQUlFLEVBQ2hDLEVBQUksU0FBVUwsRUFBR0MsRUFBR0MsRUFBR0MsUUFDVEMsSUFBUEQsSUFBa0JBLEVBQUtELEdBQzNCRixFQUFFRyxHQUFNRixFQUFFQyxFQUNiLEdBQ0dXLEVBQXNCaEIsTUFBUUEsS0FBS2dCLHFCQUF3QmYsT0FBT0MsT0FBUyxTQUFVQyxFQUFHYyxHQUN4RmhCLE9BQU9jLGVBQWVaLEVBQUcsVUFBVyxDQUFFVSxZQUFZLEVBQU1LLE1BQU9ELEdBQ2xFLEVBQUksU0FBU2QsRUFBR2MsR0FDYmQsRUFBVyxRQUFJYyxDQUNuQixHQUNJRSxFQUFnQm5CLE1BQVFBLEtBQUttQixjQUFpQixTQUFVQyxHQUN4RCxHQUFJQSxHQUFPQSxFQUFJVixXQUFZLE9BQU9VLEVBQ2xDLElBQUlDLEVBQVMsQ0FBQyxFQUNkLEdBQVcsTUFBUEQsRUFBYSxJQUFLLElBQUlmLEtBQUtlLEVBQWUsWUFBTmYsR0FBbUJKLE9BQU9xQixVQUFVQyxlQUFlQyxLQUFLSixFQUFLZixJQUFJTixFQUFnQnNCLEVBQVFELEVBQUtmLEdBRXRJLE9BREFXLEVBQW1CSyxFQUFRRCxHQUNwQkMsQ0FDWCxFQUNJSSxFQUFtQnpCLE1BQVFBLEtBQUt5QixpQkFBb0IsU0FBVUwsR0FDOUQsT0FBUUEsR0FB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QWFELEVBQ3JCLENBQ0osR0FFUixFQUVKckcsRUFBQSxRQUFrQjBGLEMsdUJDN0NsQixJQUFJM0YsRUFBbUJ6QixNQUFRQSxLQUFLeUIsaUJBQW9CLFNBQVVMLEdBQzlELE9BQVFBLEdBQU9BLEVBQUlWLFdBQWNVLEVBQU0sQ0FBRSxRQUFXQSxFQUN4RCxFQUNBbkIsT0FBT2MsZUFBZVcsRUFBUyxhQUFjLENBQUVSLE9BQU8sSUFDdEQsTUFBTStHLEVBQXlCeEcsRUFBZ0IsRUFBUSxPQUN2RCxNQUFNeUcsVUFBeUJELEVBQXVCMUYsU0FFdERiLEVBQUEsUUFBa0J3RyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2VhcjNlbmdpbmUtd2Vic2l0ZS8uLi8uLi9HQU1FUy1TSU1VTEFUT1JTLUZVTi9nZWFyM2VuZ2luZS9wbHVnaW5zL2dlYXIzZW5naW5lL2J1aWxkL2NvbS9jb20tcHJvZmlsZS5qcyIsIndlYnBhY2s6Ly9nZWFyM2VuZ2luZS13ZWJzaXRlLy4uLy4uL0dBTUVTLVNJTVVMQVRPUlMtRlVOL2dlYXIzZW5naW5lL3BsdWdpbnMvZ2VhcjNlbmdpbmUvYnVpbGQvY29tL2xvYWQtcG9saWNpZXMvYWx3YXlzLWxvYWQtcG9saWN5LXBsdWdpbi5qcyIsIndlYnBhY2s6Ly9nZWFyM2VuZ2luZS13ZWJzaXRlLy4uLy4uL0dBTUVTLVNJTVVMQVRPUlMtRlVOL2dlYXIzZW5naW5lL3BsdWdpbnMvZ2VhcjNlbmdpbmUvYnVpbGQvY29tL2xvYWQtcG9saWNpZXMvbG9hZC1wb2xpY3ktcGx1Z2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xyXG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcclxuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KSk7XHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xyXG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcclxufSk7XHJcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGRlYXRoX3R5cGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vZW50aXRpZXMvbGlmZS9kZWF0aC10eXBlXCIpKTtcclxuY29uc3QgY29kZWNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb2RlY1wiKSk7XHJcbmNvbnN0IG1lc3NhZ2VfYnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21lc3NhZ2UtYnVpbGRlclwiKSk7XHJcbmNvbnN0IG1lc3NhZ2VfZGVjb2Rlcl8xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL21lc3NhZ2UtZGVjb2RlclwiKSk7XHJcbmNvbnN0IHN5bmNlZF9tZXRob2RfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zeW5jLWRlY29yYXRvcnMvc3luY2VkLW1ldGhvZFwiKSk7XHJcbmNvbnN0IHR5cGVfcmVnaXN0cnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi90eXBlLXJlZ2lzdHJ5XCIpKTtcclxuY2xhc3MgQ29tUHJvZmlsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihnaSwgcHJvZmlsZUlkLCBpc01hc3RlclBlZXIsIGJ1ZmZlclNpemUgPSA2NCkge1xyXG4gICAgICAgIHRoaXMuaXNNYXN0ZXJQZWVyID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5naSA9IGdpO1xyXG4gICAgICAgIHRoaXMucHJvZmlsZUlkID0gcHJvZmlsZUlkO1xyXG4gICAgICAgIHRoaXMuaXNNYXN0ZXJQZWVyID0gaXNNYXN0ZXJQZWVyO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1aWxkZXIgPSBuZXcgbWVzc2FnZV9idWlsZGVyXzEuZGVmYXVsdChidWZmZXJTaXplKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VEZWNvZGVyID0gbmV3IG1lc3NhZ2VfZGVjb2Rlcl8xLmRlZmF1bHQodGhpcy5pc01hc3RlclBlZXIpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlRmllbGRzKGluc3RydWN0aW9uLCBvYmopIHtcclxuICAgICAgICBmb3IgKGxldCBmYSBvZiBpbnN0cnVjdGlvbi5kYXRhKSB7XHJcbiAgICAgICAgICAgIGxldCBmaWVsZEluZm8gPSBvYmouY29uc3RydWN0b3JbXCJfc3luY2VkRmllbGRzXCJdW2ZhLmZpZWxkSWRdO1xyXG4gICAgICAgICAgICBsZXQgRiA9IG9iajtcclxuICAgICAgICAgICAgbGV0IEwgPSBmaWVsZEluZm8ua2V5Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCBMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRiA9IEZbZmllbGRJbmZvLmtleVtpXV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBGW2ZpZWxkSW5mby5rZXlbaV1dID0gY29kZWNfMS5kZWZhdWx0LmRlY29kZShmYS5zeW5jRGF0YVR5cGUsIGZhLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgfSB3aGlsZSAoaSA8PSBMKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbnRlcnByZXQoY29udHJvbGxlciwgZGF0YSwgd3NJZCA9IG51bGwpIHtcclxuICAgICAgICBsZXQgcmVzdWx0cyA9IHRoaXMubWVzc2FnZURlY29kZXIuZGVjb2RlTmV4dFNlZ21lbnQoZGF0YSk7XHJcbiAgICAgICAgZm9yIChsZXQgaW5zdHJ1Y3Rpb24gb2YgcmVzdWx0cykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGluc3RydWN0aW9uLnVwZGF0ZVR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgbWVzc2FnZV9kZWNvZGVyXzEuSU5TVFJVQ1RJT05fVFlQRS5DUkVBVEU6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNNYXN0ZXJQZWVyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTbGF2ZSBjbGllbnRzIGNhbm5vdCBjcmVhdGUgdGhpbmdzIG9uIHRoZSBtYXN0ZXIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBleGlzdGluZyA9IHRoaXMuZ2kucmVtb3RlR2FtZU9iamVjdHNCeUlkW2luc3RydWN0aW9uLnJlc291cmNlSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChleGlzdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEF0dGVtcHRlZCB0byBjcmVhdGUgYW4gb2JqZWN0ICMke2luc3RydWN0aW9uLnJlc291cmNlSWR9IHRoYXQgYWxyZWFkeSBleGlzdHMuIFJlcGxhY2luZyBvYmplY3QuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2kuZGVzdHJveU9iamVjdChleGlzdGluZywgZGVhdGhfdHlwZV8xLmRlZmF1bHQuT3ZlcndyaXR0ZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY29uc3RydWN0b3IgPSB0eXBlX3JlZ2lzdHJ5XzEuZGVmYXVsdFtpbnN0cnVjdGlvbi50eXBlSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2kubWFrZShjb25zdHJ1Y3RvciwgKG9iaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoubWFzdGVySWQgPSBpbnN0cnVjdGlvbi5yZXNvdXJjZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdpLnJlbW90ZUdhbWVPYmplY3RzQnlJZFtpbnN0cnVjdGlvbi5yZXNvdXJjZUlkXSA9IG9iajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVGaWVsZHMoaW5zdHJ1Y3Rpb24sIG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIG1lc3NhZ2VfZGVjb2Rlcl8xLklOU1RSVUNUSU9OX1RZUEUuVVBEQVRFOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTWFzdGVyUGVlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2xhdmUgY2xpZW50cyBjYW5ub3QgdXBkYXRlIGZpZWxkcyBvbiB0aGUgbWFzdGVyLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2JqID0gdGhpcy5naS5yZW1vdGVHYW1lT2JqZWN0c0J5SWRbaW5zdHJ1Y3Rpb24ucmVzb3VyY2VJZF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gdXBkYXRlIGFuIG9iamVjdCAjJHtpbnN0cnVjdGlvbi5yZXNvdXJjZUlkfSB0aGF0IGRvZXNuJ3QgZXhpc3QuYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRmllbGRzKGluc3RydWN0aW9uLCBvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBtZXNzYWdlX2RlY29kZXJfMS5JTlNUUlVDVElPTl9UWVBFLkRFTEVURToge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc01hc3RlclBlZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNsYXZlIGNsaWVudHMgY2Fubm90IGRlbGV0ZSB0aGluZ3Mgb24gdGhlIG1hc3Rlci5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9iaiA9IHRoaXMuZ2kucmVtb3RlR2FtZU9iamVjdHNCeUlkW2luc3RydWN0aW9uLnJlc291cmNlSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEF0dGVtcHRlZCB0byBkZWxldGUgYW4gb2JqZWN0ICMke2luc3RydWN0aW9uLnJlc291cmNlSWR9IHRoYXQgZG9lc24ndCBleGlzdC5gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRmllbGRzKGluc3RydWN0aW9uLCBvYmopO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2kuZGVzdHJveU9iamVjdChvYmosIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBtZXNzYWdlX2RlY29kZXJfMS5JTlNUUlVDVElPTl9UWVBFLkFDVElPTjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0cnVjdGlvbi5yZXNvdXJjZUlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvYmo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTWFzdGVyUGVlcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iaiA9IHRoaXMuZ2kucmVtb3RlR2FtZU9iamVjdHNCeUlkW2luc3RydWN0aW9uLnJlc291cmNlSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSB0aGlzLmdpLmFsbEdhbWVPYmplY3RzQnlJZFtpbnN0cnVjdGlvbi5yZXNvdXJjZUlkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc01hc3RlclBlZXIgJiYgb2JqLl9vd25lcldzSWQgIT0gd3NJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQbGF5ZXIgd2l0aCB3cy1JRCAke3dzSWR9IGRvZXMgbm90IGhhdmUgcGVybWlzc2lvbiB0byBtYW5pcHVsYXRlICMke29iai5pZH0uYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1ldGhvZCA9IHN5bmNlZF9tZXRob2RfMS5kZWZhdWx0LnN5bmNlZE1ldGhvZHNbaW5zdHJ1Y3Rpb24uYWN0aW9uSWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJncyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBkID0gMDsgZCA8IGluc3RydWN0aW9uLmRhdGEubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBEID0gaW5zdHJ1Y3Rpb24uZGF0YVtkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChjb2RlY18xLmRlZmF1bHQuZGVjb2RlKG1ldGhvZC5zeW5jUGFyYW1UeXBlc1tkXSwgRC52YWx1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZC5vcmlnaW5hbC5jYWxsKG9iaiwgLi4uYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGFuZGxlcnMgPSB0aGlzLmdpLl9yZW1vdGVUcmlnZ2Vyc0J5SWRbaW5zdHJ1Y3Rpb24uYWN0aW9uSWRdLmhhbmRsZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyc1tpXSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogaW5zdHJ1Y3Rpb24uZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdzSWQ6IHdzSWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkQ3JlYXRlKG9iaikge1xyXG4gICAgICAgIHZhciB0eXBlSWQgPSBvYmouX3R5cGVJZDtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdWlsZGVyLnN0YXJ0Q3JlYXRlKG9iai5pZCwgdHlwZUlkKTtcclxuICAgICAgICBsZXQgdCA9IHR5cGVfcmVnaXN0cnlfMS5kZWZhdWx0W3R5cGVJZF07XHJcbiAgICAgICAgZm9yIChsZXQgZiBpbiB0W1wiX3N5bmNlZEZpZWxkc1wiXSkge1xyXG4gICAgICAgICAgICBsZXQgZkluZm8gPSB0W1wiX3N5bmNlZEZpZWxkc1wiXVtmXTtcclxuICAgICAgICAgICAgaWYgKG9iai5fc25hcHNob3RbZkluZm8uZmllbGRJZF0gIT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVpbGRlci53cml0ZVZhbHVlKG9iai5fc25hcHNob3RbZkluZm8uZmllbGRJZF0sIGZJbmZvLmZpZWxkSWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdWlsZGVyLmNvbXBsZXRlSW5zdHJ1Y3Rpb24oKTtcclxuICAgIH1cclxuICAgIGFkZFVwZGF0ZShvYmopIHtcclxuICAgICAgICB2YXIgdHlwZUlkID0gb2JqLl90eXBlSWQ7XHJcbiAgICAgICAgbGV0IGZpcnN0VXBkYXRlID0gdHJ1ZTtcclxuICAgICAgICBsZXQgdCA9IHR5cGVfcmVnaXN0cnlfMS5kZWZhdWx0W3R5cGVJZF07XHJcbiAgICAgICAgZm9yIChsZXQgZiBpbiB0W1wiX3N5bmNlZEZpZWxkc1wiXSkge1xyXG4gICAgICAgICAgICBsZXQgZkluZm8gPSB0W1wiX3N5bmNlZEZpZWxkc1wiXVtmXTtcclxuICAgICAgICAgICAgaWYgKG9iai5fc25hcHNob3RbZkluZm8uZmllbGRJZF0gIT0gdW5kZWZpbmVkICYmIG9iai5fc25hcHNob3RbZkluZm8uZmllbGRJZF0gIT0gb2JqLl9zbmFwc2hvdEFyY2hpdmVbZkluZm8uZmllbGRJZF0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChmaXJzdFVwZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1aWxkZXIuc3RhcnRVcGRhdGUob2JqLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdFVwZGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVpbGRlci53cml0ZVZhbHVlKG9iai5fc25hcHNob3RbZkluZm8uZmllbGRJZF0sIGZJbmZvLmZpZWxkSWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZmlyc3RVcGRhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlQnVpbGRlci5jb21wbGV0ZUluc3RydWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkRGVsZXRlKG9iaikge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1aWxkZXIuc3RhcnREZWxldGUob2JqLmlkKTtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdWlsZGVyLmNvbXBsZXRlSW5zdHJ1Y3Rpb24oKTtcclxuICAgIH1cclxuICAgIGFkZEFjdGlvbihvYmplY3QsIGFjdGlvbklkLCBwYXJhbXMpIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdWlsZGVyLnN0YXJ0QWN0aW9uKG9iamVjdD8ubWFzdGVySWQgPz8gMCwgYWN0aW9uSWQpO1xyXG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgcGFyYW1zLmxlbmd0aDsgcCsrKSB7XHJcbiAgICAgICAgICAgIGxldCBQID0gcGFyYW1zW3BdO1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VCdWlsZGVyLndyaXRlVmFsdWUoUCwgcCArIDEsIGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlQnVpbGRlci5jb21wbGV0ZUluc3RydWN0aW9uKCk7XHJcbiAgICB9XHJcbiAgICBwcmVwYXJlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VCdWlsZGVyLnByZXBhcmUoKTtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLmRlZmF1bHQgPSBDb21Qcm9maWxlO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb20tcHJvZmlsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBjb250cm9sbGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2NvbnRyb2xsYWJpbGl0eS9jb250cm9sbGVyXCIpKTtcclxuY29uc3QgbG9hZF9wb2xpY3lfcGx1Z2luXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbG9hZC1wb2xpY3ktcGx1Z2luXCIpKTtcclxuY2xhc3MgQWx3YXlzTG9hZFBvbGljeVBsdWdpbiBleHRlbmRzIGxvYWRfcG9saWN5X3BsdWdpbl8xLmRlZmF1bHQge1xyXG4gICAgY29uc3RydWN0b3IoZmlsdGVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnN5bmNlZE9iamVjdHMgPSB7fTtcclxuICAgICAgICB0aGlzLmZpbHRlciA9IGZpbHRlcjtcclxuICAgIH1cclxuICAgIGluaXRpYWxpemUoKSB7XHJcbiAgICAgICAgdGhpcy5nYW1lSW5zdGFuY2Uub24oXCJhZGRPYmplY3RcIiwgb2JqID0+IHtcclxuICAgICAgICAgICAgaWYgKG9iai5fdHlwZUlkICYmICFvYmouaXMoXCJuby1hdXRvbG9hZFwiKSAmJiAoIXRoaXMuZmlsdGVyIHx8IHRoaXMuZmlsdGVyKG9iaikpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN5bmNlZE9iamVjdHNbb2JqLmlkXSA9IG9iajtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGMgaW4gdGhpcy5nYW1lSW5zdGFuY2UuY29udHJvbGxlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgQyA9IHRoaXMuZ2FtZUluc3RhbmNlLmNvbnRyb2xsZXJzW2NdO1xyXG4gICAgICAgICAgICAgICAgICAgIEMubG9hZE9iamVjdChvYmopO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvYmogaW5zdGFuY2VvZiBjb250cm9sbGVyXzEuZGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgbyBpbiB0aGlzLnN5bmNlZE9iamVjdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgTyA9IHRoaXMuc3luY2VkT2JqZWN0c1tvXTtcclxuICAgICAgICAgICAgICAgICAgICBvYmoubG9hZE9iamVjdChPKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZUluc3RhbmNlLm9uKFwicmVtb3ZlT2JqZWN0XCIsIG9iaiA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN5bmNlZE9iamVjdHNbb2JqLmlkXSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3luY2VkT2JqZWN0c1tvYmouaWRdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgYyBpbiB0aGlzLmdhbWVJbnN0YW5jZS5jb250cm9sbGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBDID0gdGhpcy5nYW1lSW5zdGFuY2UuY29udHJvbGxlcnNbY107XHJcbiAgICAgICAgICAgICAgICAgICAgQy51bmxvYWRPYmplY3Qob2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgY29udHJvbGxlcl8xLmRlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IG8gaW4gdGhpcy5zeW5jZWRPYmplY3RzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IE8gPSB0aGlzLnN5bmNlZE9iamVjdHNbb107XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLnVubG9hZE9iamVjdChPKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IEFsd2F5c0xvYWRQb2xpY3lQbHVnaW47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFsd2F5cy1sb2FkLXBvbGljeS1wbHVnaW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZ2FtZV9pbnN0YW5jZV9wbHVnaW5fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vY29yZS9nYW1lLWluc3RhbmNlLXBsdWdpblwiKSk7XHJcbmNsYXNzIExvYWRQb2xpY3lQbHVnaW4gZXh0ZW5kcyBnYW1lX2luc3RhbmNlX3BsdWdpbl8xLmRlZmF1bHQge1xyXG59XHJcbmV4cG9ydHMuZGVmYXVsdCA9IExvYWRQb2xpY3lQbHVnaW47XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvYWQtcG9saWN5LXBsdWdpbi5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwidGhpcyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJ2YWx1ZSIsIl9faW1wb3J0U3RhciIsIm1vZCIsInJlc3VsdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9faW1wb3J0RGVmYXVsdCIsImV4cG9ydHMiLCJkZWF0aF90eXBlXzEiLCJjb2RlY18xIiwibWVzc2FnZV9idWlsZGVyXzEiLCJtZXNzYWdlX2RlY29kZXJfMSIsInN5bmNlZF9tZXRob2RfMSIsInR5cGVfcmVnaXN0cnlfMSIsImNvbnN0cnVjdG9yIiwiZ2kiLCJwcm9maWxlSWQiLCJpc01hc3RlclBlZXIiLCJidWZmZXJTaXplIiwibWVzc2FnZUJ1aWxkZXIiLCJkZWZhdWx0IiwibWVzc2FnZURlY29kZXIiLCJ1cGRhdGVGaWVsZHMiLCJpbnN0cnVjdGlvbiIsIm9iaiIsImZhIiwiZGF0YSIsImZpZWxkSW5mbyIsImZpZWxkSWQiLCJGIiwiTCIsImtleSIsImxlbmd0aCIsImkiLCJkZWNvZGUiLCJzeW5jRGF0YVR5cGUiLCJpbnRlcnByZXQiLCJjb250cm9sbGVyIiwid3NJZCIsInJlc3VsdHMiLCJkZWNvZGVOZXh0U2VnbWVudCIsInVwZGF0ZVR5cGUiLCJJTlNUUlVDVElPTl9UWVBFIiwiQ1JFQVRFIiwiRXJyb3IiLCJleGlzdGluZyIsInJlbW90ZUdhbWVPYmplY3RzQnlJZCIsInJlc291cmNlSWQiLCJjb25zb2xlIiwid2FybiIsImRlc3Ryb3lPYmplY3QiLCJPdmVyd3JpdHRlbiIsInR5cGVJZCIsIm1ha2UiLCJtYXN0ZXJJZCIsIlVQREFURSIsIkRFTEVURSIsImVycm9yIiwiQUNUSU9OIiwiYWxsR2FtZU9iamVjdHNCeUlkIiwiX293bmVyV3NJZCIsImlkIiwibWV0aG9kIiwic3luY2VkTWV0aG9kcyIsImFjdGlvbklkIiwiYXJncyIsImQiLCJEIiwicHVzaCIsInN5bmNQYXJhbVR5cGVzIiwib3JpZ2luYWwiLCJoYW5kbGVycyIsIl9yZW1vdGVUcmlnZ2Vyc0J5SWQiLCJhZGRDcmVhdGUiLCJfdHlwZUlkIiwic3RhcnRDcmVhdGUiLCJ0IiwiZiIsImZJbmZvIiwiX3NuYXBzaG90Iiwid3JpdGVWYWx1ZSIsImNvbXBsZXRlSW5zdHJ1Y3Rpb24iLCJhZGRVcGRhdGUiLCJmaXJzdFVwZGF0ZSIsIl9zbmFwc2hvdEFyY2hpdmUiLCJzdGFydFVwZGF0ZSIsImFkZERlbGV0ZSIsInN0YXJ0RGVsZXRlIiwiYWRkQWN0aW9uIiwib2JqZWN0IiwicGFyYW1zIiwic3RhcnRBY3Rpb24iLCJwIiwiUCIsInByZXBhcmUiLCJjb250cm9sbGVyXzEiLCJsb2FkX3BvbGljeV9wbHVnaW5fMSIsIkFsd2F5c0xvYWRQb2xpY3lQbHVnaW4iLCJmaWx0ZXIiLCJzdXBlciIsInN5bmNlZE9iamVjdHMiLCJpbml0aWFsaXplIiwiZ2FtZUluc3RhbmNlIiwib24iLCJpcyIsImMiLCJjb250cm9sbGVycyIsImxvYWRPYmplY3QiLCJPIiwidW5sb2FkT2JqZWN0IiwiZ2FtZV9pbnN0YW5jZV9wbHVnaW5fMSIsIkxvYWRQb2xpY3lQbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9