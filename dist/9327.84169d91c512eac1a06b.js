/*! For license information please see 9327.84169d91c512eac1a06b.js.LICENSE.txt */
"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[9327],{9327:(e,i,n)=>{Object.defineProperty(i,"__esModule",{value:!0});var r=n(3663),t=n(2514),s=function(){function e(i){var n=this;this.stage=new r.Container,i=Object.assign({forceCanvas:!1},i),this.renderer=t.autoDetectRenderer(i),e._plugins.forEach((function(e){e.init.call(n,i)}))}return e.registerPlugin=function(i){e._plugins.push(i)},e.prototype.render=function(){this.renderer.render(this.stage)},Object.defineProperty(e.prototype,"view",{get:function(){return this.renderer.view},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"screen",{get:function(){return this.renderer.screen},enumerable:!1,configurable:!0}),e.prototype.destroy=function(i,n){var r=this,t=e._plugins.slice(0);t.reverse(),t.forEach((function(e){e.destroy.call(r)})),this.stage.destroy(n),this.stage=null,this.renderer.destroy(i),this.renderer=null},e._plugins=[],e}(),o=function(){function e(){}return e.init=function(e){var i=this;Object.defineProperty(this,"resizeTo",{set:function(e){globalThis.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(globalThis.addEventListener("resize",this.queueResize),this.resize())},get:function(){return this._resizeTo}}),this.queueResize=function(){i._resizeTo&&(i.cancelResize(),i._resizeId=requestAnimationFrame((function(){return i.resize()})))},this.cancelResize=function(){i._resizeId&&(cancelAnimationFrame(i._resizeId),i._resizeId=null)},this.resize=function(){if(i._resizeTo){var e,n;if(i.cancelResize(),i._resizeTo===globalThis.window)e=globalThis.innerWidth,n=globalThis.innerHeight;else{var r=i._resizeTo;e=r.clientWidth,n=r.clientHeight}i.renderer.resize(e,n)}},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null},e.destroy=function(){globalThis.removeEventListener("resize",this.queueResize),this.cancelResize(),this.cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null},e}();s.registerPlugin(o),i.Application=s}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,