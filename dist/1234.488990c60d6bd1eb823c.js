/*! For license information please see 1234.488990c60d6bd1eb823c.js.LICENSE.txt */
"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[1234],{1234:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var r=i(5868),n=i(2514),s=i(3663),o=i(932),h=i(19),a=i(8950),u=function(t,e){return u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},u(t,e)},_=new o.Point,c=new Uint16Array([0,1,2,0,2,3]),l=function(t){function e(e){var i=t.call(this)||this;return i._anchor=new o.ObservablePoint(i._onAnchorUpdate,i,e?e.defaultAnchor.x:0,e?e.defaultAnchor.y:0),i._texture=null,i._width=0,i._height=0,i._tint=null,i._tintRGB=null,i.tint=16777215,i.blendMode=r.BLEND_MODES.NORMAL,i._cachedTint=16777215,i.uvs=null,i.texture=e||n.Texture.EMPTY,i.vertexData=new Float32Array(8),i.vertexTrimmedData=null,i._transformID=-1,i._textureID=-1,i._transformTrimmedID=-1,i._textureTrimmedID=-1,i.indices=c,i.pluginName="batch",i.isSprite=!0,i._roundPixels=h.settings.ROUND_PIXELS,i}return function(t,e){function i(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}(e,t),e.prototype._onTextureUpdate=function(){this._textureID=-1,this._textureTrimmedID=-1,this._cachedTint=16777215,this._width&&(this.scale.x=a.sign(this.scale.x)*this._width/this._texture.orig.width),this._height&&(this.scale.y=a.sign(this.scale.y)*this._height/this._texture.orig.height)},e.prototype._onAnchorUpdate=function(){this._transformID=-1,this._transformTrimmedID=-1},e.prototype.calculateVertices=function(){var t=this._texture;if(this._transformID!==this.transform._worldID||this._textureID!==t._updateID){this._textureID!==t._updateID&&(this.uvs=this._texture._uvs.uvsFloat32),this._transformID=this.transform._worldID,this._textureID=t._updateID;var e=this.transform.worldTransform,i=e.a,r=e.b,n=e.c,s=e.d,o=e.tx,a=e.ty,u=this.vertexData,_=t.trim,c=t.orig,l=this._anchor,d=0,x=0,f=0,p=0;if(_?(d=(x=_.x-l._x*c.width)+_.width,f=(p=_.y-l._y*c.height)+_.height):(d=(x=-l._x*c.width)+c.width,f=(p=-l._y*c.height)+c.height),u[0]=i*x+n*p+o,u[1]=s*p+r*x+a,u[2]=i*d+n*p+o,u[3]=s*p+r*d+a,u[4]=i*d+n*f+o,u[5]=s*f+r*d+a,u[6]=i*x+n*f+o,u[7]=s*f+r*x+a,this._roundPixels)for(var g=h.settings.RESOLUTION,m=0;m<u.length;++m)u[m]=Math.round((u[m]*g|0)/g)}},e.prototype.calculateTrimmedVertices=function(){if(this.vertexTrimmedData){if(this._transformTrimmedID===this.transform._worldID&&this._textureTrimmedID===this._texture._updateID)return}else this.vertexTrimmedData=new Float32Array(8);this._transformTrimmedID=this.transform._worldID,this._textureTrimmedID=this._texture._updateID;var t=this._texture,e=this.vertexTrimmedData,i=t.orig,r=this._anchor,n=this.transform.worldTransform,s=n.a,o=n.b,h=n.c,a=n.d,u=n.tx,_=n.ty,c=-r._x*i.width,l=c+i.width,d=-r._y*i.height,x=d+i.height;e[0]=s*c+h*d+u,e[1]=a*d+o*c+_,e[2]=s*l+h*d+u,e[3]=a*d+o*l+_,e[4]=s*l+h*x+u,e[5]=a*x+o*l+_,e[6]=s*c+h*x+u,e[7]=a*x+o*c+_},e.prototype._render=function(t){this.calculateVertices(),t.batch.setObjectRenderer(t.plugins[this.pluginName]),t.plugins[this.pluginName].render(this)},e.prototype._calculateBounds=function(){var t=this._texture.trim,e=this._texture.orig;!t||t.width===e.width&&t.height===e.height?(this.calculateVertices(),this._bounds.addQuad(this.vertexData)):(this.calculateTrimmedVertices(),this._bounds.addQuad(this.vertexTrimmedData))},e.prototype.getLocalBounds=function(e){return 0===this.children.length?(this._localBounds||(this._localBounds=new s.Bounds),this._localBounds.minX=this._texture.orig.width*-this._anchor._x,this._localBounds.minY=this._texture.orig.height*-this._anchor._y,this._localBounds.maxX=this._texture.orig.width*(1-this._anchor._x),this._localBounds.maxY=this._texture.orig.height*(1-this._anchor._y),e||(this._localBoundsRect||(this._localBoundsRect=new o.Rectangle),e=this._localBoundsRect),this._localBounds.getRectangle(e)):t.prototype.getLocalBounds.call(this,e)},e.prototype.containsPoint=function(t){this.worldTransform.applyInverse(t,_);var e=this._texture.orig.width,i=this._texture.orig.height,r=-e*this.anchor.x,n=0;return _.x>=r&&_.x<r+e&&(n=-i*this.anchor.y,_.y>=n&&_.y<n+i)},e.prototype.destroy=function(e){if(t.prototype.destroy.call(this,e),this._texture.off("update",this._onTextureUpdate,this),this._anchor=null,"boolean"==typeof e?e:e&&e.texture){var i="boolean"==typeof e?e:e&&e.baseTexture;this._texture.destroy(!!i)}this._texture=null},e.from=function(t,i){return new e(t instanceof n.Texture?t:n.Texture.from(t,i))},Object.defineProperty(e.prototype,"roundPixels",{get:function(){return this._roundPixels},set:function(t){this._roundPixels!==t&&(this._transformID=-1),this._roundPixels=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return Math.abs(this.scale.x)*this._texture.orig.width},set:function(t){var e=a.sign(this.scale.x)||1;this.scale.x=e*t/this._texture.orig.width,this._width=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return Math.abs(this.scale.y)*this._texture.orig.height},set:function(t){var e=a.sign(this.scale.y)||1;this.scale.y=e*t/this._texture.orig.height,this._height=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"anchor",{get:function(){return this._anchor},set:function(t){this._anchor.copyFrom(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tint",{get:function(){return this._tint},set:function(t){this._tint=t,this._tintRGB=(t>>16)+(65280&t)+((255&t)<<16)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"texture",{get:function(){return this._texture},set:function(t){this._texture!==t&&(this._texture&&this._texture.off("update",this._onTextureUpdate,this),this._texture=t||n.Texture.EMPTY,this._cachedTint=16777215,this._textureID=-1,this._textureTrimmedID=-1,t&&(t.baseTexture.valid?this._onTextureUpdate():t.once("update",this._onTextureUpdate,this)))},enumerable:!1,configurable:!0}),e}(s.Container);e.Sprite=l}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,