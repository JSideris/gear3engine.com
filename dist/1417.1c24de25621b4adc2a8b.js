/*! For license information please see 1417.1c24de25621b4adc2a8b.js.LICENSE.txt */
"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[1417],{1417:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var s=r(932),a=r(2514),o=r(8950),i=r(2755),n=function(){function e(e,t,r){void 0===r&&(r=null),this._texture=e instanceof a.Texture?e:null,this.baseTexture=e instanceof a.BaseTexture?e:this._texture.baseTexture,this.textures={},this.animations={},this.data=t;var s=this.baseTexture.resource;this.resolution=this._updateResolution(r||(s?s.url:null)),this._frames=this.data.frames,this._frameKeys=Object.keys(this._frames),this._batchIndex=0,this._callback=null}return e.prototype._updateResolution=function(e){void 0===e&&(e=null);var t=this.data.meta.scale,r=o.getResolutionOfUrl(e,null);return null===r&&(r=void 0!==t?parseFloat(t):1),1!==r&&this.baseTexture.setResolution(r),r},e.prototype.parse=function(t){this._batchIndex=0,this._callback=t,this._frameKeys.length<=e.BATCH_SIZE?(this._processFrames(0),this._processAnimations(),this._parseComplete()):this._nextBatch()},e.prototype._processFrames=function(t){for(var r=t,o=e.BATCH_SIZE;r-t<o&&r<this._frameKeys.length;){var i=this._frameKeys[r],n=this._frames[i],u=n.frame;if(u){var l,h=null,c=!1!==n.trimmed&&n.sourceSize?n.sourceSize:n.frame,f=new s.Rectangle(0,0,Math.floor(c.w)/this.resolution,Math.floor(c.h)/this.resolution);l=n.rotated?new s.Rectangle(Math.floor(u.x)/this.resolution,Math.floor(u.y)/this.resolution,Math.floor(u.h)/this.resolution,Math.floor(u.w)/this.resolution):new s.Rectangle(Math.floor(u.x)/this.resolution,Math.floor(u.y)/this.resolution,Math.floor(u.w)/this.resolution,Math.floor(u.h)/this.resolution),!1!==n.trimmed&&n.spriteSourceSize&&(h=new s.Rectangle(Math.floor(n.spriteSourceSize.x)/this.resolution,Math.floor(n.spriteSourceSize.y)/this.resolution,Math.floor(u.w)/this.resolution,Math.floor(u.h)/this.resolution)),this.textures[i]=new a.Texture(this.baseTexture,l,f,h,n.rotated?2:0,n.anchor),a.Texture.addToCache(this.textures[i],i)}r++}},e.prototype._processAnimations=function(){var e=this.data.animations||{};for(var t in e){this.animations[t]=[];for(var r=0;r<e[t].length;r++){var s=e[t][r];this.animations[t].push(this.textures[s])}}},e.prototype._parseComplete=function(){var e=this._callback;this._callback=null,this._batchIndex=0,e.call(this,this.textures)},e.prototype._nextBatch=function(){var t=this;this._processFrames(this._batchIndex*e.BATCH_SIZE),this._batchIndex++,setTimeout((function(){t._batchIndex*e.BATCH_SIZE<t._frameKeys.length?t._nextBatch():(t._processAnimations(),t._parseComplete())}),0)},e.prototype.destroy=function(e){var t;for(var r in void 0===e&&(e=!1),this.textures)this.textures[r].destroy();this._frames=null,this._frameKeys=null,this.data=null,this.textures=null,e&&(null===(t=this._texture)||void 0===t||t.destroy(),this.baseTexture.destroy()),this._texture=null,this.baseTexture=null},e.BATCH_SIZE=1e3,e}(),u=function(){function e(){}return e.use=function(t,r){var s,a,u=this,l=t.name+"_image";if(t.data&&t.type===i.LoaderResource.TYPE.JSON&&t.data.frames&&!u.resources[l]){var h=null===(a=null===(s=t.data)||void 0===s?void 0:s.meta)||void 0===a?void 0:a.related_multi_packs;if(Array.isArray(h))for(var c=function(e){if("string"!=typeof e)return"continue";var r=e.replace(".json",""),s=o.url.resolve(t.url.replace(u.baseUrl,""),e);if(u.resources[r]||Object.values(u.resources).some((function(e){return o.url.format(o.url.parse(e.url))===s})))return"continue";var a={crossOrigin:t.crossOrigin,loadType:i.LoaderResource.LOAD_TYPE.XHR,xhrType:i.LoaderResource.XHR_RESPONSE_TYPE.JSON,parentResource:t,metadata:t.metadata};u.add(r,s,a)},f=0,d=h;f<d.length;f++)c(d[f]);var p={crossOrigin:t.crossOrigin,metadata:t.metadata.imageMetadata,parentResource:t},_=e.getResourcePath(t,u.baseUrl);u.add(l,_,p,(function(e){if(e.error)r(e.error);else{var s=new n(e.texture,t.data,t.url);s.parse((function(){t.spritesheet=s,t.textures=s.textures,r()}))}}))}else r()},e.getResourcePath=function(e,t){return e.isDataUrl?e.data.meta.image:o.url.resolve(e.url.replace(t,""),e.data.meta.image)},e}();t.Spritesheet=n,t.SpritesheetLoader=u}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,