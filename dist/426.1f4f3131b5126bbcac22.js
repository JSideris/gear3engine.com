"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[426],{426:(t,e,i)=>{i.d(e,{TC:()=>H});var r,n,s=i(5307),h=i(4295),a=i(5323),o=i(7054),l=i(29);!function(t){t.MITER="miter",t.BEVEL="bevel",t.ROUND="round"}(r||(r={})),function(t){t.BUTT="butt",t.ROUND="round",t.SQUARE="square"}(n||(n={}));var u={adaptive:!0,maxLength:10,minSegments:8,maxSegments:2048,epsilon:1e-4,_segmentsCount:function(t,e){if(void 0===e&&(e=20),!this.adaptive||!t||isNaN(t))return e;var i=Math.ceil(t/this.maxLength);return i<this.minSegments?i=this.minSegments:i>this.maxSegments&&(i=this.maxSegments),i}},p=function(){function t(){this.color=16777215,this.alpha=1,this.texture=s.xE.WHITE,this.matrix=null,this.visible=!1,this.reset()}return t.prototype.clone=function(){var e=new t;return e.color=this.color,e.alpha=this.alpha,e.texture=this.texture,e.matrix=this.matrix,e.visible=this.visible,e},t.prototype.reset=function(){this.color=16777215,this.alpha=1,this.texture=s.xE.WHITE,this.matrix=null,this.visible=!1},t.prototype.destroy=function(){this.texture=null,this.matrix=null},t}(),c=function(t,e){return c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},c(t,e)};function f(t,e){function i(){this.constructor=t}c(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}var d={build:function(t){t.points=t.shape.points.slice()},triangulate:function(t,e){var i=t.points,r=t.holes,n=e.points,s=e.indices;if(i.length>=6){for(var h=[],o=0;o<r.length;o++){var l=r[o];h.push(i.length/2),i=i.concat(l.points)}var u=(0,a.earcut)(i,h,2);if(!u)return;var p=n.length/2;for(o=0;o<u.length;o+=3)s.push(u[o]+p),s.push(u[o+1]+p),s.push(u[o+2]+p);for(o=0;o<i.length;o++)n.push(i[o])}}},y={build:function(t){var e,i,r=t.shape,n=t.points,s=r.x,a=r.y;if(n.length=0,t.type===h.HS.CIRC)e=r.radius,i=r.radius;else{var o=t.shape;e=o.width,i=o.height}if(0!==e&&0!==i){var l=Math.floor(30*Math.sqrt(r.radius))||Math.floor(15*Math.sqrt(e+i));l/=2.3;for(var u=2*Math.PI/l,p=0;p<l-.5;p++)n.push(s+Math.sin(-u*p)*e,a+Math.cos(-u*p)*i);n.push(n[0],n[1])}},triangulate:function(t,e){var i=t.points,r=e.points,n=e.indices,s=r.length/2,h=s,a=t.shape,o=t.matrix,l=a.x,u=a.y;r.push(t.matrix?o.a*l+o.c*u+o.tx:l,t.matrix?o.b*l+o.d*u+o.ty:u);for(var p=0;p<i.length;p+=2)r.push(i[p],i[p+1]),n.push(s++,h,s)}};function g(t,e,i){return t+(e-t)*i}function v(t,e,i,r,n,s,h){void 0===h&&(h=[]);for(var a=h,o=0,l=0,u=0,p=0,c=0,f=0,d=0,y=0;d<=20;++d)o=g(t,i,y=d/20),l=g(e,r,y),u=g(i,n,y),p=g(r,s,y),c=g(o,u,y),f=g(l,p,y),a.push(c,f);return a}var b={build:function(t){var e=t.shape,i=t.points,r=e.x,n=e.y,s=e.width,h=e.height,a=Math.max(0,Math.min(e.radius,Math.min(s,h)/2));i.length=0,a?(v(r,n+a,r,n,r+a,n,i),v(r+s-a,n,r+s,n,r+s,n+a,i),v(r+s,n+h-a,r+s,n+h,r+s-a,n+h,i),v(r+a,n+h,r,n+h,r,n+h-a,i)):i.push(r,n,r+s,n,r+s,n+h,r,n+h)},triangulate:function(t,e){for(var i=t.points,r=e.points,n=e.indices,s=r.length/2,h=(0,a.earcut)(i,null,2),o=0,l=h.length;o<l;o+=3)n.push(h[o]+s),n.push(h[o+1]+s),n.push(h[o+2]+s);for(o=0,l=i.length;o<l;o++)r.push(i[o],i[++o])}};function m(t,e,i,r,n,s,h,a){var o,l;h?(o=r,l=-i):(o=-r,l=i);var u=t-i*n+o,p=e-r*n+l,c=t+i*s+o,f=e+r*s+l;return a.push(u,p),a.push(c,f),2}function x(t,e,i,r,n,s,h,a){var o=i-t,l=r-e,u=Math.atan2(o,l),p=Math.atan2(n-t,s-e);a&&u<p?u+=2*Math.PI:!a&&u>p&&(p+=2*Math.PI);var c=u,f=p-u,d=Math.abs(f),y=Math.sqrt(o*o+l*l),g=1+(15*d*Math.sqrt(y)/Math.PI>>0),v=f/g;if(c+=v,a){h.push(t,e),h.push(i,r);for(var b=1,m=c;b<g;b++,m+=v)h.push(t,e),h.push(t+Math.sin(m)*y,e+Math.cos(m)*y);h.push(t,e),h.push(n,s)}else{for(h.push(i,r),h.push(t,e),b=1,m=c;b<g;b++,m+=v)h.push(t+Math.sin(m)*y,e+Math.cos(m)*y),h.push(t,e);h.push(n,s),h.push(t,e)}return 2*g}function w(t,e){t.lineStyle.native?function(t,e){var i=0,r=t.shape,n=t.points||r.points,s=r.type!==h.HS.POLY||r.closeStroke;if(0!==n.length){var a=e.points,o=e.indices,l=n.length/2,u=a.length/2,p=u;for(a.push(n[0],n[1]),i=1;i<l;i++)a.push(n[2*i],n[2*i+1]),o.push(p,p+1),p++;s&&o.push(p,u)}}(t,e):function(t,e){var i=t.shape,s=t.points||i.points.slice(),a=e.closePointEps;if(0!==s.length){var o=t.lineStyle,l=new h.E9(s[0],s[1]),p=new h.E9(s[s.length-2],s[s.length-1]),c=i.type!==h.HS.POLY||i.closeStroke,f=Math.abs(l.x-p.x)<a&&Math.abs(l.y-p.y)<a;if(c){s=s.slice(),f&&(s.pop(),s.pop(),p.set(s[s.length-2],s[s.length-1]));var d=.5*(l.x+p.x),y=.5*(p.y+l.y);s.unshift(d,y),s.push(d,y)}var g=e.points,v=s.length/2,b=s.length,w=g.length/2,_=o.width/2,S=_*_,M=o.miterLimit*o.miterLimit,P=s[0],T=s[1],D=s[2],E=s[3],I=0,C=0,A=-(T-E),B=P-D,R=0,L=0,O=Math.sqrt(A*A+B*B);A/=O,B/=O,A*=_,B*=_;var U=o.alignment,j=2*(1-U),H=2*U;c||(o.cap===n.ROUND?b+=x(P-A*(j-H)*.5,T-B*(j-H)*.5,P-A*j,T-B*j,P+A*H,T+B*H,g,!0)+2:o.cap===n.SQUARE&&(b+=m(P,T,A,B,j,H,!0,g))),g.push(P-A*j,T-B*j),g.push(P+A*H,T+B*H);for(var F=1;F<v-1;++F){P=s[2*(F-1)],T=s[2*(F-1)+1],D=s[2*F],E=s[2*F+1],I=s[2*(F+1)],C=s[2*(F+1)+1],A=-(T-E),B=P-D,A/=O=Math.sqrt(A*A+B*B),B/=O,A*=_,B*=_,R=-(E-C),L=D-I,R/=O=Math.sqrt(R*R+L*L),L/=O,R*=_,L*=_;var N=D-P,k=T-E,z=D-I,q=C-E,Y=k*z-q*N,G=Y<0;if(Math.abs(Y)<.1)g.push(D-A*j,E-B*j),g.push(D+A*H,E+B*H);else{var V=(-A+P)*(-B+E)-(-A+D)*(-B+T),W=(-R+I)*(-L+E)-(-R+D)*(-L+C),Z=(N*W-z*V)/Y,X=(q*V-k*W)/Y,Q=(Z-D)*(Z-D)+(X-E)*(X-E),$=D+(Z-D)*j,J=E+(X-E)*j,K=D-(Z-D)*H,tt=E-(X-E)*H,et=G?j:H;Q<=Math.min(N*N+k*k,z*z+q*q)+et*et*S?o.join===r.BEVEL||Q/S>M?(G?(g.push($,J),g.push(D+A*H,E+B*H),g.push($,J),g.push(D+R*H,E+L*H)):(g.push(D-A*j,E-B*j),g.push(K,tt),g.push(D-R*j,E-L*j),g.push(K,tt)),b+=2):o.join===r.ROUND?G?(g.push($,J),g.push(D+A*H,E+B*H),b+=x(D,E,D+A*H,E+B*H,D+R*H,E+L*H,g,!0)+4,g.push($,J),g.push(D+R*H,E+L*H)):(g.push(D-A*j,E-B*j),g.push(K,tt),b+=x(D,E,D-A*j,E-B*j,D-R*j,E-L*j,g,!1)+4,g.push(D-R*j,E-L*j),g.push(K,tt)):(g.push($,J),g.push(K,tt)):(g.push(D-A*j,E-B*j),g.push(D+A*H,E+B*H),o.join===r.BEVEL||Q/S>M||(o.join===r.ROUND?b+=G?x(D,E,D+A*H,E+B*H,D+R*H,E+L*H,g,!0)+2:x(D,E,D-A*j,E-B*j,D-R*j,E-L*j,g,!1)+2:(G?(g.push(K,tt),g.push(K,tt)):(g.push($,J),g.push($,J)),b+=2)),g.push(D-R*j,E-L*j),g.push(D+R*H,E+L*H),b+=2)}}P=s[2*(v-2)],T=s[2*(v-2)+1],D=s[2*(v-1)],A=-(T-(E=s[2*(v-1)+1])),B=P-D,A/=O=Math.sqrt(A*A+B*B),B/=O,A*=_,B*=_,g.push(D-A*j,E-B*j),g.push(D+A*H,E+B*H),c||(o.cap===n.ROUND?b+=x(D-A*(j-H)*.5,E-B*(j-H)*.5,D-A*j,E-B*j,D+A*H,E+B*H,g,!1)+2:o.cap===n.SQUARE&&(b+=m(D,E,A,B,j,H,!1,g)));var it=e.indices,rt=u.epsilon*u.epsilon;for(F=w;F<b+w-2;++F)P=g[2*F],T=g[2*F+1],D=g[2*(F+1)],E=g[2*(F+1)+1],I=g[2*(F+2)],C=g[2*(F+2)+1],Math.abs(P*(E-C)+D*(C-T)+I*(T-E))<rt||it.push(F,F+1,F+2)}}(t,e)}var _,S=function(t){function e(e,i,r,n,s,a){void 0===a&&(a=0),s=s||n/2;for(var o=-1*Math.PI/2+a,l=2*r,u=h._b/l,p=[],c=0;c<l;c++){var f=c%2?s:n,d=c*u+o;p.push(e+f*Math.cos(d),i+f*Math.sin(d))}return t.call(this,p)||this}return f(e,t),e}(h.mg),M=function(){function t(){}return t.curveTo=function(t,e,i,r,n,s){var h=s[s.length-2],a=s[s.length-1]-e,o=h-t,l=r-e,u=i-t,p=Math.abs(a*u-o*l);if(p<1e-8||0===n)return s[s.length-2]===t&&s[s.length-1]===e||s.push(t,e),null;var c=a*a+o*o,f=l*l+u*u,d=a*l+o*u,y=n*Math.sqrt(c)/p,g=n*Math.sqrt(f)/p,v=y*d/c,b=g*d/f,m=y*u+g*o,x=y*l+g*a,w=o*(g+v),_=a*(g+v),S=u*(y+b),M=l*(y+b);return{cx:m+t,cy:x+e,radius:n,startAngle:Math.atan2(_-x,w-m),endAngle:Math.atan2(M-x,S-m),anticlockwise:o*l>u*a}},t.arc=function(t,e,i,r,n,s,a,o,l){for(var p=a-s,c=u._segmentsCount(Math.abs(p)*n,40*Math.ceil(Math.abs(p)/h._b)),f=p/(2*c),d=2*f,y=Math.cos(f),g=Math.sin(f),v=c-1,b=v%1/v,m=0;m<=v;++m){var x=f+s+d*(m+b*m),w=Math.cos(x),_=-Math.sin(x);l.push((y*w+g*_)*n+i,(y*-_+g*w)*n+r)}},t}(),P=function(){function t(){}return t.curveLength=function(t,e,i,r,n,s,h,a){for(var o=0,l=0,u=0,p=0,c=0,f=0,d=0,y=0,g=0,v=0,b=0,m=t,x=e,w=1;w<=10;++w)v=m-(y=(d=(f=(c=1-(l=w/10))*c)*c)*t+3*f*l*i+3*c*(u=l*l)*n+(p=u*l)*h),b=x-(g=d*e+3*f*l*r+3*c*u*s+p*a),m=y,x=g,o+=Math.sqrt(v*v+b*b);return o},t.curveTo=function(e,i,r,n,s,h,a){var o=a[a.length-2],l=a[a.length-1];a.length-=2;var p=u._segmentsCount(t.curveLength(o,l,e,i,r,n,s,h)),c=0,f=0,d=0,y=0,g=0;a.push(o,l);for(var v=1,b=0;v<=p;++v)d=(f=(c=1-(b=v/p))*c)*c,g=(y=b*b)*b,a.push(d*o+3*f*b*e+3*c*y*r+g*s,d*l+3*f*b*i+3*c*y*n+g*h)},t}(),T=function(){function t(){}return t.curveLength=function(t,e,i,r,n,s){var h=t-2*i+n,a=e-2*r+s,o=2*i-2*t,l=2*r-2*e,u=4*(h*h+a*a),p=4*(h*o+a*l),c=o*o+l*l,f=2*Math.sqrt(u+p+c),d=Math.sqrt(u),y=2*u*d,g=2*Math.sqrt(c),v=p/d;return(y*f+d*p*(f-g)+(4*c*u-p*p)*Math.log((2*d+v+f)/(v+g)))/(4*y)},t.curveTo=function(e,i,r,n,s){for(var h=s[s.length-2],a=s[s.length-1],o=u._segmentsCount(t.curveLength(h,a,e,i,r,n)),l=0,p=0,c=1;c<=o;++c){var f=c/o;l=h+(e-h)*f,p=a+(i-a)*f,s.push(l+(e+(r-e)*f-l)*f,p+(i+(n-i)*f-p)*f)}},t}(),D=function(){function t(){this.reset()}return t.prototype.begin=function(t,e,i){this.reset(),this.style=t,this.start=e,this.attribStart=i},t.prototype.end=function(t,e){this.attribSize=e-this.attribStart,this.size=t-this.start},t.prototype.reset=function(){this.style=null,this.size=0,this.start=0,this.attribStart=0,this.attribSize=0},t}(),E=((_={})[h.HS.POLY]=d,_[h.HS.CIRC]=y,_[h.HS.ELIP]=y,_[h.HS.RECT]={build:function(t){var e=t.shape,i=e.x,r=e.y,n=e.width,s=e.height,h=t.points;h.length=0,h.push(i,r,i+n,r,i+n,r+s,i,r+s)},triangulate:function(t,e){var i=t.points,r=e.points,n=r.length/2;r.push(i[0],i[1],i[2],i[3],i[6],i[7],i[4],i[5]),e.indices.push(n,n+1,n+2,n+1,n+2,n+3)}},_[h.HS.RREC]=b,_),I=[],C=[],A=function(){function t(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=null),void 0===r&&(r=null),this.shape=t,this.lineStyle=i,this.fillStyle=e,this.matrix=r,this.type=t.type,this.points=[],this.holes=[]}return t.prototype.clone=function(){return new t(this.shape,this.fillStyle,this.lineStyle,this.matrix)},t.prototype.destroy=function(){this.shape=null,this.holes.length=0,this.holes=null,this.points.length=0,this.points=null,this.lineStyle=null,this.fillStyle=null},t}(),B=new h.E9,R=new l.YZ,L=function(t){function e(){var e=t.call(this)||this;return e.uvsFloat32=null,e.indicesUint16=null,e.points=[],e.colors=[],e.uvs=[],e.indices=[],e.textureIds=[],e.graphicsData=[],e.dirty=0,e.batchDirty=-1,e.cacheDirty=-1,e.clearDirty=0,e.drawCalls=[],e.batches=[],e.shapeIndex=0,e._bounds=new l.YZ,e.boundsDirty=-1,e.boundsPadding=0,e.batchable=!1,e.indicesUint16=null,e.uvsFloat32=null,e.closePointEps=1e-4,e}return f(e,t),Object.defineProperty(e.prototype,"bounds",{get:function(){return this.boundsDirty!==this.dirty&&(this.boundsDirty=this.dirty,this.calculateBounds()),this._bounds},enumerable:!1,configurable:!0}),e.prototype.invalidate=function(){this.boundsDirty=-1,this.dirty++,this.batchDirty++,this.shapeIndex=0,this.points.length=0,this.colors.length=0,this.uvs.length=0,this.indices.length=0,this.textureIds.length=0;for(var t=0;t<this.drawCalls.length;t++)this.drawCalls[t].texArray.clear(),C.push(this.drawCalls[t]);for(this.drawCalls.length=0,t=0;t<this.batches.length;t++){var e=this.batches[t];e.reset(),I.push(e)}this.batches.length=0},e.prototype.clear=function(){return this.graphicsData.length>0&&(this.invalidate(),this.clearDirty++,this.graphicsData.length=0),this},e.prototype.drawShape=function(t,e,i,r){void 0===e&&(e=null),void 0===i&&(i=null),void 0===r&&(r=null);var n=new A(t,e,i,r);return this.graphicsData.push(n),this.dirty++,this},e.prototype.drawHole=function(t,e){if(void 0===e&&(e=null),!this.graphicsData.length)return null;var i=new A(t,null,null,e),r=this.graphicsData[this.graphicsData.length-1];return i.lineStyle=r.lineStyle,r.holes.push(i),this.dirty++,this},e.prototype.destroy=function(){t.prototype.destroy.call(this);for(var e=0;e<this.graphicsData.length;++e)this.graphicsData[e].destroy();this.points.length=0,this.points=null,this.colors.length=0,this.colors=null,this.uvs.length=0,this.uvs=null,this.indices.length=0,this.indices=null,this.indexBuffer.destroy(),this.indexBuffer=null,this.graphicsData.length=0,this.graphicsData=null,this.drawCalls.length=0,this.drawCalls=null,this.batches.length=0,this.batches=null,this._bounds=null},e.prototype.containsPoint=function(t){for(var e=this.graphicsData,i=0;i<e.length;++i){var r=e[i];if(r.fillStyle.visible&&r.shape&&(r.matrix?r.matrix.applyInverse(t,B):B.copyFrom(t),r.shape.contains(B.x,B.y))){var n=!1;if(r.holes)for(var s=0;s<r.holes.length;s++)if(r.holes[s].shape.contains(B.x,B.y)){n=!0;break}if(!n)return!0}}return!1},e.prototype.updateBatches=function(t){if(this.graphicsData.length){if(this.validateBatching()){this.cacheDirty=this.dirty;var e=this.uvs,i=this.graphicsData,r=null,n=null;this.batches.length>0&&(n=(r=this.batches[this.batches.length-1]).style);for(var s=this.shapeIndex;s<i.length;s++){this.shapeIndex++;var h=i[s],a=h.fillStyle,l=h.lineStyle;E[h.type].build(h),h.matrix&&this.transformPoints(h.points,h.matrix);for(var u=0;u<2;u++){var p=0===u?a:l;if(p.visible){var c=p.texture.baseTexture,f=this.indices.length,d=this.points.length/2;c.wrapMode=o.Nt.REPEAT,0===u?this.processFill(h):this.processLine(h);var y=this.points.length/2-d;0!==y&&(r&&!this._compareStyles(n,p)&&(r.end(f,d),r=null),r||((r=I.pop()||new D).begin(p,f,d),this.batches.push(r),n=p),this.addUvs(this.points,e,p.texture,d,y,p.matrix))}}}var g=this.indices.length,v=this.points.length/2;if(r&&r.end(g,v),0!==this.batches.length){if(this.indicesUint16&&this.indices.length===this.indicesUint16.length)this.indicesUint16.set(this.indices);else{var b=v>65535&&t;this.indicesUint16=b?new Uint32Array(this.indices):new Uint16Array(this.indices)}this.batchable=this.isBatchable(),this.batchable?this.packBatches():this.buildDrawCalls()}else this.batchable=!0}}else this.batchable=!0},e.prototype._compareStyles=function(t,e){return!(!t||!e)&&t.texture.baseTexture===e.texture.baseTexture&&t.color+t.alpha===e.color+e.alpha&&!!t.native==!!e.native},e.prototype.validateBatching=function(){if(this.dirty===this.cacheDirty||!this.graphicsData.length)return!1;for(var t=0,e=this.graphicsData.length;t<e;t++){var i=this.graphicsData[t],r=i.fillStyle,n=i.lineStyle;if(r&&!r.texture.baseTexture.valid)return!1;if(n&&!n.texture.baseTexture.valid)return!1}return!0},e.prototype.packBatches=function(){this.batchDirty++,this.uvsFloat32=new Float32Array(this.uvs);for(var t=this.batches,e=0,i=t.length;e<i;e++)for(var r=t[e],n=0;n<r.size;n++){var s=r.start+n;this.indicesUint16[s]=this.indicesUint16[s]-r.attribStart}},e.prototype.isBatchable=function(){if(this.points.length>131070)return!1;for(var t=this.batches,i=0;i<t.length;i++)if(t[i].style.native)return!1;return this.points.length<2*e.BATCHABLE_SIZE},e.prototype.buildDrawCalls=function(){for(var t=++s.VL._globalBatch,e=0;e<this.drawCalls.length;e++)this.drawCalls[e].texArray.clear(),C.push(this.drawCalls[e]);this.drawCalls.length=0;var i=this.colors,r=this.textureIds,n=C.pop();n||((n=new s.a$).texArray=new s.Ie),n.texArray.count=0,n.start=0,n.size=0,n.type=o.lg.TRIANGLES;var h=0,a=null,l=0,u=!1,p=o.lg.TRIANGLES,c=0;for(this.drawCalls.push(n),e=0;e<this.batches.length;e++){var f=this.batches[e],d=f.style,y=d.texture.baseTexture;u!==!!d.native&&(p=(u=!!d.native)?o.lg.LINES:o.lg.TRIANGLES,a=null,h=8,t++),a!==y&&(a=y,y._batchEnabled!==t&&(8===h&&(t++,h=0,n.size>0&&((n=C.pop())||((n=new s.a$).texArray=new s.Ie),this.drawCalls.push(n)),n.start=c,n.size=0,n.texArray.count=0,n.type=p),y.touched=1,y._batchEnabled=t,y._batchLocation=h,y.wrapMode=10497,n.texArray.elements[n.texArray.count++]=y,h++)),n.size+=f.size,c+=f.size,l=y._batchLocation,this.addColors(i,d.color,d.alpha,f.attribSize,f.attribStart),this.addTextureIds(r,l,f.attribSize,f.attribStart)}s.VL._globalBatch=t,this.packAttributes()},e.prototype.packAttributes=function(){for(var t=this.points,e=this.uvs,i=this.colors,r=this.textureIds,n=new ArrayBuffer(3*t.length*4),s=new Float32Array(n),h=new Uint32Array(n),a=0,o=0;o<t.length/2;o++)s[a++]=t[2*o],s[a++]=t[2*o+1],s[a++]=e[2*o],s[a++]=e[2*o+1],h[a++]=i[o],s[a++]=r[o];this._buffer.update(n),this._indexBuffer.update(this.indicesUint16)},e.prototype.processFill=function(t){t.holes.length?(this.processHoles(t.holes),d.triangulate(t,this)):E[t.type].triangulate(t,this)},e.prototype.processLine=function(t){w(t,this);for(var e=0;e<t.holes.length;e++)w(t.holes[e],this)},e.prototype.processHoles=function(t){for(var e=0;e<t.length;e++){var i=t[e];E[i.type].build(i),i.matrix&&this.transformPoints(i.points,i.matrix)}},e.prototype.calculateBounds=function(){var t=this._bounds,e=R,i=h.y3.IDENTITY;this._bounds.clear(),e.clear();for(var r=0;r<this.graphicsData.length;r++){var n=this.graphicsData[r],s=n.shape,a=n.type,o=n.lineStyle,l=n.matrix||h.y3.IDENTITY,u=0;if(o&&o.visible){var p=o.alignment;u=o.width,a===h.HS.POLY?u*=.5+Math.abs(.5-p):u*=Math.max(0,p)}if(i!==l&&(e.isEmpty()||(t.addBoundsMatrix(e,i),e.clear()),i=l),a===h.HS.RECT||a===h.HS.RREC){var c=s;e.addFramePad(c.x,c.y,c.x+c.width,c.y+c.height,u,u)}else if(a===h.HS.CIRC){var f=s;e.addFramePad(f.x,f.y,f.x,f.y,f.radius+u,f.radius+u)}else if(a===h.HS.ELIP){var d=s;e.addFramePad(d.x,d.y,d.x,d.y,d.width+u,d.height+u)}else{var y=s;t.addVerticesMatrix(i,y.points,0,y.points.length,u,u)}}e.isEmpty()||t.addBoundsMatrix(e,i),t.pad(this.boundsPadding,this.boundsPadding)},e.prototype.transformPoints=function(t,e){for(var i=0;i<t.length/2;i++){var r=t[2*i],n=t[2*i+1];t[2*i]=e.a*r+e.c*n+e.tx,t[2*i+1]=e.b*r+e.d*n+e.ty}},e.prototype.addColors=function(t,e,i,r,n){void 0===n&&(n=0);var s=(e>>16)+(65280&e)+((255&e)<<16),h=(0,a.premultiplyTint)(s,i);t.length=Math.max(t.length,n+r);for(var o=0;o<r;o++)t[n+o]=h},e.prototype.addTextureIds=function(t,e,i,r){void 0===r&&(r=0),t.length=Math.max(t.length,r+i);for(var n=0;n<i;n++)t[r+n]=e},e.prototype.addUvs=function(t,e,i,r,n,s){void 0===s&&(s=null);for(var h=0,a=e.length,o=i.frame;h<n;){var l=t[2*(r+h)],u=t[2*(r+h)+1];if(s){var p=s.a*l+s.c*u+s.tx;u=s.b*l+s.d*u+s.ty,l=p}h++,e.push(l/o.width,u/o.height)}var c=i.baseTexture;(o.width<c.width||o.height<c.height)&&this.adjustUvs(e,i,a,n)},e.prototype.adjustUvs=function(t,e,i,r){for(var n=e.baseTexture,s=1e-6,h=i+2*r,a=e.frame,o=a.width/n.width,l=a.height/n.height,u=a.x/a.width,p=a.y/a.height,c=Math.floor(t[i]+s),f=Math.floor(t[i+1]+s),d=i+2;d<h;d+=2)c=Math.min(c,Math.floor(t[d]+s)),f=Math.min(f,Math.floor(t[d+1]+s));for(u-=c,p-=f,d=i;d<h;d+=2)t[d]=(t[d]+u)*o,t[d+1]=(t[d+1]+p)*l},e.BATCHABLE_SIZE=100,e}(s.JZ),O=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.width=0,e.alignment=.5,e.native=!1,e.cap=n.BUTT,e.join=r.MITER,e.miterLimit=10,e}return f(e,t),e.prototype.clone=function(){var t=new e;return t.color=this.color,t.alpha=this.alpha,t.texture=this.texture,t.matrix=this.matrix,t.visible=this.visible,t.width=this.width,t.alignment=this.alignment,t.native=this.native,t.cap=this.cap,t.join=this.join,t.miterLimit=this.miterLimit,t},e.prototype.reset=function(){t.prototype.reset.call(this),this.color=0,this.alignment=.5,this.width=0,this.native=!1},e}(p),U=new Float32Array(3),j={},H=function(t){function e(e){void 0===e&&(e=null);var i=t.call(this)||this;return i._geometry=e||new L,i._geometry.refCount++,i.shader=null,i.state=s.ZM.for2d(),i._fillStyle=new p,i._lineStyle=new O,i._matrix=null,i._holeMode=!1,i.currentPath=null,i.batches=[],i.batchTint=-1,i.batchDirty=-1,i.vertexData=null,i.pluginName="batch",i._transformID=-1,i.tint=16777215,i.blendMode=o.T$.NORMAL,i}return f(e,t),Object.defineProperty(e.prototype,"geometry",{get:function(){return this._geometry},enumerable:!1,configurable:!0}),e.prototype.clone=function(){return this.finishPoly(),new e(this._geometry)},Object.defineProperty(e.prototype,"blendMode",{get:function(){return this.state.blendMode},set:function(t){this.state.blendMode=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"tint",{get:function(){return this._tint},set:function(t){this._tint=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"fill",{get:function(){return this._fillStyle},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"line",{get:function(){return this._lineStyle},enumerable:!1,configurable:!0}),e.prototype.lineStyle=function(t){if(void 0===t&&(t=null),"number"==typeof t){var e=arguments;t={width:e[0]||0,color:e[1]||0,alpha:void 0!==e[2]?e[2]:1,alignment:void 0!==e[3]?e[3]:.5,native:!!e[4]}}return this.lineTextureStyle(t)},e.prototype.lineTextureStyle=function(t){if("number"==typeof t){(0,a.deprecation)("v5.2.0","Please use object-based options for Graphics#lineTextureStyle");var e=arguments,i=e[0],h=e[1],o=e[2],l=e[3],u=e[4],p=e[5],c=e[6];t={width:i,texture:h,color:o,alpha:l,matrix:u,alignment:p,native:c},Object.keys(t).forEach((function(e){return void 0===t[e]&&delete t[e]}))}t=Object.assign({width:0,texture:s.xE.WHITE,color:t&&t.texture?16777215:0,alpha:1,matrix:null,alignment:.5,native:!1,cap:n.BUTT,join:r.MITER,miterLimit:10},t),this.currentPath&&this.startPoly();var f=t.width>0&&t.alpha>0;return f?(t.matrix&&(t.matrix=t.matrix.clone(),t.matrix.invert()),Object.assign(this._lineStyle,{visible:f},t)):this._lineStyle.reset(),this},e.prototype.startPoly=function(){if(this.currentPath){var t=this.currentPath.points,e=this.currentPath.points.length;e>2&&(this.drawShape(this.currentPath),this.currentPath=new h.mg,this.currentPath.closeStroke=!1,this.currentPath.points.push(t[e-2],t[e-1]))}else this.currentPath=new h.mg,this.currentPath.closeStroke=!1},e.prototype.finishPoly=function(){this.currentPath&&(this.currentPath.points.length>2?(this.drawShape(this.currentPath),this.currentPath=null):this.currentPath.points.length=0)},e.prototype.moveTo=function(t,e){return this.startPoly(),this.currentPath.points[0]=t,this.currentPath.points[1]=e,this},e.prototype.lineTo=function(t,e){this.currentPath||this.moveTo(0,0);var i=this.currentPath.points,r=i[i.length-2],n=i[i.length-1];return r===t&&n===e||i.push(t,e),this},e.prototype._initCurve=function(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.currentPath?0===this.currentPath.points.length&&(this.currentPath.points=[t,e]):this.moveTo(t,e)},e.prototype.quadraticCurveTo=function(t,e,i,r){this._initCurve();var n=this.currentPath.points;return 0===n.length&&this.moveTo(0,0),T.curveTo(t,e,i,r,n),this},e.prototype.bezierCurveTo=function(t,e,i,r,n,s){return this._initCurve(),P.curveTo(t,e,i,r,n,s,this.currentPath.points),this},e.prototype.arcTo=function(t,e,i,r,n){this._initCurve(t,e);var s=this.currentPath.points,h=M.curveTo(t,e,i,r,n,s);if(h){var a=h.cx,o=h.cy,l=h.radius,u=h.startAngle,p=h.endAngle,c=h.anticlockwise;this.arc(a,o,l,u,p,c)}return this},e.prototype.arc=function(t,e,i,r,n,s){if(void 0===s&&(s=!1),r===n)return this;if(!s&&n<=r?n+=h._b:s&&r<=n&&(r+=h._b),0==n-r)return this;var a=t+Math.cos(r)*i,o=e+Math.sin(r)*i,l=this._geometry.closePointEps,u=this.currentPath?this.currentPath.points:null;if(u){var p=Math.abs(u[u.length-2]-a),c=Math.abs(u[u.length-1]-o);p<l&&c<l||u.push(a,o)}else this.moveTo(a,o),u=this.currentPath.points;return M.arc(a,o,t,e,i,r,n,s,u),this},e.prototype.beginFill=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=1),this.beginTextureFill({texture:s.xE.WHITE,color:t,alpha:e})},e.prototype.beginTextureFill=function(t){if(t instanceof s.xE){(0,a.deprecation)("v5.2.0","Please use object-based options for Graphics#beginTextureFill");var e=arguments,i=e[0],r=e[1],n=e[2],h=e[3];t={texture:i,color:r,alpha:n,matrix:h},Object.keys(t).forEach((function(e){return void 0===t[e]&&delete t[e]}))}t=Object.assign({texture:s.xE.WHITE,color:16777215,alpha:1,matrix:null},t),this.currentPath&&this.startPoly();var o=t.alpha>0;return o?(t.matrix&&(t.matrix=t.matrix.clone(),t.matrix.invert()),Object.assign(this._fillStyle,{visible:o},t)):this._fillStyle.reset(),this},e.prototype.endFill=function(){return this.finishPoly(),this._fillStyle.reset(),this},e.prototype.drawRect=function(t,e,i,r){return this.drawShape(new h.Ae(t,e,i,r))},e.prototype.drawRoundedRect=function(t,e,i,r,n){return this.drawShape(new h.c9(t,e,i,r,n))},e.prototype.drawCircle=function(t,e,i){return this.drawShape(new h.Cd(t,e,i))},e.prototype.drawEllipse=function(t,e,i,r){return this.drawShape(new h.Pj(t,e,i,r))},e.prototype.drawPolygon=function(){for(var t,e=arguments,i=[],r=0;r<arguments.length;r++)i[r]=e[r];var n=!0,s=i[0];s.points?(n=s.closeStroke,t=s.points):t=Array.isArray(i[0])?i[0]:i;var a=new h.mg(t);return a.closeStroke=n,this.drawShape(a),this},e.prototype.drawShape=function(t){return this._holeMode?this._geometry.drawHole(t,this._matrix):this._geometry.drawShape(t,this._fillStyle.clone(),this._lineStyle.clone(),this._matrix),this},e.prototype.drawStar=function(t,e,i,r,n,s){return void 0===s&&(s=0),this.drawPolygon(new S(t,e,i,r,n,s))},e.prototype.clear=function(){return this._geometry.clear(),this._lineStyle.reset(),this._fillStyle.reset(),this._boundsID++,this._matrix=null,this._holeMode=!1,this.currentPath=null,this},e.prototype.isFastRect=function(){var t=this._geometry.graphicsData;return 1===t.length&&t[0].shape.type===h.HS.RECT&&!(t[0].lineStyle.visible&&t[0].lineStyle.width)},e.prototype._render=function(t){this.finishPoly();var e=this._geometry,i=t.context.supports.uint32Indices;e.updateBatches(i),e.batchable?(this.batchDirty!==e.batchDirty&&this._populateBatches(),this._renderBatched(t)):(t.batch.flush(),this._renderDirect(t))},e.prototype._populateBatches=function(){var t=this._geometry,e=this.blendMode,i=t.batches.length;this.batchTint=-1,this._transformID=-1,this.batchDirty=t.batchDirty,this.batches.length=i,this.vertexData=new Float32Array(t.points);for(var r=0;r<i;r++){var n=t.batches[r],s=n.style.color,h=new Float32Array(this.vertexData.buffer,4*n.attribStart*2,2*n.attribSize),o=new Float32Array(t.uvsFloat32.buffer,4*n.attribStart*2,2*n.attribSize),l={vertexData:h,blendMode:e,indices:new Uint16Array(t.indicesUint16.buffer,2*n.start,n.size),uvs:o,_batchRGB:(0,a.hex2rgb)(s),_tintRGB:s,_texture:n.style.texture,alpha:n.style.alpha,worldAlpha:1};this.batches[r]=l}},e.prototype._renderBatched=function(t){if(this.batches.length){t.batch.setObjectRenderer(t.plugins[this.pluginName]),this.calculateVertices(),this.calculateTints();for(var e=0,i=this.batches.length;e<i;e++){var r=this.batches[e];r.worldAlpha=this.worldAlpha*r.alpha,t.plugins[this.pluginName].render(r)}}},e.prototype._renderDirect=function(t){var e=this._resolveDirectShader(t),i=this._geometry,r=this.tint,n=this.worldAlpha,s=e.uniforms,h=i.drawCalls;s.translationMatrix=this.transform.worldTransform,s.tint[0]=(r>>16&255)/255*n,s.tint[1]=(r>>8&255)/255*n,s.tint[2]=(255&r)/255*n,s.tint[3]=n,t.shader.bind(e),t.geometry.bind(i,e),t.state.set(this.state);for(var a=0,o=h.length;a<o;a++)this._renderDrawCallDirect(t,i.drawCalls[a])},e.prototype._renderDrawCallDirect=function(t,e){for(var i=e.texArray,r=e.type,n=e.size,s=e.start,h=i.count,a=0;a<h;a++)t.texture.bind(i.elements[a],a);t.geometry.draw(r,n,s)},e.prototype._resolveDirectShader=function(t){var e=this.shader,i=this.pluginName;if(!e){if(!j[i]){for(var r=t.plugins.batch.MAX_TEXTURES,n=new Int32Array(r),a=0;a<r;a++)n[a]=a;var o={tint:new Float32Array([1,1,1,1]),translationMatrix:new h.y3,default:s.oo.from({uSamplers:n},!0)},l=t.plugins[i]._shader.program;j[i]=new s.ex(l,o)}e=j[i]}return e},e.prototype._calculateBounds=function(){this.finishPoly();var t=this._geometry;if(t.graphicsData.length){var e=t.bounds,i=e.minX,r=e.minY,n=e.maxX,s=e.maxY;this._bounds.addFrame(this.transform,i,r,n,s)}},e.prototype.containsPoint=function(t){return this.worldTransform.applyInverse(t,e._TEMP_POINT),this._geometry.containsPoint(e._TEMP_POINT)},e.prototype.calculateTints=function(){if(this.batchTint!==this.tint){this.batchTint=this.tint;for(var t=(0,a.hex2rgb)(this.tint,U),e=0;e<this.batches.length;e++){var i=this.batches[e],r=i._batchRGB,n=(t[0]*r[0]*255<<16)+(t[1]*r[1]*255<<8)+(0|t[2]*r[2]*255);i._tintRGB=(n>>16)+(65280&n)+((255&n)<<16)}}},e.prototype.calculateVertices=function(){var t=this.transform._worldID;if(this._transformID!==t){this._transformID=t;for(var e=this.transform.worldTransform,i=e.a,r=e.b,n=e.c,s=e.d,h=e.tx,a=e.ty,o=this._geometry.points,l=this.vertexData,u=0,p=0;p<o.length;p+=2){var c=o[p],f=o[p+1];l[u++]=i*c+n*f+h,l[u++]=s*f+r*c+a}}},e.prototype.closePath=function(){var t=this.currentPath;return t&&(t.closeStroke=!0),this},e.prototype.setMatrix=function(t){return this._matrix=t,this},e.prototype.beginHole=function(){return this.finishPoly(),this._holeMode=!0,this},e.prototype.endHole=function(){return this.finishPoly(),this._holeMode=!1,this},e.prototype.destroy=function(e){this._geometry.refCount--,0===this._geometry.refCount&&this._geometry.dispose(),this._matrix=null,this.currentPath=null,this._lineStyle.destroy(),this._lineStyle=null,this._fillStyle.destroy(),this._fillStyle=null,this._geometry=null,this.shader=null,this.vertexData=null,this.batches.length=0,this.batches=null,t.prototype.destroy.call(this,e)},e._TEMP_POINT=new h.E9,e}(l.W2)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,