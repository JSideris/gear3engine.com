"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[4587],{4587:(e,r,t)=>{t.d(r,{Q:()=>s});var n=t(5323),a=t(4295),i=t(5307),o=new a.Ae,s=function(){function e(e){this.renderer=e,e.extract=this}return e.prototype.image=function(e,r,t){var n=new Image;return n.src=this.base64(e,r,t),n},e.prototype.base64=function(e,r,t){return this.canvas(e).toDataURL(r,t)},e.prototype.canvas=function(r){var t,a,s,h=this.renderer,d=!1,u=!1;r&&(r instanceof i.TI?s=r:(s=this.renderer.generateTexture(r),u=!0)),s?(t=s.baseTexture.resolution,a=s.frame,d=!1,h.renderTexture.bind(s)):(t=this.renderer.resolution,d=!0,(a=o).width=this.renderer.width,a.height=this.renderer.height,h.renderTexture.bind(null));var c=Math.floor(a.width*t+1e-4),g=Math.floor(a.height*t+1e-4),l=new n.CanvasRenderTarget(c,g,1),v=new Uint8Array(4*c*g),x=h.gl;x.readPixels(a.x*t,a.y*t,c,g,x.RGBA,x.UNSIGNED_BYTE,v);var f=l.context.getImageData(0,0,c,g);if(e.arrayPostDivide(v,f.data),l.context.putImageData(f,0,0),d){var w=new n.CanvasRenderTarget(l.width,l.height,1);w.context.scale(1,-1),w.context.drawImage(l.canvas,0,-g),l.destroy(),l=w}return u&&s.destroy(!0),l.canvas},e.prototype.pixels=function(r){var t,n,a,s=this.renderer,h=!1;r&&(r instanceof i.TI?a=r:(a=this.renderer.generateTexture(r),h=!0)),a?(t=a.baseTexture.resolution,n=a.frame,s.renderTexture.bind(a)):(t=s.resolution,(n=o).width=s.width,n.height=s.height,s.renderTexture.bind(null));var d=n.width*t,u=n.height*t,c=new Uint8Array(4*d*u),g=s.gl;return g.readPixels(n.x*t,n.y*t,d,u,g.RGBA,g.UNSIGNED_BYTE,c),h&&a.destroy(!0),e.arrayPostDivide(c,c),c},e.prototype.destroy=function(){this.renderer.extract=null,this.renderer=null},e.arrayPostDivide=function(e,r){for(var t=0;t<e.length;t+=4){var n=r[t+3]=e[t+3];0!==n?(r[t]=Math.round(Math.min(255*e[t]/n,255)),r[t+1]=Math.round(Math.min(255*e[t+1]/n,255)),r[t+2]=Math.round(Math.min(255*e[t+2]/n,255))):(r[t]=e[t],r[t+1]=e[t+1],r[t+2]=e[t+2])}},e}()}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,