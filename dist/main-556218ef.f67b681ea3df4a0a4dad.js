"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[7186],{6690:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(i(2136)),n=s(i(8823));t.default=class{constructor(e){this.nextObjectId=1,this.toDestroy=[],this.registrationStack=[],this.registrationStackSizeWarning=100,this._playing=!1,this.gi=e}register(e){if(!e)throw new Error("Cannot register a null object.");let t=this.registrationStack.pop();if(!t)throw new Error("Registration happened for a GameObject but there was nothing on the registration stack! Most likely cause is trying to instantiate the GameObject directly outside of GameObjectFactory.make.");e._constructor=t.t,e._typeId=t.t._typeId,e.id=e.masterId=this.getNextId(),t.setters&&t.setters(e),this.gi.allGameObjectsById[e.id]&&console.warn(`${n.default.typeName(e._constructor)} of ID ${e.id} is already loaded.`,this.gi.allGameObjectsById[e.id],e),this.gi.allGameObjectsById[e.id]=e}make(e,t){this._playing||console.warn(`An object (${e.name}) was created while the game was in an idle state, which is discouraged. Call GameInstance.play() before creating GameObjects.`),this.registrationStack.push({setters:t,t:e}),this.registrationStack.length>this.registrationStackSizeWarning&&(console.warn(`Registration stack size is ${this.registrationStack.length}. This may indicate a bug.`),this.registrationStackSizeWarning*=2),r.default.gi=this.gi;var i=new e;if(!i.alive)return i;for(let t in e.g3eExtensions)i.g3eExtensions[t]=this.make(e.g3eExtensions[t],(e=>{e.target=i,e.extensionName=t}));return i.initialize(),this.gi.trigger("addObject",i),i}destroy(e,t){this.gi.fixedUpdateInProgress?this.toDestroy.push({o:e,dt:t}):this._destroy(e,t)}flushDestructionQueue(){for(let e=0;e<this.toDestroy.length;e++)this._destroy(this.toDestroy[e].o,this.toDestroy[e].dt);this.toDestroy.length=0}_destroy(e,t){if(!e.alive)throw new Error("Cannot destroy object that isn't alive.");for(let i in e.g3eExtensions)this.destroy(e.g3eExtensions[i],t);e.g3eExtensions={},e.onDestroy&&e.onDestroy(t),e._alive=!1,r.default.removeAllReferences(e),e.masterId&&this.gi.remoteGameObjectsById[e.masterId]===e&&delete this.gi.remoteGameObjectsById[e.masterId],e.id&&this.gi.allGameObjectsById[e.id]===e?(delete this.gi.allGameObjectsById[e.id],e.masterId&&delete this.gi.remoteGameObjectsById[e.masterId]):console.warn(`The deleted object with ID ${e.id} did not match what was in gameInstance's allGameObjectsById. This is a bug.`),Object.keys(e.loadedByUsers).length>0&&console.warn(`An object ${e.id} that was deleted is still loaded by one or more controllers. This may be a bug.`),this.gi.trigger("removeObject",e)}getNextId(){let e=0;for(;;){if(this.nextObjectId=this.nextObjectId%4294967295+1,!this.gi.idIsTaken(this.nextObjectId))return this.nextObjectId;if(e++,e>=4294967296)throw new Error("Exceeded max ID allocation. This means 0xFFFFFFFF IDs are currently in use, which may indicate a memory leak.")}}}},2136:function(e,t,i){var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const r=s(i(8862)),n=s(i(2170)),o=s(i(4051));class a{addDiscriminator(e){this._discriminators[e]=!0}is(e){return this._discriminators[e]??!1}isAll(e){for(let t of e)if(!this.is(t))return!1;return!0}isAny(e){for(let t of e)if(this.is(t))return!0;return!1}get alive(){return this._alive}constructor(){this._ownerWsId=null,this._discriminators={},this._alive=!0,this._setup2Called=!1,this._snapshot={},this._snapshotArchive={},this.loadedByUsers={},this._references={},this.g3eExtensions={},this.eventLog=[],this.gi=a.gi,this.gi.trigger("registerObject",this)}static getExtension(e,t){for(let i in e.g3eExtensions){let s=e.g3eExtensions[i];if(s instanceof t)return s}return null}static getExtensionByLabel(e,t){for(let i in e.g3eExtensions){let s=e.g3eExtensions[i];if(s.is(t))return s}return null}static getObjectGraph(e){let t={},i=[e.id];do{let s=e.gi.allGameObjectsById[i.pop()];for(let e in s._references){let r=Number(e);t[r]||(t[r]=s._references[r].o,i.push(r))}}while(i.length>0);return t}destroy(e){this.gi.destroyObject(this,e)}destroyOnMaster(e){this.gi.destroyObjectOnMaster(this,e)}initialize(){}static addReference(e,t){let i=e._references[t.id];i?i.c++:e._references[t.id]={o:t,c:1};let s=t._references[e.id];if(s?s.c++:t._references[e.id]={o:e,c:1},e._group||t._group){if(!e._group&&t._group)t._group.add(e);else if(e._group&&!t._group)e._group.add(t);else if(e._group&&t._group&&e._group!=t._group)throw"Merging groups not implemented yet."}else{let i=new n.default;i.add(e),i.add(t)}}static removeReference(e,t){let i=e._references[t.id];i.c--,i.c||delete e._references[t.id];let s=t._references[e.id];s.c--,s.c||delete t._references[e.id];let r=a.getObjectGraph(e);if(r[t.id]);else{let i=e._group,s=a.getObjectGraph(t);if(Object.keys(r).length>1){let e=new n.default;for(let t in r){let i=r[t];e.add(i)}for(let t in i.controllers){let s=i.controllers[t];e.watch(s)}}if(Object.keys(s).length>1){let e=new n.default;for(let t in s){let i=s[t];e.add(i)}for(let t in i.controllers){let s=i.controllers[t];e.watch(s)}}i.reset()}}static removeAllReferences(e){for(let t in e._references)delete e._references[t].o._references[e.id];e._references={},e._group&&(e._group.remove(e),e._group=null)}static generateSnapshot(e){let t=e._typeId,i=r.default[t];if(!i)throw new Error(`Type ${t} not registered!`);e._snapshot||(e._snapshot={});let s=i._syncedFields;for(let t in s){let i=s[t],r=e;for(let e=0;e<i.key.length&&r;e++)r=r[i.key[e]];let n=o.default.encode(o.default.getNamedTypeFromEnum(i.type),r);e._snapshot[i.fieldId]=n}}static triggerAction(e,t,...i){}}t.default=a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,