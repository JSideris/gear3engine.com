"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[9539],{9539:(t,e,r)=>{r.d(e,{vl:()=>w});var n=r(4295),i=r(1573),a=r(1473),s=r(5323),o=r(5307),h=r(8093),f=r(29),l=r(7235),u=function(t,e){return u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},u(t,e)},c=function(){this.info=[],this.common=[],this.page=[],this.char=[],this.kerning=[]},p=function(){function t(){}return t.test=function(t){return"string"==typeof t&&0===t.indexOf("info face=")},t.parse=function(t){var e=t.match(/^[a-z]+\s+.+$/gm),r={info:[],common:[],page:[],char:[],chars:[],kerning:[],kernings:[]};for(var n in e){var i=e[n].match(/^[a-z]+/gm)[0],a=e[n].match(/[a-zA-Z]+=([^\s"']+|"([^"]*)")/gm),s={};for(var o in a){var h=a[o].split("="),f=h[0],l=h[1].replace(/"/gm,""),u=parseFloat(l),p=isNaN(u)?l:u;s[f]=p}r[i].push(s)}var g=new c;return r.info.forEach((function(t){return g.info.push({face:t.face,size:parseInt(t.size,10)})})),r.common.forEach((function(t){return g.common.push({lineHeight:parseInt(t.lineHeight,10)})})),r.page.forEach((function(t){return g.page.push({id:parseInt(t.id,10),file:t.file})})),r.char.forEach((function(t){return g.char.push({id:parseInt(t.id,10),page:parseInt(t.page,10),x:parseInt(t.x,10),y:parseInt(t.y,10),width:parseInt(t.width,10),height:parseInt(t.height,10),xoffset:parseInt(t.xoffset,10),yoffset:parseInt(t.yoffset,10),xadvance:parseInt(t.xadvance,10)})})),r.kerning.forEach((function(t){return g.kerning.push({first:parseInt(t.first,10),second:parseInt(t.second,10),amount:parseInt(t.amount,10)})})),g},t}(),g=function(){function t(){}return t.test=function(t){return t instanceof XMLDocument&&t.getElementsByTagName("page").length&&null!==t.getElementsByTagName("info")[0].getAttribute("face")},t.parse=function(t){for(var e=new c,r=t.getElementsByTagName("info"),n=t.getElementsByTagName("common"),i=t.getElementsByTagName("page"),a=t.getElementsByTagName("char"),s=t.getElementsByTagName("kerning"),o=0;o<r.length;o++)e.info.push({face:r[o].getAttribute("face"),size:parseInt(r[o].getAttribute("size"),10)});for(o=0;o<n.length;o++)e.common.push({lineHeight:parseInt(n[o].getAttribute("lineHeight"),10)});for(o=0;o<i.length;o++)e.page.push({id:parseInt(i[o].getAttribute("id"),10)||0,file:i[o].getAttribute("file")});for(o=0;o<a.length;o++){var h=a[o];e.char.push({id:parseInt(h.getAttribute("id"),10),page:parseInt(h.getAttribute("page"),10)||0,x:parseInt(h.getAttribute("x"),10),y:parseInt(h.getAttribute("y"),10),width:parseInt(h.getAttribute("width"),10),height:parseInt(h.getAttribute("height"),10),xoffset:parseInt(h.getAttribute("xoffset"),10),yoffset:parseInt(h.getAttribute("yoffset"),10),xadvance:parseInt(h.getAttribute("xadvance"),10)})}for(o=0;o<s.length;o++)e.kerning.push({first:parseInt(s[o].getAttribute("first"),10),second:parseInt(s[o].getAttribute("second"),10),amount:parseInt(s[o].getAttribute("amount"),10)});return e},t}(),d=function(){function t(){}return t.test=function(t){if("string"==typeof t&&t.indexOf("<font>")>-1){var e=(new self.DOMParser).parseFromString(t,"text/xml");return g.test(e)}return!1},t.parse=function(t){var e=(new window.DOMParser).parseFromString(t,"text/xml");return g.parse(e)},t}(),v=[p,g,d];function m(t){for(var e=0;e<v.length;e++)if(v[e].test(t))return v[e];return null}function x(t,e,r,n,i,a,o){var f=r.text,l=r.fontProperties;e.translate(n,i),e.scale(a,a);var u=o.strokeThickness/2,c=-o.strokeThickness/2;if(e.font=o.toFontString(),e.lineWidth=o.strokeThickness,e.textBaseline=o.textBaseline,e.lineJoin=o.lineJoin,e.miterLimit=o.miterLimit,e.fillStyle=function(t,e,r,n,i,a){var s,o=r.fill;if(!Array.isArray(o))return o;if(1===o.length)return o[0];var f=r.dropShadow?r.dropShadowDistance:0,l=r.padding||0,u=Math.ceil(t.width/n)-f-2*l,c=Math.ceil(t.height/n)-f-2*l,p=o.slice(),g=r.fillGradientStops.slice();if(!g.length)for(var d=p.length+1,v=1;v<d;++v)g.push(v/d);if(p.unshift(o[0]),g.unshift(0),p.push(o[o.length-1]),g.push(1),r.fillGradientType===h.M_.LINEAR_VERTICAL){s=e.createLinearGradient(u/2,l,u/2,c+l);var m=0,x=(a.fontProperties.fontSize+r.strokeThickness)/c;for(v=0;v<i.length;v++)for(var y=a.lineHeight*v,b=0;b<p.length;b++){var _=y/c+("number"==typeof g[b]?g[b]:b/p.length)*x,w=Math.max(m,_);w=Math.min(w,1),s.addColorStop(w,p[b]),m=w}}else{s=e.createLinearGradient(l,c/2,u+l,c/2);var A=p.length+1,I=1;for(v=0;v<p.length;v++){var S;S="number"==typeof g[v]?g[v]:I/A,s.addColorStop(S,p[v]),I++}}return s}(t,e,o,a,[f],r),e.strokeStyle=o.stroke,o.dropShadow){var p=o.dropShadowColor,g=(0,s.hex2rgb)("number"==typeof p?p:(0,s.string2hex)(p)),d=o.dropShadowBlur*a,v=o.dropShadowDistance*a;e.shadowColor="rgba("+255*g[0]+","+255*g[1]+","+255*g[2]+","+o.dropShadowAlpha+")",e.shadowBlur=d,e.shadowOffsetX=Math.cos(o.dropShadowAngle)*v,e.shadowOffsetY=Math.sin(o.dropShadowAngle)*v}else e.shadowColor="black",e.shadowBlur=0,e.shadowOffsetX=0,e.shadowOffsetY=0;o.stroke&&o.strokeThickness&&e.strokeText(f,u,c+r.lineHeight-l.descent),o.fill&&e.fillText(f,u,c+r.lineHeight-l.descent),e.setTransform(1,0,0,1,0,0),e.fillStyle="rgba(0, 0, 0, 0)"}var y=function(){function t(t,e,r){var i=t.info[0],a=t.common[0],h=t.page[0],f=(0,s.getResolutionOfUrl)(h.file),l={};this._ownsTextures=r,this.font=i.face,this.size=i.size,this.lineHeight=a.lineHeight/f,this.chars={},this.pageTextures=l;for(var u=0;u<t.page.length;u++){var c=t.page[u],p=c.id,g=c.file;l[p]=e instanceof Array?e[u]:e[g]}for(u=0;u<t.char.length;u++){var d=t.char[u],v=(p=d.id,d.page),m=t.char[u],x=m.x,y=m.y,b=m.width,_=m.height,w=m.xoffset,A=m.yoffset,I=m.xadvance;x/=f,y/=f,b/=f,_/=f,w/=f,A/=f,I/=f;var S=new n.Ae(x+l[v].frame.x/f,y+l[v].frame.y/f,b,_);this.chars[p]={xOffset:w,yOffset:A,xAdvance:I,kerning:{},texture:new o.xE(l[v].baseTexture,S),page:v}}for(u=0;u<t.kerning.length;u++){var E=t.kerning[u],P=E.first,T=E.second,O=E.amount;P/=f,T/=f,O/=f,this.chars[T]&&(this.chars[T].kerning[P]=O)}}return t.prototype.destroy=function(){for(var t in this.chars)this.chars[t].texture.destroy(),this.chars[t].texture=null;for(var t in this.pageTextures)this._ownsTextures&&this.pageTextures[t].destroy(!0),this.pageTextures[t]=null;this.chars=null,this.pageTextures=null},t.install=function(e,r,n){var i;if(e instanceof c)i=e;else{var a=m(e);if(!a)throw new Error("Unrecognized data format for font.");i=a.parse(e)}r instanceof o.xE&&(r=[r]);var s=new t(i,r,n);return t.available[s.font]=s,s},t.uninstall=function(e){var r=t.available[e];if(!r)throw new Error("No font found named '"+e+"'");r.destroy(),delete t.available[e]},t.from=function(e,r,n){if(!e)throw new Error("[BitmapFont] Property `name` is required.");var i=Object.assign({},t.defaultOptions,n),a=i.chars,s=i.padding,f=i.resolution,l=i.textureWidth,u=i.textureHeight,p=function(t){"string"==typeof t&&(t=[t]);for(var e=[],r=0,n=t.length;r<n;r++){var i=t[r];if(Array.isArray(i)){if(2!==i.length)throw new Error("[BitmapFont]: Invalid character range length, expecting 2 got "+i.length+".");var a=i[0].charCodeAt(0),s=i[1].charCodeAt(0);if(s<a)throw new Error("[BitmapFont]: Invalid character range.");for(var o=a,h=s;o<=h;o++)e.push(String.fromCharCode(o))}else e.push.apply(e,i.split(""))}if(0===e.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return e}(a),g=r instanceof h.pn?r:new h.pn(r),d=l,v=new c;v.info[0]={face:g.fontFamily,size:g.fontSize},v.common[0]={lineHeight:g.fontSize};for(var m,y,b,_=0,w=0,A=0,I=[],S=0;S<p.length;S++){m||((m=document.createElement("canvas")).width=l,m.height=u,y=m.getContext("2d"),b=new o.VL(m,{resolution:f}),I.push(new o.xE(b)),v.page.push({id:I.length-1,file:""}));var E=h._A.measureText(p[S],g,!1,m),P=E.width,T=Math.ceil(E.height),O=Math.ceil(("italic"===g.fontStyle?2:1)*P);if(w>=u-T*f){if(0===w)throw new Error("[BitmapFont] textureHeight "+u+"px is too small for "+g.fontSize+"px fonts");--S,m=null,y=null,b=null,w=0,_=0,A=0}else if(A=Math.max(T+E.fontProperties.descent,A),O*f+_>=d)--S,w+=A*f,w=Math.ceil(w),_=0,A=0;else{x(m,y,E,_,w,f,g);var k=E.text.charCodeAt(0);v.char.push({id:k,page:I.length-1,x:_/f,y:w/f,width:O,height:T,xoffset:0,yoffset:0,xadvance:Math.ceil(P-(g.dropShadow?g.dropShadowDistance:0)-(g.stroke?g.strokeThickness:0))}),_+=(O+2*s)*f,_=Math.ceil(_)}}var C=new t(v,I,!0);return void 0!==t.available[e]&&t.uninstall(e),t.available[e]=C,C},t.ALPHA=[["a","z"],["A","Z"]," "],t.NUMERIC=[["0","9"]],t.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],t.ASCII=[[" ","~"]],t.defaultOptions={resolution:1,textureWidth:512,textureHeight:512,padding:4,chars:t.ALPHANUMERIC},t.available={},t}(),b=[],_=[],w=(function(t){function e(r,a){void 0===a&&(a={});var o=t.call(this)||this;o._tint=16777215,a.font&&((0,s.deprecation)("5.3.0","PIXI.BitmapText constructor style.font property is deprecated."),o._upgradeStyle(a));var h=Object.assign({},e.styleDefaults,a),f=h.align,l=h.tint,u=h.maxWidth,c=h.letterSpacing,p=h.fontName,g=h.fontSize;if(!y.available[p])throw new Error('Missing BitmapFont "'+p+'"');return o._activePagesMeshData=[],o._textWidth=0,o._textHeight=0,o._align=f,o._tint=l,o._fontName=p,o._fontSize=g||y.available[p].size,o._text=r,o._maxWidth=u,o._maxLineHeight=0,o._letterSpacing=c,o._anchor=new n.AB((function(){o.dirty=!0}),o,0,0),o._roundPixels=i.X.ROUND_PIXELS,o.dirty=!0,o._textureCache={},o}(function(t,e){function r(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)})(e,t),e.prototype.updateText=function(){for(var t,e=y.available[this._fontName],r=this._fontSize/e.size,i=new n.E9,h=[],f=[],l=this._text.replace(/(?:\r\n|\r)/g,"\n")||" ",u=l.length,c=this._maxWidth*e.size/this._fontSize,p=null,g=0,d=0,v=0,m=-1,x=0,w=0,A=0,I=0;I<u;I++){var S=l.charCodeAt(I),E=l.charAt(I);if(/(?:\s)/.test(E)&&(m=I,x=g),"\r"!==E&&"\n"!==E){var P=e.chars[S];if(P){p&&P.kerning[p]&&(i.x+=P.kerning[p]);var T=_.pop()||{texture:o.xE.EMPTY,line:0,charCode:0,position:new n.E9};T.texture=P.texture,T.line=v,T.charCode=S,T.position.x=i.x+P.xOffset+this._letterSpacing/2,T.position.y=i.y+P.yOffset,h.push(T),i.x+=P.xAdvance+this._letterSpacing,g=i.x,A=Math.max(A,P.yOffset+P.texture.height),p=S,-1!==m&&c>0&&i.x>c&&(++w,(0,s.removeItems)(h,1+m-w,1+I-m),I=m,m=-1,f.push(x),d=Math.max(d,x),v++,i.x=0,i.y+=e.lineHeight,p=null)}}else f.push(g),d=Math.max(d,g),++v,++w,i.x=0,i.y+=e.lineHeight,p=null}var O=l.charAt(l.length-1);"\r"!==O&&"\n"!==O&&(/(?:\s)/.test(O)&&(g=x),f.push(g),d=Math.max(d,g));var k=[];for(I=0;I<=v;I++){var C=0;"right"===this._align?C=d-f[I]:"center"===this._align&&(C=(d-f[I])/2),k.push(C)}var M=h.length,z={},B=[],H=this._activePagesMeshData;for(I=0;I<H.length;I++)b.push(H[I]);for(I=0;I<M;I++){var N=(Y=h[I].texture).baseTexture.uid;if(!z[N]){if(!(q=b.pop())){var F=new a.xc,j=new a.rY(o.xE.EMPTY);q={index:0,indexCount:0,vertexCount:0,uvsCount:0,total:0,mesh:new a.Kj(F,j),vertices:null,uvs:null,indices:null}}q.index=0,q.indexCount=0,q.vertexCount=0,q.uvsCount=0,q.total=0;var L=this._textureCache;L[N]=L[N]||new o.xE(Y.baseTexture),q.mesh.texture=L[N],q.mesh.tint=this._tint,B.push(q),z[N]=q}z[N].total++}for(I=0;I<H.length;I++)-1===B.indexOf(H[I])&&this.removeChild(H[I].mesh);for(I=0;I<B.length;I++)B[I].mesh.parent!==this&&this.addChild(B[I].mesh);for(var I in this._activePagesMeshData=B,z){var D=(q=z[I]).total;if(!((null===(t=q.indices)||void 0===t?void 0:t.length)>6*D)||q.vertices.length<2*a.Kj.BATCHABLE_SIZE)q.vertices=new Float32Array(8*D),q.uvs=new Float32Array(8*D),q.indices=new Uint16Array(6*D);else for(var W=q.total,U=q.vertices,X=4*W*2;X<U.length;X++)U[X]=0;q.mesh.size=6*D}for(I=0;I<M;I++){var R=(E=h[I]).position.x+k[E.line];this._roundPixels&&(R=Math.round(R));var Y,G=R*r,Z=E.position.y*r,V=z[(Y=E.texture).baseTexture.uid],$=Y.frame,J=Y._uvs,K=V.index++;V.indices[6*K+0]=0+4*K,V.indices[6*K+1]=1+4*K,V.indices[6*K+2]=2+4*K,V.indices[6*K+3]=0+4*K,V.indices[6*K+4]=2+4*K,V.indices[6*K+5]=3+4*K,V.vertices[8*K+0]=G,V.vertices[8*K+1]=Z,V.vertices[8*K+2]=G+$.width*r,V.vertices[8*K+3]=Z,V.vertices[8*K+4]=G+$.width*r,V.vertices[8*K+5]=Z+$.height*r,V.vertices[8*K+6]=G,V.vertices[8*K+7]=Z+$.height*r,V.uvs[8*K+0]=J.x0,V.uvs[8*K+1]=J.y0,V.uvs[8*K+2]=J.x1,V.uvs[8*K+3]=J.y1,V.uvs[8*K+4]=J.x2,V.uvs[8*K+5]=J.y2,V.uvs[8*K+6]=J.x3,V.uvs[8*K+7]=J.y3}for(var I in this._textWidth=d*r,this._textHeight=(i.y+e.lineHeight)*r,z){var q=z[I];if(0!==this.anchor.x||0!==this.anchor.y)for(var Q=0,tt=this._textWidth*this.anchor.x,et=this._textHeight*this.anchor.y,rt=0;rt<q.total;rt++)q.vertices[Q++]-=tt,q.vertices[Q++]-=et,q.vertices[Q++]-=tt,q.vertices[Q++]-=et,q.vertices[Q++]-=tt,q.vertices[Q++]-=et,q.vertices[Q++]-=tt,q.vertices[Q++]-=et;this._maxLineHeight=A*r;var nt=q.mesh.geometry.getBuffer("aVertexPosition"),it=q.mesh.geometry.getBuffer("aTextureCoord"),at=q.mesh.geometry.getIndex();nt.data=q.vertices,it.data=q.uvs,at.data=q.indices,nt.update(),it.update(),at.update()}for(I=0;I<h.length;I++)_.push(h[I])},e.prototype.updateTransform=function(){this.validate(),this.containerUpdateTransform()},e.prototype.getLocalBounds=function(){return this.validate(),t.prototype.getLocalBounds.call(this)},e.prototype.validate=function(){this.dirty&&(this.updateText(),this.dirty=!1)},Object.defineProperty(e.prototype,"tint",{get:function(){return this._tint},set:function(t){if(this._tint!==t){this._tint=t;for(var e=0;e<this._activePagesMeshData.length;e++)this._activePagesMeshData[e].mesh.tint=t}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"align",{get:function(){return this._align},set:function(t){this._align!==t&&(this._align=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"fontName",{get:function(){return this._fontName},set:function(t){if(!y.available[t])throw new Error('Missing BitmapFont "'+t+'"');this._fontName!==t&&(this._fontName=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"fontSize",{get:function(){return this._fontSize},set:function(t){this._fontSize!==t&&(this._fontSize=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"anchor",{get:function(){return this._anchor},set:function(t){"number"==typeof t?this._anchor.set(t):this._anchor.copyFrom(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"text",{get:function(){return this._text},set:function(t){t=String(null==t?"":t),this._text!==t&&(this._text=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxWidth",{get:function(){return this._maxWidth},set:function(t){this._maxWidth!==t&&(this._maxWidth=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxLineHeight",{get:function(){return this.validate(),this._maxLineHeight},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textWidth",{get:function(){return this.validate(),this._textWidth},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"letterSpacing",{get:function(){return this._letterSpacing},set:function(t){this._letterSpacing!==t&&(this._letterSpacing=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"roundPixels",{get:function(){return this._roundPixels},set:function(t){t!==this._roundPixels&&(this._roundPixels=t,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"textHeight",{get:function(){return this.validate(),this._textHeight},enumerable:!1,configurable:!0}),e.prototype._upgradeStyle=function(t){if("string"==typeof t.font){var e=t.font.split(" ");t.fontName=1===e.length?e[0]:e.slice(1).join(" "),e.length>=2&&(t.fontSize=parseInt(e[0],10))}else t.fontName=t.font.name,t.fontSize="number"==typeof t.font.size?t.font.size:parseInt(t.font.size,10)},e.prototype.destroy=function(e){var r=this._textureCache;for(var n in r)r[n].destroy(),delete r[n];this._textureCache=null,t.prototype.destroy.call(this,e)},e.registerFont=function(t,e){return(0,s.deprecation)("5.3.0","PIXI.BitmapText.registerFont is deprecated, use PIXI.BitmapFont.install"),y.install(t,e)},Object.defineProperty(e,"fonts",{get:function(){return(0,s.deprecation)("5.3.0","PIXI.BitmapText.fonts is deprecated, use PIXI.BitmapFont.available"),y.available},enumerable:!1,configurable:!0}),e.styleDefaults={align:"left",tint:16777215,maxWidth:0,letterSpacing:0}}(f.W2),function(){function t(){}return t.add=function(){l.kC.setExtensionXhrType("fnt",l.kC.XHR_RESPONSE_TYPE.TEXT)},t.use=function(e,r){var n=m(e.data);if(n)for(var i=t.getBaseUrl(this,e),a=n.parse(e.data),s={},o=function(t){s[t.metadata.pageFile]=t.texture,Object.keys(s).length===a.page.length&&(e.bitmapFont=y.install(a,s,!0),r())},h=0;h<a.page.length;++h){var f=a.page[h].file,u=i+f,c=!1;for(var p in this.resources){var g=this.resources[p];if(g.url===u){g.metadata.pageFile=f,g.texture?o(g):g.onAfterMiddleware.add(o),c=!0;break}}if(!c){var d={crossOrigin:e.crossOrigin,loadType:l.kC.LOAD_TYPE.IMAGE,metadata:Object.assign({pageFile:f},e.metadata.imageMetadata),parentResource:e};this.add(u,d,o)}}else r()},t.getBaseUrl=function(e,r){var n=r.isDataUrl?"":t.dirname(r.url);return r.isDataUrl&&("."===n&&(n=""),e.baseUrl&&n&&"/"===e.baseUrl.charAt(e.baseUrl.length-1)&&(n+="/")),(n=n.replace(e.baseUrl,""))&&"/"!==n.charAt(n.length-1)&&(n+="/"),n},t.dirname=function(t){var e=t.replace(/\\/g,"/").replace(/\/$/,"").replace(/\/[^\/]*$/,"");return e===t?".":""===e?"/":e},t}())}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,