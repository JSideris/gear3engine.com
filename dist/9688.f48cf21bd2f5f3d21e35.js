/*! For license information please see 9688.f48cf21bd2f5f3d21e35.js.LICENSE.txt */
"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[9688],{9688:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});var n=r(932),i=r(19),a=r(414),o=r(8950),s=r(2514),h=r(9166),l=r(5868),u=r(3663),f=r(2755),c=function(e,t){return c=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])},c(e,t)},d=function(){this.info=[],this.common=[],this.page=[],this.char=[],this.kerning=[],this.distanceField=[]},p=function(){function e(){}return e.test=function(e){return"string"==typeof e&&0===e.indexOf("info face=")},e.parse=function(e){var t=e.match(/^[a-z]+\s+.+$/gm),r={info:[],common:[],page:[],char:[],chars:[],kerning:[],kernings:[],distanceField:[]};for(var n in t){var i=t[n].match(/^[a-z]+/gm)[0],a=t[n].match(/[a-zA-Z]+=([^\s"']+|"([^"]*)")/gm),o={};for(var s in a){var h=a[s].split("="),l=h[0],u=h[1].replace(/"/gm,""),f=parseFloat(u),c=isNaN(f)?u:f;o[l]=c}r[i].push(o)}var p=new d;return r.info.forEach((function(e){return p.info.push({face:e.face,size:parseInt(e.size,10)})})),r.common.forEach((function(e){return p.common.push({lineHeight:parseInt(e.lineHeight,10)})})),r.page.forEach((function(e){return p.page.push({id:parseInt(e.id,10),file:e.file})})),r.char.forEach((function(e){return p.char.push({id:parseInt(e.id,10),page:parseInt(e.page,10),x:parseInt(e.x,10),y:parseInt(e.y,10),width:parseInt(e.width,10),height:parseInt(e.height,10),xoffset:parseInt(e.xoffset,10),yoffset:parseInt(e.yoffset,10),xadvance:parseInt(e.xadvance,10)})})),r.kerning.forEach((function(e){return p.kerning.push({first:parseInt(e.first,10),second:parseInt(e.second,10),amount:parseInt(e.amount,10)})})),r.distanceField.forEach((function(e){return p.distanceField.push({distanceRange:parseInt(e.distanceRange,10),fieldType:e.fieldType})})),p},e}(),g=function(){function e(){}return e.test=function(e){return e instanceof XMLDocument&&e.getElementsByTagName("page").length&&null!==e.getElementsByTagName("info")[0].getAttribute("face")},e.parse=function(e){for(var t=new d,r=e.getElementsByTagName("info"),n=e.getElementsByTagName("common"),i=e.getElementsByTagName("page"),a=e.getElementsByTagName("char"),o=e.getElementsByTagName("kerning"),s=e.getElementsByTagName("distanceField"),h=0;h<r.length;h++)t.info.push({face:r[h].getAttribute("face"),size:parseInt(r[h].getAttribute("size"),10)});for(h=0;h<n.length;h++)t.common.push({lineHeight:parseInt(n[h].getAttribute("lineHeight"),10)});for(h=0;h<i.length;h++)t.page.push({id:parseInt(i[h].getAttribute("id"),10)||0,file:i[h].getAttribute("file")});for(h=0;h<a.length;h++){var l=a[h];t.char.push({id:parseInt(l.getAttribute("id"),10),page:parseInt(l.getAttribute("page"),10)||0,x:parseInt(l.getAttribute("x"),10),y:parseInt(l.getAttribute("y"),10),width:parseInt(l.getAttribute("width"),10),height:parseInt(l.getAttribute("height"),10),xoffset:parseInt(l.getAttribute("xoffset"),10),yoffset:parseInt(l.getAttribute("yoffset"),10),xadvance:parseInt(l.getAttribute("xadvance"),10)})}for(h=0;h<o.length;h++)t.kerning.push({first:parseInt(o[h].getAttribute("first"),10),second:parseInt(o[h].getAttribute("second"),10),amount:parseInt(o[h].getAttribute("amount"),10)});for(h=0;h<s.length;h++)t.distanceField.push({fieldType:s[h].getAttribute("fieldType"),distanceRange:parseInt(s[h].getAttribute("distanceRange"),10)});return t},e}(),x=function(){function e(){}return e.test=function(e){if("string"==typeof e&&e.indexOf("<font>")>-1){var t=(new globalThis.DOMParser).parseFromString(e,"text/xml");return g.test(t)}return!1},e.parse=function(e){var t=(new globalThis.DOMParser).parseFromString(e,"text/xml");return g.parse(t)},e}(),v=[p,g,x];function m(e){for(var t=0;t<v.length;t++)if(v[t].test(e))return v[t];return null}function y(e,t,r,n,i,a,s){var l=r.text,u=r.fontProperties;t.translate(n,i),t.scale(a,a);var f=s.strokeThickness/2,c=-s.strokeThickness/2;if(t.font=s.toFontString(),t.lineWidth=s.strokeThickness,t.textBaseline=s.textBaseline,t.lineJoin=s.lineJoin,t.miterLimit=s.miterLimit,t.fillStyle=function(e,t,r,n,i,a){var o,s=r.fill;if(!Array.isArray(s))return s;if(1===s.length)return s[0];var l=r.dropShadow?r.dropShadowDistance:0,u=r.padding||0,f=e.width/n-l-2*u,c=e.height/n-l-2*u,d=s.slice(),p=r.fillGradientStops.slice();if(!p.length)for(var g=d.length+1,x=1;x<g;++x)p.push(x/g);if(d.unshift(s[0]),p.unshift(0),d.push(s[s.length-1]),p.push(1),r.fillGradientType===h.TEXT_GRADIENT.LINEAR_VERTICAL){o=t.createLinearGradient(f/2,u,f/2,c+u);var v=0,m=(a.fontProperties.fontSize+r.strokeThickness)/c;for(x=0;x<i.length;x++)for(var y=a.lineHeight*x,b=0;b<d.length;b++){var _=y/c+("number"==typeof p[b]?p[b]:b/d.length)*m,T=Math.max(v,_);T=Math.min(T,1),o.addColorStop(T,d[b]),v=T}}else{o=t.createLinearGradient(u,c/2,f+u,c/2);var w=d.length+1,A=1;for(x=0;x<d.length;x++){var M;M="number"==typeof p[x]?p[x]:A/w,o.addColorStop(M,d[x]),A++}}return o}(e,t,s,a,[l],r),t.strokeStyle=s.stroke,s.dropShadow){var d=s.dropShadowColor,p=o.hex2rgb("number"==typeof d?d:o.string2hex(d)),g=s.dropShadowBlur*a,x=s.dropShadowDistance*a;t.shadowColor="rgba("+255*p[0]+","+255*p[1]+","+255*p[2]+","+s.dropShadowAlpha+")",t.shadowBlur=g,t.shadowOffsetX=Math.cos(s.dropShadowAngle)*x,t.shadowOffsetY=Math.sin(s.dropShadowAngle)*x}else t.shadowColor="black",t.shadowBlur=0,t.shadowOffsetX=0,t.shadowOffsetY=0;s.stroke&&s.strokeThickness&&t.strokeText(l,f,c+r.lineHeight-u.descent),s.fill&&t.fillText(l,f,c+r.lineHeight-u.descent),t.setTransform(1,0,0,1,0,0),t.fillStyle="rgba(0, 0, 0, 0)"}function b(e){return Array.from?Array.from(e):e.split("")}function _(e){return e.codePointAt?e.codePointAt(0):e.charCodeAt(0)}var T=function(){function e(e,t,r){var i,a,h=e.info[0],u=e.common[0],f=e.page[0],c=e.distanceField[0],d=o.getResolutionOfUrl(f.file),p={};this._ownsTextures=r,this.font=h.face,this.size=h.size,this.lineHeight=u.lineHeight/d,this.chars={},this.pageTextures=p;for(var g=0;g<e.page.length;g++){var x=e.page[g],v=x.id,m=x.file;p[v]=t instanceof Array?t[g]:t[m],(null==c?void 0:c.fieldType)&&"none"!==c.fieldType&&(p[v].baseTexture.alphaMode=l.ALPHA_MODES.NO_PREMULTIPLIED_ALPHA)}for(g=0;g<e.char.length;g++){var y=e.char[g],b=(v=y.id,y.page),_=e.char[g],T=_.x,w=_.y,A=_.width,M=_.height,S=_.xoffset,P=_.yoffset,C=_.xadvance;T/=d,w/=d,A/=d,M/=d,S/=d,P/=d,C/=d;var E=new n.Rectangle(T+p[b].frame.x/d,w+p[b].frame.y/d,A,M);this.chars[v]={xOffset:S,yOffset:P,xAdvance:C,kerning:{},texture:new s.Texture(p[b].baseTexture,E),page:b}}for(g=0;g<e.kerning.length;g++){var O=e.kerning[g],I=O.first,F=O.second,k=O.amount;I/=d,F/=d,k/=d,this.chars[F]&&(this.chars[F].kerning[I]=k)}this.distanceFieldRange=null==c?void 0:c.distanceRange,this.distanceFieldType=null!==(a=null===(i=null==c?void 0:c.fieldType)||void 0===i?void 0:i.toLowerCase())&&void 0!==a?a:"none"}return e.prototype.destroy=function(){for(var e in this.chars)this.chars[e].texture.destroy(),this.chars[e].texture=null;for(var e in this.pageTextures)this._ownsTextures&&this.pageTextures[e].destroy(!0),this.pageTextures[e]=null;this.chars=null,this.pageTextures=null},e.install=function(t,r,n){var i;if(t instanceof d)i=t;else{var a=m(t);if(!a)throw new Error("Unrecognized data format for font.");i=a.parse(t)}r instanceof s.Texture&&(r=[r]);var o=new e(i,r,n);return e.available[o.font]=o,o},e.uninstall=function(t){var r=e.available[t];if(!r)throw new Error("No font found named '"+t+"'");r.destroy(),delete e.available[t]},e.from=function(t,r,n){if(!t)throw new Error("[BitmapFont] Property `name` is required.");var i=Object.assign({},e.defaultOptions,n),a=i.chars,o=i.padding,l=i.resolution,u=i.textureWidth,f=i.textureHeight,c=function(e){"string"==typeof e&&(e=[e]);for(var t=[],r=0,n=e.length;r<n;r++){var i=e[r];if(Array.isArray(i)){if(2!==i.length)throw new Error("[BitmapFont]: Invalid character range length, expecting 2 got "+i.length+".");var a=i[0].charCodeAt(0),o=i[1].charCodeAt(0);if(o<a)throw new Error("[BitmapFont]: Invalid character range.");for(var s=a,h=o;s<=h;s++)t.push(String.fromCharCode(s))}else t.push.apply(t,b(i))}if(0===t.length)throw new Error("[BitmapFont]: Empty set when resolving characters.");return t}(a),p=r instanceof h.TextStyle?r:new h.TextStyle(r),g=u,x=new d;x.info[0]={face:p.fontFamily,size:p.fontSize},x.common[0]={lineHeight:p.fontSize};for(var v,m,T,w=0,A=0,M=0,S=[],P=0;P<c.length;P++){v||((v=document.createElement("canvas")).width=u,v.height=f,m=v.getContext("2d"),T=new s.BaseTexture(v,{resolution:l}),S.push(new s.Texture(T)),x.page.push({id:S.length-1,file:""}));var C=h.TextMetrics.measureText(c[P],p,!1,v),E=C.width,O=Math.ceil(C.height),I=Math.ceil(("italic"===p.fontStyle?2:1)*E);if(A>=f-O*l){if(0===A)throw new Error("[BitmapFont] textureHeight "+f+"px is too small for "+p.fontSize+"px fonts");--P,v=null,m=null,T=null,A=0,w=0,M=0}else if(M=Math.max(O+C.fontProperties.descent,M),I*l+w>=g)--P,A+=M*l,A=Math.ceil(A),w=0,M=0;else{y(v,m,C,w,A,l,p);var F=_(C.text);x.char.push({id:F,page:S.length-1,x:w/l,y:A/l,width:I,height:O,xoffset:0,yoffset:0,xadvance:Math.ceil(E-(p.dropShadow?p.dropShadowDistance:0)-(p.stroke?p.strokeThickness:0))}),w+=(I+2*o)*l,w=Math.ceil(w)}}P=0;for(var k=c.length;P<k;P++)for(var B=c[P],D=0;D<k;D++){var N=c[D],L=m.measureText(B).width,H=m.measureText(N).width,z=m.measureText(B+N).width-(L+H);z&&x.kerning.push({first:_(B),second:_(N),amount:z})}var R=new e(x,S,!0);return void 0!==e.available[t]&&e.uninstall(t),e.available[t]=R,R},e.ALPHA=[["a","z"],["A","Z"]," "],e.NUMERIC=[["0","9"]],e.ALPHANUMERIC=[["a","z"],["A","Z"],["0","9"]," "],e.ASCII=[[" ","~"]],e.defaultOptions={resolution:1,textureWidth:512,textureHeight:512,padding:4,chars:e.ALPHANUMERIC},e.available={},e}(),w=[],A=[],M=[],S=function(e){function t(r,a){void 0===a&&(a={});var o=e.call(this)||this;o._tint=16777215;var s=Object.assign({},t.styleDefaults,a),h=s.align,l=s.tint,u=s.maxWidth,f=s.letterSpacing,c=s.fontName,d=s.fontSize;if(!T.available[c])throw new Error('Missing BitmapFont "'+c+'"');return o._activePagesMeshData=[],o._textWidth=0,o._textHeight=0,o._align=h,o._tint=l,o._fontName=c,o._fontSize=d||T.available[c].size,o.text=r,o._maxWidth=u,o._maxLineHeight=0,o._letterSpacing=f,o._anchor=new n.ObservablePoint((function(){o.dirty=!0}),o,0,0),o._roundPixels=i.settings.ROUND_PIXELS,o.dirty=!0,o._resolution=i.settings.RESOLUTION,o._autoResolution=!0,o._textureCache={},o}return function(e,t){function r(){this.constructor=e}c(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}(t,e),t.prototype.updateText=function(){for(var e,t=T.available[this._fontName],r=this._fontSize/t.size,i=new n.Point,h=[],u=[],f=[],c=b(this._text.replace(/(?:\r\n|\r)/g,"\n")||" "),d=this._maxWidth*t.size/this._fontSize,p="none"===t.distanceFieldType?w:A,g=null,x=0,v=0,m=0,y=-1,S=0,P=0,C=0,E=0,O=0;O<c.length;O++){var I=_(J=c[O]);if(/(?:\s)/.test(J)&&(y=O,S=x,E++),"\r"!==J&&"\n"!==J){var F=t.chars[I];if(F){g&&F.kerning[g]&&(i.x+=F.kerning[g]);var k=M.pop()||{texture:s.Texture.EMPTY,line:0,charCode:0,prevSpaces:0,position:new n.Point};k.texture=F.texture,k.line=m,k.charCode=I,k.position.x=i.x+F.xOffset+this._letterSpacing/2,k.position.y=i.y+F.yOffset,k.prevSpaces=E,h.push(k),x=k.position.x+Math.max(F.xAdvance,F.texture.orig.width),i.x+=F.xAdvance+this._letterSpacing,C=Math.max(C,F.yOffset+F.texture.height),g=I,-1!==y&&d>0&&i.x>d&&(++P,o.removeItems(h,1+y-P,1+O-y),O=y,y=-1,u.push(S),f.push(h.length>0?h[h.length-1].prevSpaces:0),v=Math.max(v,S),m++,i.x=0,i.y+=t.lineHeight,g=null,E=0)}}else u.push(x),f.push(-1),v=Math.max(v,x),++m,++P,i.x=0,i.y+=t.lineHeight,g=null,E=0}var B=c[c.length-1];"\r"!==B&&"\n"!==B&&(/(?:\s)/.test(B)&&(x=S),u.push(x),v=Math.max(v,x),f.push(-1));var D=[];for(O=0;O<=m;O++){var N=0;"right"===this._align?N=v-u[O]:"center"===this._align?N=(v-u[O])/2:"justify"===this._align&&(N=f[O]<0?0:(v-u[O])/f[O]),D.push(N)}var L=h.length,H={},z=[],R=this._activePagesMeshData;for(O=0;O<R.length;O++)p.push(R[O]);for(O=0;O<L;O++){var j=(Q=h[O].texture).baseTexture.uid;if(!H[j]){if(!(oe=p.pop())){var W=new a.MeshGeometry,U=void 0,X=void 0;"none"===t.distanceFieldType?(U=new a.MeshMaterial(s.Texture.EMPTY),X=l.BLEND_MODES.NORMAL):(U=new a.MeshMaterial(s.Texture.EMPTY,{program:s.Program.from("// Mesh material default fragment\r\nattribute vec2 aVertexPosition;\r\nattribute vec2 aTextureCoord;\r\n\r\nuniform mat3 projectionMatrix;\r\nuniform mat3 translationMatrix;\r\nuniform mat3 uTextureMatrix;\r\n\r\nvarying vec2 vTextureCoord;\r\n\r\nvoid main(void)\r\n{\r\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n\r\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\r\n}\r\n","// Pixi texture info\r\nvarying vec2 vTextureCoord;\r\nuniform sampler2D uSampler;\r\n\r\n// Tint\r\nuniform vec4 uColor;\r\n\r\n// on 2D applications fwidth is screenScale / glyphAtlasScale * distanceFieldRange\r\nuniform float uFWidth;\r\n\r\nvoid main(void) {\r\n\r\n  // To stack MSDF and SDF we need a non-pre-multiplied-alpha texture.\r\n  vec4 texColor = texture2D(uSampler, vTextureCoord);\r\n\r\n  // MSDF\r\n  float median = texColor.r + texColor.g + texColor.b -\r\n                  min(texColor.r, min(texColor.g, texColor.b)) -\r\n                  max(texColor.r, max(texColor.g, texColor.b));\r\n  // SDF\r\n  median = min(median, texColor.a);\r\n\r\n  float screenPxDistance = uFWidth * (median - 0.5);\r\n  float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\r\n\r\n  // NPM Textures, NPM outputs\r\n  gl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\r\n\r\n}\r\n"),uniforms:{uFWidth:0}}),X=l.BLEND_MODES.NORMAL_NPM);var G=new a.Mesh(W,U);G.blendMode=X,oe={index:0,indexCount:0,vertexCount:0,uvsCount:0,total:0,mesh:G,vertices:null,uvs:null,indices:null}}oe.index=0,oe.indexCount=0,oe.vertexCount=0,oe.uvsCount=0,oe.total=0;var Y=this._textureCache;Y[j]=Y[j]||new s.Texture(Q.baseTexture),oe.mesh.texture=Y[j],oe.mesh.tint=this._tint,z.push(oe),H[j]=oe}H[j].total++}for(O=0;O<R.length;O++)-1===z.indexOf(R[O])&&this.removeChild(R[O].mesh);for(O=0;O<z.length;O++)z[O].mesh.parent!==this&&this.addChild(z[O].mesh);for(var O in this._activePagesMeshData=z,H){var V=(oe=H[O]).total;if(!((null===(e=oe.indices)||void 0===e?void 0:e.length)>6*V)||oe.vertices.length<2*a.Mesh.BATCHABLE_SIZE)oe.vertices=new Float32Array(8*V),oe.uvs=new Float32Array(8*V),oe.indices=new Uint16Array(6*V);else for(var Z=oe.total,q=oe.vertices,$=4*Z*2;$<q.length;$++)q[$]=0;oe.mesh.size=6*V}for(O=0;O<L;O++){var J,K=(J=h[O]).position.x+D[J.line]*("justify"===this._align?J.prevSpaces:1);this._roundPixels&&(K=Math.round(K));var Q,ee=K*r,te=J.position.y*r,re=H[(Q=J.texture).baseTexture.uid],ne=Q.frame,ie=Q._uvs,ae=re.index++;re.indices[6*ae+0]=0+4*ae,re.indices[6*ae+1]=1+4*ae,re.indices[6*ae+2]=2+4*ae,re.indices[6*ae+3]=0+4*ae,re.indices[6*ae+4]=2+4*ae,re.indices[6*ae+5]=3+4*ae,re.vertices[8*ae+0]=ee,re.vertices[8*ae+1]=te,re.vertices[8*ae+2]=ee+ne.width*r,re.vertices[8*ae+3]=te,re.vertices[8*ae+4]=ee+ne.width*r,re.vertices[8*ae+5]=te+ne.height*r,re.vertices[8*ae+6]=ee,re.vertices[8*ae+7]=te+ne.height*r,re.uvs[8*ae+0]=ie.x0,re.uvs[8*ae+1]=ie.y0,re.uvs[8*ae+2]=ie.x1,re.uvs[8*ae+3]=ie.y1,re.uvs[8*ae+4]=ie.x2,re.uvs[8*ae+5]=ie.y2,re.uvs[8*ae+6]=ie.x3,re.uvs[8*ae+7]=ie.y3}for(var O in this._textWidth=v*r,this._textHeight=(i.y+t.lineHeight)*r,H){var oe=H[O];if(0!==this.anchor.x||0!==this.anchor.y)for(var se=0,he=this._textWidth*this.anchor.x,le=this._textHeight*this.anchor.y,ue=0;ue<oe.total;ue++)oe.vertices[se++]-=he,oe.vertices[se++]-=le,oe.vertices[se++]-=he,oe.vertices[se++]-=le,oe.vertices[se++]-=he,oe.vertices[se++]-=le,oe.vertices[se++]-=he,oe.vertices[se++]-=le;this._maxLineHeight=C*r;var fe=oe.mesh.geometry.getBuffer("aVertexPosition"),ce=oe.mesh.geometry.getBuffer("aTextureCoord"),de=oe.mesh.geometry.getIndex();fe.data=oe.vertices,ce.data=oe.uvs,de.data=oe.indices,fe.update(),ce.update(),de.update()}for(O=0;O<h.length;O++)M.push(h[O])},t.prototype.updateTransform=function(){this.validate(),this.containerUpdateTransform()},t.prototype._render=function(t){this._autoResolution&&this._resolution!==t.resolution&&(this._resolution=t.resolution,this.dirty=!0);var r=T.available[this._fontName],n=r.distanceFieldRange,i=r.distanceFieldType,a=r.size;if("none"!==i)for(var o=this.worldTransform,s=o.a,h=o.b,l=o.c,u=o.d,f=Math.sqrt(s*s+h*h),c=Math.sqrt(l*l+u*u),d=(Math.abs(f)+Math.abs(c))/2,p=this._fontSize/a,g=0,x=this._activePagesMeshData;g<x.length;g++)x[g].mesh.shader.uniforms.uFWidth=d*n*p*this._resolution;e.prototype._render.call(this,t)},t.prototype.getLocalBounds=function(){return this.validate(),e.prototype.getLocalBounds.call(this)},t.prototype.validate=function(){this.dirty&&(this.updateText(),this.dirty=!1)},Object.defineProperty(t.prototype,"tint",{get:function(){return this._tint},set:function(e){if(this._tint!==e){this._tint=e;for(var t=0;t<this._activePagesMeshData.length;t++)this._activePagesMeshData[t].mesh.tint=e}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"align",{get:function(){return this._align},set:function(e){this._align!==e&&(this._align=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontName",{get:function(){return this._fontName},set:function(e){if(!T.available[e])throw new Error('Missing BitmapFont "'+e+'"');this._fontName!==e&&(this._fontName=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fontSize",{get:function(){return this._fontSize},set:function(e){this._fontSize!==e&&(this._fontSize=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"anchor",{get:function(){return this._anchor},set:function(e){"number"==typeof e?this._anchor.set(e):this._anchor.copyFrom(e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"text",{get:function(){return this._text},set:function(e){e=String(null==e?"":e),this._text!==e&&(this._text=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxWidth",{get:function(){return this._maxWidth},set:function(e){this._maxWidth!==e&&(this._maxWidth=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"maxLineHeight",{get:function(){return this.validate(),this._maxLineHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textWidth",{get:function(){return this.validate(),this._textWidth},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"letterSpacing",{get:function(){return this._letterSpacing},set:function(e){this._letterSpacing!==e&&(this._letterSpacing=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"roundPixels",{get:function(){return this._roundPixels},set:function(e){e!==this._roundPixels&&(this._roundPixels=e,this.dirty=!0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"textHeight",{get:function(){return this.validate(),this._textHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"resolution",{get:function(){return this._resolution},set:function(e){this._autoResolution=!1,this._resolution!==e&&(this._resolution=e,this.dirty=!0)},enumerable:!1,configurable:!0}),t.prototype.destroy=function(t){var r=this._textureCache;for(var n in r)r[n].destroy(),delete r[n];this._textureCache=null,e.prototype.destroy.call(this,t)},t.styleDefaults={align:"left",tint:16777215,maxWidth:0,letterSpacing:0},t}(u.Container),P=function(){function e(){}return e.add=function(){f.LoaderResource.setExtensionXhrType("fnt",f.LoaderResource.XHR_RESPONSE_TYPE.TEXT)},e.use=function(t,r){var n=m(t.data);if(n)for(var i=e.getBaseUrl(this,t),a=n.parse(t.data),o={},s=function(e){o[e.metadata.pageFile]=e.texture,Object.keys(o).length===a.page.length&&(t.bitmapFont=T.install(a,o,!0),r())},h=0;h<a.page.length;++h){var l=a.page[h].file,u=i+l,c=!1;for(var d in this.resources){var p=this.resources[d];if(p.url===u){p.metadata.pageFile=l,p.texture?s(p):p.onAfterMiddleware.add(s),c=!0;break}}if(!c){var g={crossOrigin:t.crossOrigin,loadType:f.LoaderResource.LOAD_TYPE.IMAGE,metadata:Object.assign({pageFile:l},t.metadata.imageMetadata),parentResource:t};this.add(u,g,s)}}else r()},e.getBaseUrl=function(t,r){var n=r.isDataUrl?"":e.dirname(r.url);return r.isDataUrl&&("."===n&&(n=""),t.baseUrl&&n&&"/"===t.baseUrl.charAt(t.baseUrl.length-1)&&(n+="/")),(n=n.replace(t.baseUrl,""))&&"/"!==n.charAt(n.length-1)&&(n+="/"),n},e.dirname=function(e){var t=e.replace(/\\/g,"/").replace(/\/$/,"").replace(/\/[^\/]*$/,"");return t===e?".":""===t?"/":t},e}();t.BitmapFont=T,t.BitmapFontData=d,t.BitmapFontLoader=P,t.BitmapText=S}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,