/*! For license information please see 6228.8c69be0948ce5bb3504b.js.LICENSE.txt */
"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[6228],{923:(t,a,e)=>{var i=e(5307),s=e(9038),r=e(29),n=e(4295),h=e(5323),o=e(1573),c=new n.y3;r.s$.prototype._cacheAsBitmap=!1,r.s$.prototype._cacheData=null;var l=function(){this.textureCacheId=null,this.originalRender=null,this.originalRenderCanvas=null,this.originalCalculateBounds=null,this.originalGetLocalBounds=null,this.originalUpdateTransform=null,this.originalDestroy=null,this.originalMask=null,this.originalFilterArea=null,this.originalContainsPoint=null,this.sprite=null};Object.defineProperties(r.s$.prototype,{cacheAsBitmap:{get:function(){return this._cacheAsBitmap},set:function(t){var a;this._cacheAsBitmap!==t&&(this._cacheAsBitmap=t,t?(this._cacheData||(this._cacheData=new l),(a=this._cacheData).originalRender=this.render,a.originalRenderCanvas=this.renderCanvas,a.originalUpdateTransform=this.updateTransform,a.originalCalculateBounds=this.calculateBounds,a.originalGetLocalBounds=this.getLocalBounds,a.originalDestroy=this.destroy,a.originalContainsPoint=this.containsPoint,a.originalMask=this._mask,a.originalFilterArea=this.filterArea,this.render=this._renderCached,this.renderCanvas=this._renderCachedCanvas,this.destroy=this._cacheAsBitmapDestroy):((a=this._cacheData).sprite&&this._destroyCachedDisplayObject(),this.render=a.originalRender,this.renderCanvas=a.originalRenderCanvas,this.calculateBounds=a.originalCalculateBounds,this.getLocalBounds=a.originalGetLocalBounds,this.destroy=a.originalDestroy,this.updateTransform=a.originalUpdateTransform,this.containsPoint=a.originalContainsPoint,this._mask=a.originalMask,this.filterArea=a.originalFilterArea))}}}),r.s$.prototype._renderCached=function(t){!this.visible||this.worldAlpha<=0||!this.renderable||(this._initCachedDisplayObject(t),this._cacheData.sprite.transform._worldID=this.transform._worldID,this._cacheData.sprite.worldAlpha=this.worldAlpha,this._cacheData.sprite._render(t))},r.s$.prototype._initCachedDisplayObject=function(t){if(!this._cacheData||!this._cacheData.sprite){var a=this.alpha;this.alpha=1,t.batch.flush();var e=this.getLocalBounds(null,!0).clone();if(this.filters){var r=this.filters[0].padding;e.pad(r)}e.ceil(o.X.RESOLUTION);var n=t.renderTexture.current,l=t.renderTexture.sourceFrame.clone(),d=t.renderTexture.destinationFrame.clone(),u=t.projection.transform,p=i.TI.create({width:e.width,height:e.height}),_="cacheAsBitmap_"+(0,h.uid)();this._cacheData.textureCacheId=_,i.VL.addToCache(p.baseTexture,_),i.xE.addToCache(p,_);var f=this.transform.localTransform.copyTo(c).invert().translate(-e.x,-e.y);this.render=this._cacheData.originalRender,t.render(this,p,!0,f,!1),t.projection.transform=u,t.renderTexture.bind(n,l,d),this.render=this._renderCached,this.updateTransform=this.displayObjectUpdateTransform,this.calculateBounds=this._calculateCachedBounds,this.getLocalBounds=this._getCachedLocalBounds,this._mask=null,this.filterArea=null;var m=new s.j(p);m.transform.worldTransform=this.transform.worldTransform,m.anchor.x=-e.x/e.width,m.anchor.y=-e.y/e.height,m.alpha=a,m._bounds=this._bounds,this._cacheData.sprite=m,this.transform._parentID=-1,this.parent?this.updateTransform():(this.enableTempParent(),this.updateTransform(),this.disableTempParent(null)),this.containsPoint=m.containsPoint.bind(m)}},r.s$.prototype._renderCachedCanvas=function(t){!this.visible||this.worldAlpha<=0||!this.renderable||(this._initCachedDisplayObjectCanvas(t),this._cacheData.sprite.worldAlpha=this.worldAlpha,this._cacheData.sprite._renderCanvas(t))},r.s$.prototype._initCachedDisplayObjectCanvas=function(t){if(!this._cacheData||!this._cacheData.sprite){var a=this.getLocalBounds(null,!0),e=this.alpha;this.alpha=1;var r=t.context,n=t._projTransform;a.ceil(o.X.RESOLUTION);var l=i.TI.create({width:a.width,height:a.height}),d="cacheAsBitmap_"+(0,h.uid)();this._cacheData.textureCacheId=d,i.VL.addToCache(l.baseTexture,d),i.xE.addToCache(l,d);var u=c;this.transform.localTransform.copyTo(u),u.invert(),u.tx-=a.x,u.ty-=a.y,this.renderCanvas=this._cacheData.originalRenderCanvas,t.render(this,l,!0,u,!1),t.context=r,t._projTransform=n,this.renderCanvas=this._renderCachedCanvas,this.updateTransform=this.displayObjectUpdateTransform,this.calculateBounds=this._calculateCachedBounds,this.getLocalBounds=this._getCachedLocalBounds,this._mask=null,this.filterArea=null;var p=new s.j(l);p.transform.worldTransform=this.transform.worldTransform,p.anchor.x=-a.x/a.width,p.anchor.y=-a.y/a.height,p.alpha=e,p._bounds=this._bounds,this._cacheData.sprite=p,this.transform._parentID=-1,this.parent?this.updateTransform():(this.parent=t._tempDisplayObjectParent,this.updateTransform(),this.parent=null),this.containsPoint=p.containsPoint.bind(p)}},r.s$.prototype._calculateCachedBounds=function(){this._bounds.clear(),this._cacheData.sprite.transform._worldID=this.transform._worldID,this._cacheData.sprite._calculateBounds(),this._bounds.updateID=this._boundsID},r.s$.prototype._getCachedLocalBounds=function(){return this._cacheData.sprite.getLocalBounds(null)},r.s$.prototype._destroyCachedDisplayObject=function(){this._cacheData.sprite._texture.destroy(!0),this._cacheData.sprite=null,i.VL.removeFromCache(this._cacheData.textureCacheId),i.xE.removeFromCache(this._cacheData.textureCacheId),this._cacheData.textureCacheId=null},r.s$.prototype._cacheAsBitmapDestroy=function(t){this.cacheAsBitmap=!1,this.destroy(t)}},4451:(t,a,e)=>{var i=e(29);i.s$.prototype.name=null,i.W2.prototype.getChildByName=function(t,a){for(var e=0,i=this.children.length;e<i;e++)if(this.children[e].name===t)return this.children[e];if(a)for(e=0,i=this.children.length;e<i;e++)if(this.children[e].getChildByName){var s=this.children[e].getChildByName(t,!0);if(s)return s}return null}},476:(t,a,e)=>{var i=e(29),s=e(4295);i.s$.prototype.getGlobalPosition=function(t,a){return void 0===t&&(t=new s.E9),void 0===a&&(a=!1),this.parent?this.parent.toGlobal(this.position,t,a):(t.x=this.position.x,t.y=this.position.y),t}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,