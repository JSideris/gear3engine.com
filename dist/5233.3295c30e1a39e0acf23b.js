"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[5233],{5233:(e,i,n)=>{n.d(i,{M:()=>s});var r=n(29),t=n(5307),s=function(){function e(i){var n=this;i=Object.assign({forceCanvas:!1},i),this.renderer=(0,t.e6)(i),this.stage=new r.W2,e._plugins.forEach((function(e){e.init.call(n,i)}))}return e.registerPlugin=function(i){e._plugins.push(i)},e.prototype.render=function(){this.renderer.render(this.stage)},Object.defineProperty(e.prototype,"view",{get:function(){return this.renderer.view},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"screen",{get:function(){return this.renderer.screen},enumerable:!1,configurable:!0}),e.prototype.destroy=function(i,n){var r=this,t=e._plugins.slice(0);t.reverse(),t.forEach((function(e){e.destroy.call(r)})),this.stage.destroy(n),this.stage=null,this.renderer.destroy(i),this.renderer=null},e}();s._plugins=[];var o=function(){function e(){}return e.init=function(e){var i=this;Object.defineProperty(this,"resizeTo",{set:function(e){window.removeEventListener("resize",this.queueResize),this._resizeTo=e,e&&(window.addEventListener("resize",this.queueResize),this.resize())},get:function(){return this._resizeTo}}),this.queueResize=function(){i._resizeTo&&(i.cancelResize(),i._resizeId=requestAnimationFrame((function(){return i.resize()})))},this.cancelResize=function(){i._resizeId&&(cancelAnimationFrame(i._resizeId),i._resizeId=null)},this.resize=function(){if(i._resizeTo){var e,n;if(i.cancelResize(),i._resizeTo===window)e=window.innerWidth,n=window.innerHeight;else{var r=i._resizeTo;e=r.clientWidth,n=r.clientHeight}i.renderer.resize(e,n)}},this._resizeId=null,this._resizeTo=null,this.resizeTo=e.resizeTo||null},e.destroy=function(){window.removeEventListener("resize",this.queueResize),this.cancelResize(),this.cancelResize=null,this.queueResize=null,this.resizeTo=null,this.resize=null},e}();s.registerPlugin(o)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,