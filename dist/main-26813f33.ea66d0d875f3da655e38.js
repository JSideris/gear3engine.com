"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[6165],{1588:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const s={log:(t,e)=>{i&t&&console.debug(" - ",e)},set:t=>{i&=t},none:0,userLifecycle:1,engine:2};var i=s.none;e.default=s},8889:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=new class{constructor(){this.gunMaterial=8947814,this.baseShieldBrightness=68,this.meanShieldAlpha=.3,this.shieldAlphaRange=.25,this.GLOBAL_UFO_RADIUS=1.5,this.GLOBAL_UFO_MASS=Math.PI*this.GLOBAL_UFO_RADIUS*this.GLOBAL_UFO_RADIUS,this.asteroidGraphicsAngles=16,this.asteroidGraphicsPerspectives=4,this.structureTypes={wall:1,shelter:2,vantagePoint:3,window:4},this.colCats={views:1,bodies:2,fixtures:4,projectiles:8,worldObjs:65534,all:65535},this.pixiBackgroundLayer=0,this.pixiProjectileLayer=1,this.pixiStructuresLayer=2,this.pixiBelowShip=3,this.pixiBodyLayer=4,this.pixiAboveShip=5,this.pixiNameLayer=6,this.pixiEffectLayer=7,this.pixiHideoutLayer=8,this.canvasHudLayer=9,this.qwertyKeyset={87:3,83:4,65:5,68:6,69:8,81:10,82:7,73:3,75:4,74:5,76:6,89:7,79:8,85:10,38:3,40:4,37:5,39:6,32:9,77:11,86:12},this.dvorakKeyset={188:3,79:4,65:5,69:6,190:8,222:10,80:7,67:3,84:4,72:5,78:6,70:7,82:8,71:10,38:3,40:4,37:5,39:6,32:9,77:11,75:12},this.universalKeyset={KeyW:3,KeyS:4,KeyA:5,KeyD:6,KeyE:8,KeyQ:10,KeyR:7,KeyI:3,KeyK:4,KeyJ:5,KeyL:6,KeyY:7,KeyO:8,KeyU:10,ArrowUp:3,ArrowDown:4,ArrowLeft:5,ArrowRight:6,Space:9,KeyM:11,KeyV:12}}};e.default=s},9560:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var s={none:0,debug:1,info:2,log:3,warn:4,error:5};class i{constructor(t,e){this.message=t instanceof Error?t.stack:t,this.level=e,this.time=new Date}toString(){return`${this.time.toISOString()}\t${Object.keys(s)[this.level].toUpperCase()}\t${this.message}`}}class h{constructor(t,e,s){this.dumpToFile=!1,this.level=t,this.logger=e,this.consoleWrite=s,this.logs=[],this.maxSize=1e3,this.logCallback=null}write(t){this||(console.error("This was not defined in logger."),console.trace());let e=new i(t,this.level);return this.add(e),this.logger.consoleLevel&&this.level>=this.logger.consoleLevel&&this.consoleWrite&&this.consoleWrite(e.toString()),e}add(t){this.maxSize<=0||(this.logs.push(t),this.logCallback&&this.logCallback(t),this.logs.length>this.maxSize&&(this.dumpToFile?this.logs=[]:this.logs.shift()),this.logger.trickle(t,this.level-1))}dump(){for(var t="",e=0;e<this.logs.length;e++)t+=this.logs[e].toString()+"\r\n";return t}}const r=new class{constructor(){this.none=new h(s.none,this,null),this.none.maxSize=0,this.debug=new h(s.debug,this,console.debug),this.info=new h(s.info,this,console.info),this.log=new h(s.log,this,console.log),this.warn=new h(s.warn,this,console.warn),this.error=new h(s.error,this,console.error),this.allLogs=[this.none,this.debug,this.info,this.log,this.warn,this.error],this.consoleLevel=s.log}trickle(t,e){e>0&&this.allLogs[e].add(t)}};e.default=r},8823:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const s=new class{constructor(){this.normal=(t,e)=>((Math.random()+Math.random()+Math.random())/1.5-1)*(e||1)+(t||0),this.distanceBetweenSq=(t,e)=>(t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y),this.distanceBetween=(t,e)=>Math.sqrt(this.distanceBetweenSq(t,e)),this.pPerM=20,this.mToP=t=>t*this.pPerM,this.pToM=t=>t/this.pPerM,this.dToR=t=>t*Math.PI/180,this.quantize=t=>.1*Math.round(10*t),this.quantize2=(t,e)=>Math.round(t*(e||10)),this.randomColorCode=()=>Math.round(1535*Math.random()),this.isInRange=(t,e,s)=>t*t>(e.x-s.x)*(e.x-s.x)+(e.y-s.y)*(e.y-s.y),this.angleTo360=t=>t<0?360- -t%360:t%360,this.angleTo180=t=>this.angleTo360(t+180)-180,this.absAngleSub=(t,e)=>{var s=t-e;return s<0&&(s=-s),(s%=360)<180?s:360-s},this.relAngleSub=(t,e)=>(t<0?(t=- -t%360)<=-180&&(t=360+t):(t%=360)>180&&(t=-360+t),e<0?(e=- -e%360)<=-180&&(e=360+e):(e%=360)>180&&(e=-360+e),t-e>180?t-e-360:t-e<-180?t-e+360:t-e),this.rToD=t=>180*t/Math.PI,this.xor=(t,e)=>t?!e:e}getTeamRgbFromT(t){let e=255,s=255,i=255;return 1==t?i=0:2==t?(s=0,i=0):3==t&&(s=0,e=0),{r:e,g:s,b:i}}getRgbFromV(t){let e=255,s=255,i=255;return e=t<256||t>=1280?255:t>=256&&t<512?255-(t-256):t>=1024?t-1024:0,s=t<256?t:t<768?255:t<1024?255-(t-768):0,i=t<=512?0:t<768?t-512:t<1280?255:255-(t-1280),{r:e,g:s,b:i}}getCookie(t){for(var e=t+"=",s=decodeURIComponent(document.cookie).split(";"),i=0;i<s.length;i++){for(var h=s[i];" "==h.charAt(0);)h=h.substring(1);if(0==h.indexOf(e))return h.substring(e.length,h.length)}return""}deleteCookie(t){document.cookie=t+"= ; expires = Thu, 01 Jan 1970 00:00:00 GMT"}stopPropagation(t){t||(t=window.event),t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}probPerDt(t,e){return 1-Math.pow(1-t,e)}ratePerDt(t,e){return Math.pow(t,e)}async sleep(t){await new Promise((e=>{setTimeout((()=>{e(t)}),t)}))}toRomanNumerals(t){if((t=Math.floor(Number(t)))<1)return`${t}`;if(+t>3e6)return`${t}`;if(!+t)return`${t}`;let e=["I","V","X","L","C","D","M","V̅","X̅","L̅","C̅","D̅","M̅"],s=String(+t).split("").map((t=>+t)),i=s.length,h="";return s.forEach((t=>{let s=2*(i-1);h+=function(t,e,s,i){return i<4?t.repeat(i):4===i?t+e:i<9?e+t.repeat(i-5):t+s}(e[s],e[s+1],e[s+2],t),i--})),h}typeName(t){return t.toString().split(" ")[1]}nameof(t){return t}};e.default=s},2600:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});class s{constructor(t,e,i){this.x=0,this.y=0,this.z=0,this._oldMag=0,this._oldMag2=0,1==arguments.length&&t instanceof s?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t||0,this.y=e||0,this.z=i||0)}get mag(){let t=this.x*this.x+this.y*this.y+this.z*this.z;return this._oldMag2==t||(this._oldMag2=t,this._oldMag=Math.sqrt(t)),this._oldMag}get mag2(){return this.x*this.x+this.y*this.y+this.z*this.z}get unit(){let t=1/this.mag;return new s(this.x*t,this.y*t,this.z*t)}get clone(){return new s(this.x,this.y,this.z)}add(t){return new s(this.x+t.x,this.y+t.y,this.z+t.z)}subtract(t){return new s(this.x-t.x,this.y-t.y,this.z-t.z)}multiply(t){return new s(this.x*t,this.y*t,this.z*t)}cross(t){return new s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}addWithVector(t){this.x+=t.x,this.y+=t.y,this.z+=t.z}addWithScalars(t,e,s){this.x+=t,this.y+=e,this.z+=s}multiplyWithScalar(t){this.x*=t,this.y*=t,this.z*=t}normalize(){let t=1/this.mag;this.x*=t,this.y*=t,this.z*=t,this._oldMag=1,this._oldMag2=1}setToScalars(t,e,s){this.x=t,this.y=e,this.z=s}setToVector(t){this.x=t.x,this.y=t.y,this.z=t.z}}e.default=s}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,