"use strict";(self.webpackChunkgear3engine_website=self.webpackChunkgear3engine_website||[]).push([[5829],{9493:function(e,t,i){var a=this&&this.__createBinding||(Object.create?function(e,t,i,a){void 0===a&&(a=i);var s=Object.getOwnPropertyDescriptor(t,i);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,a,s)}:function(e,t,i,a){void 0===a&&(a=i),e[a]=t[i]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&a(t,e,i);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const n=r(i(9754));n.utils.skipHello(),t.default=n},8334:function(e,t,i){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(5412),r=a(i(9493));class n extends s.GameObject{constructor(){super(),this.visibleObjects={},this.aspectRatio=9/16,this.pendingChildren=[],this.backgroundColor=this.backgroundColor??1380368,this.target=this.target??document.body,this.disableScroll=this.disableScroll??!0,this.disableScroll&&(this.target.style.overflow="hidden"),this.target?.offsetHeight||window.innerHeight,this.pixiApp||(this.pixiApp=new r.default.Application({width:window.innerWidth,height:window.innerHeight,antialias:!0,backgroundColor:this.backgroundColor})),this.canvas=this.pixiApp.view,this.target.appendChild(this.canvas),this.pixiView=new r.default.Container,this.pixiView.sortableChildren=!0,this.pixiApp.stage.addChild(this.pixiView),this.useBlinders&&(this.blinderTop=new r.default.Graphics,this.blinderTop.beginFill(0),this.blinderTop.drawRect(0,0,4096,4096),this.blinderBottom=new r.default.Graphics,this.blinderBottom.beginFill(0),this.blinderBottom.drawRect(0,0,4096,4096),this.blinderLeft=new r.default.Graphics,this.blinderLeft.beginFill(0),this.blinderLeft.drawRect(0,0,4096,4096),this.blinderRight=new r.default.Graphics,this.blinderRight.beginFill(0),this.blinderRight.drawRect(0,0,4096,4096),this.pixiApp.stage.addChild(this.blinderTop),this.pixiApp.stage.addChild(this.blinderBottom),this.pixiApp.stage.addChild(this.blinderLeft),this.pixiApp.stage.addChild(this.blinderRight))}drawUpdate(e,t,i){for(let e=0;e<this.pendingChildren.length;e++){let t=this.pendingChildren[e];t.alive&&t.displayObject&&this.pixiView.addChild(t.displayObject)}this.pendingChildren.length=0;for(let a in this.visibleObjects){let s=this.visibleObjects[a];!s.disableDrawUpdate&&s.drawUpdate&&s.drawUpdate(e,t,i)}}onDestroy(e){super.onDestroy&&super.onDestroy(e);for(var t=this.pixiApp.stage.children.length-1;t>=0;t--){let e=this.pixiApp.stage.children[t];e.destroy(),this.pixiApp.stage.removeChild(e)}this.pixiView=null,Object.keys(r.default.utils.TextureCache).forEach((function(e){r.default.utils.TextureCache[e].destroy(!0)})),this.pixiApp.destroy(!0),this.canvas.parentNode.removeChild(this.canvas)}addChild(e){this.visibleObjects[e.id]=e,this.pendingChildren.push(e)}removeChild(e){e.displayObject&&this.pixiView.removeChild(e.displayObject),delete this.visibleObjects[e.id]}setBackgroundColor(e){this.backgroundColor=e,this.pixiApp.renderer.backgroundColor=e}resize(){if(this.pixiApp.renderer.resize(window.innerWidth,window.innerHeight),this.useBlinders){let e=0,t=0;window.innerHeight/window.innerWidth>this.aspectRatio?t=window.innerHeight-window.innerWidth*this.aspectRatio:e=window.innerWidth-window.innerHeight/this.aspectRatio,this.blinderTop.position.set(0,t/2-4096),this.blinderBottom.position.set(0,window.innerHeight-t/2),this.blinderLeft.position.set(e/2-4096,0),this.blinderRight.position.set(window.innerWidth-e/2,0)}}}t.default=n},9521:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.visualEffect2d=void 0;const a=i(5412);t.visualEffect2d=function(e){return class extends e{constructor(...e){super(...e),this.id=null,this.ttl=this.ttl??0,this.timeAlive=this.timeAlive??0,this.dying=this.dying??!1}drawUpdate(e,t,i){return this.timeAlive+=e,!this.persistent&&this.timeAlive>=60&&this.timeAlive<60+e&&console.warn("Warning - long-lived visual effect detected.",this),super.alive&&(super.drawPosition.addWithVector(super.drawVelocity.multiply(e)),this.dying&&(this.ttl-=e,this.ttl<=0&&super.gi.destroyObject(this,a.DeathType.Expired))),super.drawUpdate&&super.drawUpdate(e,t,i),super.alive}kill(e){this.dying=!0,this.ttl=e||0}}}},6066:function(e,t,i){var a=this&&this.__createBinding||(Object.create?function(e,t,i,a){void 0===a&&(a=i);var s=Object.getOwnPropertyDescriptor(t,i);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[i]}}),Object.defineProperty(e,a,s)}:function(e,t,i,a){void 0===a&&(a=i),e[a]=t[i]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__decorate||function(e,t,i,a){var s,r=arguments.length,n=r<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(e,t,i,a);else for(var h=e.length-1;h>=0;h--)(s=e[h])&&(n=(r<3?s(n):r>3?s(t,i,n):s(t,i))||n);return r>3&&n&&Object.defineProperty(t,i,n),n},n=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&a(t,e,i);return s(t,e),t},h=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};Object.defineProperty(t,"__esModule",{value:!0});const o=n(i(2752)),d=i(3409),l=i(565),c=i(5412);let u=class extends l.Camera{#e;#t;constructor(){switch(super(),this.#e=0,this.#t=0,this.shakeVectorM=new c.Vector3,this.mode=this.mode??"perspective",this.mode){case"orthographic":this.threeCam=new o.OrthographicCamera;break;case"perspective":this.threeCam=new o.PerspectiveCamera}this.resize()}shake(e){this.#t+=e}resize(){let e=window.innerWidth,t=window.innerHeight;this.threeCam instanceof o.OrthographicCamera?(this.threeCam.left=-e/2,this.threeCam.right=e/2,this.threeCam.top=-t/2,this.threeCam.bottom=t/2):this.threeCam instanceof o.PerspectiveCamera&&(this.threeCam.aspect=e/t,this.threeCam.updateProjectionMatrix())}drawUpdate(e,t,i){(this.#t>0||this.#e>0||this.shakeVectorM.x||this.shakeVectorM.y)&&(this.#e+=.2*(this.#t-this.#e),this.#t*=.9,this.#e<.1&&(this.#e=0),this.#t<.1&&(this.#t=0),this.shakeVectorM.x+=(Math.random()-.5)*this.#e,this.shakeVectorM.y+=(Math.random()-.5)*this.#e,this.shakeVectorM.x*=.9,this.shakeVectorM.y*=.9,this.#e||this.#t||(Math.abs(this.shakeVectorM.x)<.1&&(this.shakeVectorM.x=0),Math.abs(this.shakeVectorM.y)<.1&&(this.shakeVectorM.y=0))),this.targetObject}};u=r([d.drawable3d,h("design:paramtypes",[])],u),t.default=u},657:function(e,t,i){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=i(5412),r=i(565),n=a(i(6066)),h=a(i(8595));class o extends s.GameInstancePlugin{constructor(e){super(),this.dependencies=[r.GameClientPlugin],this.lastKnownPhysicsUpdate=0,this.maxDt=.1,this.config=e}initialize(){this.gameClientPlugin=this.gameInstance.getPlugin(r.GameClientPlugin),this.gameInstance.on("gameStart",(()=>{this.threeWorld=this.gameInstance.make(h.default,(e=>{e.target=this.config?.target,e.disableScroll=this.config?.disableScroll,e.alphaBg=this.config?.alphaBg??!1,e.clearColor=this.config?.clearColor??0,e.backgroundColor=this.config?.backgroundColor})),this.mainCamera=this.gameInstance.make(n.default,(e=>{})),this.setActiveCamera(this.mainCamera),this.gameClientPlugin.params.useRealCursor,this.resize()})),this.gameInstance.on("gameOver",(()=>{this.gameInstance.destroyObject(this.mainCamera,s.DeathType.GameOver),this.mainCamera=null,this.gameInstance.destroyObject(this.threeWorld,s.DeathType.GameOver),this.threeWorld=null})),this.gameInstance.on("renderUpdate",((e,t,i)=>{e>this.maxDt&&(e=this.maxDt),this.threeWorld.drawUpdate(e,t,i),this.mainCamera&&this.mainCamera.drawUpdate(e,t,i)})),this.gameInstance.on("resize",(()=>{this.resize()})),this.gameInstance.on("physicsUpdate",((e,t)=>{this.lastKnownPhysicsUpdate=performance.now()/1e3})),this.gameInstance.registerRemoteTriggerHandler("trackObject",(e=>{if(!this.mainCamera)throw new Error("The server attempted to track an object, but the camera does not exist.");{let t=this.gameInstance.remoteGameObjectsById[e.data[0]?.value];if(!t)throw new Error(`The server attempted to track an object, but the objct could not be found client-side. Remote ID: ${e.data.id}.`);if(t.is("drawable-3d"))this.mainCamera.targetObject=t;else{let e=s.GameObject.getExtensionByLabel(t,"drawable-3d");if(!e)throw new Error(`Unable to track object ${t.id} because it is not drawable and doesn't have a drawable extension.`);this.mainCamera.targetObject=e}}}))}setActiveCamera(e){this.threeWorld.activeCamera=e}resize(){this.threeWorld&&this.threeWorld.resize(),this.mainCamera&&this.mainCamera.resize()}destroy(){}}t.default=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,